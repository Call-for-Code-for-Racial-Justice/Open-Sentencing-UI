var MeterAltDirective_1;
import { __decorate, __metadata } from "tslib";
import { NgModule, Component, Directive, ElementRef, Input, AfterViewInit } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
let MeterAltComponent = class MeterAltComponent {
    constructor() {
        this.focusable = false;
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltComponent.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltComponent.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MeterAltComponent.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MeterAltComponent.prototype, "focusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltComponent.prototype, "innerClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltComponent.prototype, "size", void 0);
MeterAltComponent = __decorate([
    Component({
        selector: "ibm-icon-meter-alt",
        template: `
    <svg
      ibmIconMeterAlt
      [size]="size"
      [ariaLabel]="ariaLabel"
      [ariaLabelledby]="ariaLabelledby"
      [ariaHidden]="ariaHidden"
      [title]="title"
      [isFocusable]="focusable"
      [attr.class]="innerClass">
    </svg>
  `
    })
], MeterAltComponent);
export { MeterAltComponent };
let MeterAltDirective = MeterAltDirective_1 = class MeterAltDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "MeterAlt32", "filepath": "meter--alt/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z" } }], "name": "meter--alt", "size": 32 }, "size": 32 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><path d="M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z"></path></svg>`
            },
            "24": {
                metadata: { "moduleName": "MeterAlt24", "filepath": "meter--alt/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z" } }], "name": "meter--alt", "size": 24 }, "size": 24 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 32 32" aria-hidden="true"><path d="M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z"></path></svg>`
            },
            "20": {
                metadata: { "moduleName": "MeterAlt20", "filepath": "meter--alt/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z" } }], "name": "meter--alt", "size": 20 }, "size": 20 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20" viewBox="0 0 32 32" aria-hidden="true"><path d="M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z"></path></svg>`
            },
            "16": {
                metadata: { "moduleName": "MeterAlt16", "filepath": "meter--alt/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z" } }], "name": "meter--alt", "size": 16 }, "size": 16 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16" height="16" viewBox="0 0 32 32" aria-hidden="true"><path d="M30 20a13.8535 13.8535 0 00-2.2291-7.5288l-1.4452 1.4453A11.8917 11.8917 0 0128 20zM28 9.414L26.5859 8 18.019 16.5669A3.9521 3.9521 0 0016 16a4 4 0 104 4 3.9533 3.9533 0 00-.5669-2.0191zM16 22a2 2 0 112-2A2.0023 2.0023 0 0116 22zM16 8a11.9086 11.9086 0 016.0833 1.6743l1.4536-1.4536A13.9773 13.9773 0 002 20H4A12.0137 12.0137 0 0116 8z"></path></svg>`
            },
        };
    }
    ngAfterViewInit() {
        const svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        const icon = this.icons[this.size];
        const domParser = new DOMParser();
        const rawSVG = icon.svg;
        const svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        let node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        const attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        const attrKeys = Object.keys(attributes);
        for (let i = 0; i < attrKeys.length; i++) {
            const key = attrKeys[i];
            const value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            const title = document.createElement("title");
            title.textContent = attributes.title;
            MeterAltDirective_1.titleIdCounter++;
            title.setAttribute("id", `meter-alt-${MeterAltDirective_1.titleIdCounter}`);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", `meter-alt-${MeterAltDirective_1.titleIdCounter}`);
        }
    }
};
MeterAltDirective.titleIdCounter = 0;
MeterAltDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltDirective.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltDirective.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MeterAltDirective.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltDirective.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], MeterAltDirective.prototype, "isFocusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], MeterAltDirective.prototype, "size", void 0);
MeterAltDirective = MeterAltDirective_1 = __decorate([
    Directive({
        selector: "[ibmIconMeterAlt]"
    }),
    __metadata("design:paramtypes", [ElementRef])
], MeterAltDirective);
export { MeterAltDirective };
let MeterAltModule = class MeterAltModule {
};
MeterAltModule = __decorate([
    NgModule({
        declarations: [
            MeterAltComponent,
            MeterAltDirective,
        ],
        exports: [
            MeterAltComponent,
            MeterAltDirective,
        ]
    })
], MeterAltModule);
export { MeterAltModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzL21ldGVyLS1hbHQvaWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sRUFDTCxRQUFRLEVBQ1IsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFrQnJELElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBQTlCO1FBS1csY0FBUyxHQUFZLEtBQUssQ0FBQztJQUd0QyxDQUFDO0NBQUEsQ0FBQTtBQVBVO0lBQVIsS0FBSyxFQUFFOztvREFBbUI7QUFDbEI7SUFBUixLQUFLLEVBQUU7O3lEQUF3QjtBQUN2QjtJQUFSLEtBQUssRUFBRTs7cURBQXFCO0FBQ3BCO0lBQVIsS0FBSyxFQUFFOztnREFBZTtBQUNkO0lBQVIsS0FBSyxFQUFFOztvREFBNEI7QUFDM0I7SUFBUixLQUFLLEVBQUU7O3FEQUFvQjtBQUNuQjtJQUFSLEtBQUssRUFBRTs7K0NBQWM7QUFQWCxpQkFBaUI7SUFmN0IsU0FBUyxDQUFDO1FBQ1YsUUFBUSxFQUFFLG9CQUFvQjtRQUM3QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0dBV1Q7S0FDRixDQUFDO0dBQ1csaUJBQWlCLENBUTdCO1NBUlksaUJBQWlCO0FBZTlCLElBQWEsaUJBQWlCLHlCQUE5QixNQUFhLGlCQUFpQjtJQWtDNUIsWUFBc0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQTNCbkMsZ0JBQVcsR0FBWSxLQUFLLENBQUM7UUFHNUIsVUFBSyxHQUFHO1lBRWxCLElBQUksRUFBRTtnQkFDSixRQUFRLEVBQUUsRUFBQyxZQUFZLEVBQUMsWUFBWSxFQUFDLFVBQVUsRUFBQyxrQkFBa0IsRUFBQyxZQUFZLEVBQUMsRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxFQUFDLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxTQUFTLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyxjQUFjLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsRUFBQyxpVkFBaVYsRUFBQyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFDO2dCQUNybkIsR0FBRyxFQUFFLHloQkFBeWhCO2FBQy9oQjtZQUVELElBQUksRUFBRTtnQkFDSixRQUFRLEVBQUUsRUFBQyxZQUFZLEVBQUMsWUFBWSxFQUFDLFVBQVUsRUFBQyxrQkFBa0IsRUFBQyxZQUFZLEVBQUMsRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxFQUFDLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxTQUFTLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyxjQUFjLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsRUFBQyxpVkFBaVYsRUFBQyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFDO2dCQUNybkIsR0FBRyxFQUFFLHloQkFBeWhCO2FBQy9oQjtZQUVELElBQUksRUFBRTtnQkFDSixRQUFRLEVBQUUsRUFBQyxZQUFZLEVBQUMsWUFBWSxFQUFDLFVBQVUsRUFBQyxrQkFBa0IsRUFBQyxZQUFZLEVBQUMsRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxFQUFDLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxTQUFTLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyxjQUFjLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsRUFBQyxpVkFBaVYsRUFBQyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFDO2dCQUNybkIsR0FBRyxFQUFFLHloQkFBeWhCO2FBQy9oQjtZQUVELElBQUksRUFBRTtnQkFDSixRQUFRLEVBQUUsRUFBQyxZQUFZLEVBQUMsWUFBWSxFQUFDLFVBQVUsRUFBQyxrQkFBa0IsRUFBQyxZQUFZLEVBQUMsRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxFQUFDLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxTQUFTLEVBQUMsV0FBVyxFQUFDLE1BQU0sRUFBQyxjQUFjLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEVBQUMsU0FBUyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxFQUFDLEdBQUcsRUFBQyxpVkFBaVYsRUFBQyxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsWUFBWSxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFDO2dCQUNybkIsR0FBRyxFQUFFLHloQkFBeWhCO2FBQy9oQjtTQUVBLENBQUM7SUFFNkMsQ0FBQztJQUVqRCxlQUFlO1FBQ1osTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDMUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUV4RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDeEIsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUMsZUFBZSxDQUFDO1FBRXRGLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7UUFDakMsT0FBTyxJQUFJLEVBQUU7WUFDWCx1Q0FBdUM7WUFDdkMscUVBQXFFO1lBQ3JFLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUQsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDekI7UUFFRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUM7WUFDL0IsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQzVDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUM3QyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU87WUFDL0MsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFlBQVksRUFBRSxJQUFJLENBQUMsU0FBUztZQUM1QixpQkFBaUIsRUFBRSxJQUFJLENBQUMsY0FBYztZQUN0QyxhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFO1NBQ3ZDLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QixJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUU7Z0JBQ25CLFNBQVM7YUFDVjtZQUNELElBQUksS0FBSyxFQUFFO2dCQUNULEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzlCO1NBQ0Y7UUFFRCxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUU7WUFDcEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QyxLQUFLLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFDckMsbUJBQWlCLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDbkMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsYUFBYSxtQkFBaUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQzFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsR0FBRyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLG1CQUFpQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDdEY7SUFDSixDQUFDO0NBQ0QsQ0FBQTtBQXJGUSxnQ0FBYyxHQUFHLENBQUMsQ0FBQzs7WUFpQ1EsVUFBVTs7QUEvQm5DO0lBQVIsS0FBSyxFQUFFOztvREFBbUI7QUFDbEI7SUFBUixLQUFLLEVBQUU7O3lEQUF3QjtBQUN2QjtJQUFSLEtBQUssRUFBRTs7cURBQXFCO0FBQ3BCO0lBQVIsS0FBSyxFQUFFOztnREFBZTtBQUNkO0lBQVIsS0FBSyxFQUFFOztzREFBOEI7QUFDN0I7SUFBUixLQUFLLEVBQUU7OytDQUFjO0FBUlgsaUJBQWlCO0lBSDdCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxtQkFBbUI7S0FDOUIsQ0FBQztxQ0FtQ2tDLFVBQVU7R0FsQ2pDLGlCQUFpQixDQXNGN0I7U0F0RlksaUJBQWlCO0FBdUc5QixJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0NBQUcsQ0FBQTtBQUFqQixjQUFjO0lBZDFCLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRTtZQUVkLGlCQUFpQjtZQUNqQixpQkFBaUI7U0FFaEI7UUFDRCxPQUFPLEVBQUU7WUFFVCxpQkFBaUI7WUFDakIsaUJBQWlCO1NBRWhCO0tBQ0YsQ0FBQztHQUNXLGNBQWMsQ0FBRztTQUFqQixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge1xuICBOZ01vZHVsZSxcbiAgQ29tcG9uZW50LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBBZnRlclZpZXdJbml0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBnZXRBdHRyaWJ1dGVzIH0gZnJvbSBcIkBjYXJib24vaWNvbi1oZWxwZXJzXCI7XG5cblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS1pY29uLW1ldGVyLWFsdFwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzdmdcbiAgICAgIGlibUljb25NZXRlckFsdFxuICAgICAgW3NpemVdPVwic2l6ZVwiXG4gICAgICBbYXJpYUxhYmVsXT1cImFyaWFMYWJlbFwiXG4gICAgICBbYXJpYUxhYmVsbGVkYnldPVwiYXJpYUxhYmVsbGVkYnlcIlxuICAgICAgW2FyaWFIaWRkZW5dPVwiYXJpYUhpZGRlblwiXG4gICAgICBbdGl0bGVdPVwidGl0bGVcIlxuICAgICAgW2lzRm9jdXNhYmxlXT1cImZvY3VzYWJsZVwiXG4gICAgICBbYXR0ci5jbGFzc109XCJpbm5lckNsYXNzXCI+XG4gICAgPC9zdmc+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTWV0ZXJBbHRDb21wb25lbnQge1xuICBASW5wdXQoKSBhcmlhTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcbiAgQElucHV0KCkgYXJpYUhpZGRlbjogYm9vbGVhbjtcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgZm9jdXNhYmxlOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIGlubmVyQ2xhc3M6IHN0cmluZztcbiAgQElucHV0KCkgc2l6ZTogc3RyaW5nO1xufVxuXG5cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBcIltpYm1JY29uTWV0ZXJBbHRdXCJcbn0pXG5leHBvcnQgY2xhc3MgTWV0ZXJBbHREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgc3RhdGljIHRpdGxlSWRDb3VudGVyID0gMDtcblxuICBASW5wdXQoKSBhcmlhTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcbiAgQElucHV0KCkgYXJpYUhpZGRlbjogYm9vbGVhbjtcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgaXNGb2N1c2FibGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgc2l6ZTogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBpY29ucyA9IHtcbiAgICBcbiAgXCIzMlwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIk1ldGVyQWx0MzJcIixcImZpbGVwYXRoXCI6XCJtZXRlci0tYWx0LzMyLmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MzIsXCJoZWlnaHRcIjozMn0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTMwIDIwYTEzLjg1MzUgMTMuODUzNSAwIDAwLTIuMjI5MS03LjUyODhsLTEuNDQ1MiAxLjQ0NTNBMTEuODkxNyAxMS44OTE3IDAgMDEyOCAyMHpNMjggOS40MTRMMjYuNTg1OSA4IDE4LjAxOSAxNi41NjY5QTMuOTUyMSAzLjk1MjEgMCAwMDE2IDE2YTQgNCAwIDEwNCA0IDMuOTUzMyAzLjk1MzMgMCAwMC0uNTY2OS0yLjAxOTF6TTE2IDIyYTIgMiAwIDExMi0yQTIuMDAyMyAyLjAwMjMgMCAwMTE2IDIyek0xNiA4YTExLjkwODYgMTEuOTA4NiAwIDAxNi4wODMzIDEuNjc0M2wxLjQ1MzYtMS40NTM2QTEzLjk3NzMgMTMuOTc3MyAwIDAwMiAyMEg0QTEyLjAxMzcgMTIuMDEzNyAwIDAxMTYgOHpcIn19XSxcIm5hbWVcIjpcIm1ldGVyLS1hbHRcIixcInNpemVcIjozMn0sXCJzaXplXCI6MzJ9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMzAgMjBhMTMuODUzNSAxMy44NTM1IDAgMDAtMi4yMjkxLTcuNTI4OGwtMS40NDUyIDEuNDQ1M0ExMS44OTE3IDExLjg5MTcgMCAwMTI4IDIwek0yOCA5LjQxNEwyNi41ODU5IDggMTguMDE5IDE2LjU2NjlBMy45NTIxIDMuOTUyMSAwIDAwMTYgMTZhNCA0IDAgMTA0IDQgMy45NTMzIDMuOTUzMyAwIDAwLS41NjY5LTIuMDE5MXpNMTYgMjJhMiAyIDAgMTEyLTJBMi4wMDIzIDIuMDAyMyAwIDAxMTYgMjJ6TTE2IDhhMTEuOTA4NiAxMS45MDg2IDAgMDE2LjA4MzMgMS42NzQzbDEuNDUzNi0xLjQ1MzZBMTMuOTc3MyAxMy45NzczIDAgMDAyIDIwSDRBMTIuMDEzNyAxMi4wMTM3IDAgMDExNiA4elwiPjwvcGF0aD48L3N2Zz5gXG4gIH0sXG5cbiAgXCIyNFwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIk1ldGVyQWx0MjRcIixcImZpbGVwYXRoXCI6XCJtZXRlci0tYWx0LzI0LmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MjQsXCJoZWlnaHRcIjoyNH0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTMwIDIwYTEzLjg1MzUgMTMuODUzNSAwIDAwLTIuMjI5MS03LjUyODhsLTEuNDQ1MiAxLjQ0NTNBMTEuODkxNyAxMS44OTE3IDAgMDEyOCAyMHpNMjggOS40MTRMMjYuNTg1OSA4IDE4LjAxOSAxNi41NjY5QTMuOTUyMSAzLjk1MjEgMCAwMDE2IDE2YTQgNCAwIDEwNCA0IDMuOTUzMyAzLjk1MzMgMCAwMC0uNTY2OS0yLjAxOTF6TTE2IDIyYTIgMiAwIDExMi0yQTIuMDAyMyAyLjAwMjMgMCAwMTE2IDIyek0xNiA4YTExLjkwODYgMTEuOTA4NiAwIDAxNi4wODMzIDEuNjc0M2wxLjQ1MzYtMS40NTM2QTEzLjk3NzMgMTMuOTc3MyAwIDAwMiAyMEg0QTEyLjAxMzcgMTIuMDEzNyAwIDAxMTYgOHpcIn19XSxcIm5hbWVcIjpcIm1ldGVyLS1hbHRcIixcInNpemVcIjoyNH0sXCJzaXplXCI6MjR9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMzAgMjBhMTMuODUzNSAxMy44NTM1IDAgMDAtMi4yMjkxLTcuNTI4OGwtMS40NDUyIDEuNDQ1M0ExMS44OTE3IDExLjg5MTcgMCAwMTI4IDIwek0yOCA5LjQxNEwyNi41ODU5IDggMTguMDE5IDE2LjU2NjlBMy45NTIxIDMuOTUyMSAwIDAwMTYgMTZhNCA0IDAgMTA0IDQgMy45NTMzIDMuOTUzMyAwIDAwLS41NjY5LTIuMDE5MXpNMTYgMjJhMiAyIDAgMTEyLTJBMi4wMDIzIDIuMDAyMyAwIDAxMTYgMjJ6TTE2IDhhMTEuOTA4NiAxMS45MDg2IDAgMDE2LjA4MzMgMS42NzQzbDEuNDUzNi0xLjQ1MzZBMTMuOTc3MyAxMy45NzczIDAgMDAyIDIwSDRBMTIuMDEzNyAxMi4wMTM3IDAgMDExNiA4elwiPjwvcGF0aD48L3N2Zz5gXG4gIH0sXG5cbiAgXCIyMFwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIk1ldGVyQWx0MjBcIixcImZpbGVwYXRoXCI6XCJtZXRlci0tYWx0LzIwLmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MjAsXCJoZWlnaHRcIjoyMH0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTMwIDIwYTEzLjg1MzUgMTMuODUzNSAwIDAwLTIuMjI5MS03LjUyODhsLTEuNDQ1MiAxLjQ0NTNBMTEuODkxNyAxMS44OTE3IDAgMDEyOCAyMHpNMjggOS40MTRMMjYuNTg1OSA4IDE4LjAxOSAxNi41NjY5QTMuOTUyMSAzLjk1MjEgMCAwMDE2IDE2YTQgNCAwIDEwNCA0IDMuOTUzMyAzLjk1MzMgMCAwMC0uNTY2OS0yLjAxOTF6TTE2IDIyYTIgMiAwIDExMi0yQTIuMDAyMyAyLjAwMjMgMCAwMTE2IDIyek0xNiA4YTExLjkwODYgMTEuOTA4NiAwIDAxNi4wODMzIDEuNjc0M2wxLjQ1MzYtMS40NTM2QTEzLjk3NzMgMTMuOTc3MyAwIDAwMiAyMEg0QTEyLjAxMzcgMTIuMDEzNyAwIDAxMTYgOHpcIn19XSxcIm5hbWVcIjpcIm1ldGVyLS1hbHRcIixcInNpemVcIjoyMH0sXCJzaXplXCI6MjB9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMzAgMjBhMTMuODUzNSAxMy44NTM1IDAgMDAtMi4yMjkxLTcuNTI4OGwtMS40NDUyIDEuNDQ1M0ExMS44OTE3IDExLjg5MTcgMCAwMTI4IDIwek0yOCA5LjQxNEwyNi41ODU5IDggMTguMDE5IDE2LjU2NjlBMy45NTIxIDMuOTUyMSAwIDAwMTYgMTZhNCA0IDAgMTA0IDQgMy45NTMzIDMuOTUzMyAwIDAwLS41NjY5LTIuMDE5MXpNMTYgMjJhMiAyIDAgMTEyLTJBMi4wMDIzIDIuMDAyMyAwIDAxMTYgMjJ6TTE2IDhhMTEuOTA4NiAxMS45MDg2IDAgMDE2LjA4MzMgMS42NzQzbDEuNDUzNi0xLjQ1MzZBMTMuOTc3MyAxMy45NzczIDAgMDAyIDIwSDRBMTIuMDEzNyAxMi4wMTM3IDAgMDExNiA4elwiPjwvcGF0aD48L3N2Zz5gXG4gIH0sXG5cbiAgXCIxNlwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIk1ldGVyQWx0MTZcIixcImZpbGVwYXRoXCI6XCJtZXRlci0tYWx0LzE2LmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MTYsXCJoZWlnaHRcIjoxNn0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTMwIDIwYTEzLjg1MzUgMTMuODUzNSAwIDAwLTIuMjI5MS03LjUyODhsLTEuNDQ1MiAxLjQ0NTNBMTEuODkxNyAxMS44OTE3IDAgMDEyOCAyMHpNMjggOS40MTRMMjYuNTg1OSA4IDE4LjAxOSAxNi41NjY5QTMuOTUyMSAzLjk1MjEgMCAwMDE2IDE2YTQgNCAwIDEwNCA0IDMuOTUzMyAzLjk1MzMgMCAwMC0uNTY2OS0yLjAxOTF6TTE2IDIyYTIgMiAwIDExMi0yQTIuMDAyMyAyLjAwMjMgMCAwMTE2IDIyek0xNiA4YTExLjkwODYgMTEuOTA4NiAwIDAxNi4wODMzIDEuNjc0M2wxLjQ1MzYtMS40NTM2QTEzLjk3NzMgMTMuOTc3MyAwIDAwMiAyMEg0QTEyLjAxMzcgMTIuMDEzNyAwIDAxMTYgOHpcIn19XSxcIm5hbWVcIjpcIm1ldGVyLS1hbHRcIixcInNpemVcIjoxNn0sXCJzaXplXCI6MTZ9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMzAgMjBhMTMuODUzNSAxMy44NTM1IDAgMDAtMi4yMjkxLTcuNTI4OGwtMS40NDUyIDEuNDQ1M0ExMS44OTE3IDExLjg5MTcgMCAwMTI4IDIwek0yOCA5LjQxNEwyNi41ODU5IDggMTguMDE5IDE2LjU2NjlBMy45NTIxIDMuOTUyMSAwIDAwMTYgMTZhNCA0IDAgMTA0IDQgMy45NTMzIDMuOTUzMyAwIDAwLS41NjY5LTIuMDE5MXpNMTYgMjJhMiAyIDAgMTEyLTJBMi4wMDIzIDIuMDAyMyAwIDAxMTYgMjJ6TTE2IDhhMTEuOTA4NiAxMS45MDg2IDAgMDE2LjA4MzMgMS42NzQzbDEuNDUzNi0xLjQ1MzZBMTMuOTc3MyAxMy45NzczIDAgMDAyIDIwSDRBMTIuMDEzNyAxMi4wMTM3IDAgMDExNiA4elwiPjwvcGF0aD48L3N2Zz5gXG4gIH0sXG5cbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudFJlZjogRWxlbWVudFJlZikge31cblxuXHRuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgY29uc3Qgc3ZnID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZShcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIik7XG5cbiAgICBjb25zdCBpY29uID0gdGhpcy5pY29uc1t0aGlzLnNpemVdXG5cbiAgICBjb25zdCBkb21QYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgY29uc3QgcmF3U1ZHID0gaWNvbi5zdmc7XG4gICAgY29uc3Qgc3ZnRWxlbWVudCA9IGRvbVBhcnNlci5wYXJzZUZyb21TdHJpbmcocmF3U1ZHLCBcImltYWdlL3N2Zyt4bWxcIikuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgbGV0IG5vZGUgPSBzdmdFbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIC8vIGltcG9ydE5vZGUgbWFrZXMgYSBjbG9uZSBvZiB0aGUgbm9kZVxuICAgICAgLy8gdGhpcyBlbnN1cmVzIHdlIGtlZXAgbG9vcGluZyBvdmVyIHRoZSBub2RlcyBpbiB0aGUgcGFyc2VkIGRvY3VtZW50XG4gICAgICBzdmcuYXBwZW5kQ2hpbGQoc3ZnLm93bmVyRG9jdW1lbnQuaW1wb3J0Tm9kZShub2RlLCB0cnVlKSk7XG4gICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZ2V0QXR0cmlidXRlcyh7XG4gICAgICB3aWR0aDogaWNvbi5tZXRhZGF0YS5kZXNjcmlwdG9yLmF0dHJzLmhlaWdodCxcbiAgICAgIGhlaWdodDogaWNvbi5tZXRhZGF0YS5kZXNjcmlwdG9yLmF0dHJzLmhlaWdodCxcbiAgICAgIHZpZXdCb3g6IGljb24ubWV0YWRhdGEuZGVzY3JpcHRvci5hdHRycy52aWV3Qm94LFxuICAgICAgdGl0bGU6IHRoaXMudGl0bGUsXG4gICAgICBcImFyaWEtbGFiZWxcIjogdGhpcy5hcmlhTGFiZWwsXG4gICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiB0aGlzLmFyaWFMYWJlbGxlZGJ5LFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0aGlzLmFyaWFIaWRkZW4sXG4gICAgICBmb2N1c2FibGU6IHRoaXMuaXNGb2N1c2FibGUudG9TdHJpbmcoKVxuICAgIH0pO1xuXG4gICAgY29uc3QgYXR0cktleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBhdHRyS2V5c1tpXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgaWYgKGtleSA9PT0gXCJ0aXRsZVwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGF0dHJpYnV0ZXMudGl0bGUpIHtcbiAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRpdGxlXCIpO1xuICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSBhdHRyaWJ1dGVzLnRpdGxlO1xuICAgICAgTWV0ZXJBbHREaXJlY3RpdmUudGl0bGVJZENvdW50ZXIrKztcbiAgICAgIHRpdGxlLnNldEF0dHJpYnV0ZShcImlkXCIsIGBtZXRlci1hbHQtJHtNZXRlckFsdERpcmVjdGl2ZS50aXRsZUlkQ291bnRlcn1gKTtcbiAgICAgIHN2Zy5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIGBtZXRlci1hbHQtJHtNZXRlckFsdERpcmVjdGl2ZS50aXRsZUlkQ291bnRlcn1gKTtcbiAgICB9XG5cdH1cbn1cblxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBcbiAgTWV0ZXJBbHRDb21wb25lbnQsXG4gIE1ldGVyQWx0RGlyZWN0aXZlLFxuXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBcbiAgTWV0ZXJBbHRDb21wb25lbnQsXG4gIE1ldGVyQWx0RGlyZWN0aXZlLFxuXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTWV0ZXJBbHRNb2R1bGUge31cbiJdfQ==