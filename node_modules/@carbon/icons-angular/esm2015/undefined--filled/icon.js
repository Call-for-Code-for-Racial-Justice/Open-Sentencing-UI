var UndefinedFilledDirective_1;
import { __decorate, __metadata } from "tslib";
import { NgModule, Component, Directive, ElementRef, Input, AfterViewInit } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
let UndefinedFilledComponent = class UndefinedFilledComponent {
    constructor() {
        this.focusable = false;
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledComponent.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledComponent.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], UndefinedFilledComponent.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], UndefinedFilledComponent.prototype, "focusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledComponent.prototype, "innerClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledComponent.prototype, "size", void 0);
UndefinedFilledComponent = __decorate([
    Component({
        selector: "ibm-icon-undefined-filled",
        template: `
    <svg
      ibmIconUndefinedFilled
      [size]="size"
      [ariaLabel]="ariaLabel"
      [ariaLabelledby]="ariaLabelledby"
      [ariaHidden]="ariaHidden"
      [title]="title"
      [isFocusable]="focusable"
      [attr.class]="innerClass">
    </svg>
  `
    })
], UndefinedFilledComponent);
export { UndefinedFilledComponent };
let UndefinedFilledDirective = UndefinedFilledDirective_1 = class UndefinedFilledDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "UndefinedFilled32", "filepath": "undefined--filled/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M11 14H21V18H11z", "data-icon-path": "inner-path" } }], "name": "undefined--filled", "size": 32 }, "size": 32 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><path d="M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z"></path><path fill="none" d="M11 14H21V18H11z" data-icon-path="inner-path"></path></svg>`
            },
            "24": {
                metadata: { "moduleName": "UndefinedFilled24", "filepath": "undefined--filled/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M11 14H21V18H11z", "data-icon-path": "inner-path" } }], "name": "undefined--filled", "size": 24 }, "size": 24 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 32 32" aria-hidden="true"><path d="M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z"></path><path fill="none" d="M11 14H21V18H11z" data-icon-path="inner-path"></path></svg>`
            },
            "20": {
                metadata: { "moduleName": "UndefinedFilled20", "filepath": "undefined--filled/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M11 14H21V18H11z", "data-icon-path": "inner-path" } }], "name": "undefined--filled", "size": 20 }, "size": 20 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20" viewBox="0 0 32 32" aria-hidden="true"><path d="M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z"></path><path fill="none" d="M11 14H21V18H11z" data-icon-path="inner-path"></path></svg>`
            },
            "16": {
                metadata: { "moduleName": "UndefinedFilled16", "filepath": "undefined--filled/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z" } }, { "elem": "path", "attrs": { "fill": "none", "d": "M11 14H21V18H11z", "data-icon-path": "inner-path" } }], "name": "undefined--filled", "size": 16 }, "size": 16 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16" height="16" viewBox="0 0 32 32" aria-hidden="true"><path d="M29.4162,14.5905,17.41,2.5838a1.9937,1.9937,0,0,0-2.8192,0L2.5838,14.5905a1.9934,1.9934,0,0,0,0,2.819L14.5905,29.4162a1.9937,1.9937,0,0,0,2.8192,0L29.4162,17.41A1.9934,1.9934,0,0,0,29.4162,14.5905ZM21,18H11V14H21Z"></path><path fill="none" d="M11 14H21V18H11z" data-icon-path="inner-path"></path></svg>`
            },
        };
    }
    ngAfterViewInit() {
        const svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        const icon = this.icons[this.size];
        const domParser = new DOMParser();
        const rawSVG = icon.svg;
        const svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        let node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        const attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        const attrKeys = Object.keys(attributes);
        for (let i = 0; i < attrKeys.length; i++) {
            const key = attrKeys[i];
            const value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            const title = document.createElement("title");
            title.textContent = attributes.title;
            UndefinedFilledDirective_1.titleIdCounter++;
            title.setAttribute("id", `undefined-filled-${UndefinedFilledDirective_1.titleIdCounter}`);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", `undefined-filled-${UndefinedFilledDirective_1.titleIdCounter}`);
        }
    }
};
UndefinedFilledDirective.titleIdCounter = 0;
UndefinedFilledDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledDirective.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledDirective.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], UndefinedFilledDirective.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledDirective.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], UndefinedFilledDirective.prototype, "isFocusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], UndefinedFilledDirective.prototype, "size", void 0);
UndefinedFilledDirective = UndefinedFilledDirective_1 = __decorate([
    Directive({
        selector: "[ibmIconUndefinedFilled]"
    }),
    __metadata("design:paramtypes", [ElementRef])
], UndefinedFilledDirective);
export { UndefinedFilledDirective };
let UndefinedFilledModule = class UndefinedFilledModule {
};
UndefinedFilledModule = __decorate([
    NgModule({
        declarations: [
            UndefinedFilledComponent,
            UndefinedFilledDirective,
        ],
        exports: [
            UndefinedFilledComponent,
            UndefinedFilledDirective,
        ]
    })
], UndefinedFilledModule);
export { UndefinedFilledModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzL3VuZGVmaW5lZC0tZmlsbGVkL2ljb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLFNBQVMsRUFDVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBa0JyRCxJQUFhLHdCQUF3QixHQUFyQyxNQUFhLHdCQUF3QjtJQUFyQztRQUtXLGNBQVMsR0FBWSxLQUFLLENBQUM7SUFHdEMsQ0FBQztDQUFBLENBQUE7QUFQVTtJQUFSLEtBQUssRUFBRTs7MkRBQW1CO0FBQ2xCO0lBQVIsS0FBSyxFQUFFOztnRUFBd0I7QUFDdkI7SUFBUixLQUFLLEVBQUU7OzREQUFxQjtBQUNwQjtJQUFSLEtBQUssRUFBRTs7dURBQWU7QUFDZDtJQUFSLEtBQUssRUFBRTs7MkRBQTRCO0FBQzNCO0lBQVIsS0FBSyxFQUFFOzs0REFBb0I7QUFDbkI7SUFBUixLQUFLLEVBQUU7O3NEQUFjO0FBUFgsd0JBQXdCO0lBZnBDLFNBQVMsQ0FBQztRQUNWLFFBQVEsRUFBRSwyQkFBMkI7UUFDcEMsUUFBUSxFQUFFOzs7Ozs7Ozs7OztHQVdUO0tBQ0YsQ0FBQztHQUNXLHdCQUF3QixDQVFwQztTQVJZLHdCQUF3QjtBQWVyQyxJQUFhLHdCQUF3QixnQ0FBckMsTUFBYSx3QkFBd0I7SUFrQ25DLFlBQXNCLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUEzQm5DLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBRzVCLFVBQUssR0FBRztZQUVsQixJQUFJLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLEVBQUMsWUFBWSxFQUFDLG1CQUFtQixFQUFDLFVBQVUsRUFBQyx5QkFBeUIsRUFBQyxZQUFZLEVBQUMsRUFBQyxNQUFNLEVBQUMsS0FB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QXdCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUN4RixHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZCLEdBQUcsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsb0JBQW9CLDBCQUF3QixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDcEc7SUFDSixDQUFDO0NBQ0QsQ0FBQTtBQXJGUSx1Q0FBYyxHQUFHLENBQUMsQ0FBQzs7WUFpQ1EsVUFBVTs7QUEvQm5DO0lBQVIsS0FBSyxFQUFFOzsyREFBbUI7QUFDbEI7SUFBUixLQUFLLEVBQUU7O2dFQUF3QjtBQUN2QjtJQUFSLEtBQUssRUFBRTs7NERBQXFCO0FBQ3BCO0lBQVIsS0FBSyxFQUFFOzt1REFBZTtBQUNkO0lBQVIsS0FBSyxFQUFFOzs2REFBOEI7QUFDN0I7SUFBUixLQUFLLEVBQUU7O3NEQUFjO0FBUlgsd0JBQXdCO0lBSHBDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSwwQkFBMEI7S0FDckMsQ0FBQztxQ0FtQ2tDLFVBQVU7R0FsQ2pDLHdCQUF3QixDQXNGcEM7U0F0Rlksd0JBQXdCO0FBdUdyQyxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtDQUFHLENBQUE7QUFBeEIscUJBQXFCO0lBZGpDLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRTtZQUVkLHdCQUF3QjtZQUN4Qix3QkFBd0I7U0FFdkI7UUFDRCxPQUFPLEVBQUU7WUFFVCx3QkFBd0I7WUFDeEIsd0JBQXdCO1NBRXZCO0tBQ0YsQ0FBQztHQUNXLHFCQUFxQixDQUFHO1NBQXhCLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtcbiAgTmdNb2R1bGUsXG4gIENvbXBvbmVudCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgQWZ0ZXJWaWV3SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgZ2V0QXR0cmlidXRlcyB9IGZyb20gXCJAY2FyYm9uL2ljb24taGVscGVyc1wiO1xuXG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0taWNvbi11bmRlZmluZWQtZmlsbGVkXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHN2Z1xuICAgICAgaWJtSWNvblVuZGVmaW5lZEZpbGxlZFxuICAgICAgW3NpemVdPVwic2l6ZVwiXG4gICAgICBbYXJpYUxhYmVsXT1cImFyaWFMYWJlbFwiXG4gICAgICBbYXJpYUxhYmVsbGVkYnldPVwiYXJpYUxhYmVsbGVkYnlcIlxuICAgICAgW2FyaWFIaWRkZW5dPVwiYXJpYUhpZGRlblwiXG4gICAgICBbdGl0bGVdPVwidGl0bGVcIlxuICAgICAgW2lzRm9jdXNhYmxlXT1cImZvY3VzYWJsZVwiXG4gICAgICBbYXR0ci5jbGFzc109XCJpbm5lckNsYXNzXCI+XG4gICAgPC9zdmc+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgVW5kZWZpbmVkRmlsbGVkQ29tcG9uZW50IHtcbiAgQElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFIaWRkZW46IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZvY3VzYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBpbm5lckNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNpemU6IHN0cmluZztcbn1cblxuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogXCJbaWJtSWNvblVuZGVmaW5lZEZpbGxlZF1cIlxufSlcbmV4cG9ydCBjbGFzcyBVbmRlZmluZWRGaWxsZWREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgc3RhdGljIHRpdGxlSWRDb3VudGVyID0gMDtcblxuICBASW5wdXQoKSBhcmlhTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcbiAgQElucHV0KCkgYXJpYUhpZGRlbjogYm9vbGVhbjtcbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcbiAgQElucHV0KCkgaXNGb2N1c2FibGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgc2l6ZTogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBpY29ucyA9IHtcbiAgICBcbiAgXCIzMlwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIlVuZGVmaW5lZEZpbGxlZDMyXCIsXCJmaWxlcGF0aFwiOlwidW5kZWZpbmVkLS1maWxsZWQvMzIuanNcIixcImRlc2NyaXB0b3JcIjp7XCJlbGVtXCI6XCJzdmdcIixcImF0dHJzXCI6e1wieG1sbnNcIjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJ2aWV3Qm94XCI6XCIwIDAgMzIgMzJcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwiLFwid2lkdGhcIjozMixcImhlaWdodFwiOjMyfSxcImNvbnRlbnRcIjpbe1wiZWxlbVwiOlwicGF0aFwiLFwiYXR0cnNcIjp7XCJkXCI6XCJNMjkuNDE2MiwxNC41OTA1LDE3LjQxLDIuNTgzOGExLjk5MzcsMS45OTM3LDAsMCwwLTIuODE5MiwwTDIuNTgzOCwxNC41OTA1YTEuOTkzNCwxLjk5MzQsMCwwLDAsMCwyLjgxOUwxNC41OTA1LDI5LjQxNjJhMS45OTM3LDEuOTkzNywwLDAsMCwyLjgxOTIsMEwyOS40MTYyLDE3LjQxQTEuOTkzNCwxLjk5MzQsMCwwLDAsMjkuNDE2MiwxNC41OTA1Wk0yMSwxOEgxMVYxNEgyMVpcIn19LHtcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZmlsbFwiOlwibm9uZVwiLFwiZFwiOlwiTTExIDE0SDIxVjE4SDExelwiLFwiZGF0YS1pY29uLXBhdGhcIjpcImlubmVyLXBhdGhcIn19XSxcIm5hbWVcIjpcInVuZGVmaW5lZC0tZmlsbGVkXCIsXCJzaXplXCI6MzJ9LFwic2l6ZVwiOjMyfSxcbiAgICBzdmc6IGA8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48cGF0aCBkPVwiTTI5LjQxNjIsMTQuNTkwNSwxNy40MSwyLjU4MzhhMS45OTM3LDEuOTkzNywwLDAsMC0yLjgxOTIsMEwyLjU4MzgsMTQuNTkwNWExLjk5MzQsMS45OTM0LDAsMCwwLDAsMi44MTlMMTQuNTkwNSwyOS40MTYyYTEuOTkzNywxLjk5MzcsMCwwLDAsMi44MTkyLDBMMjkuNDE2MiwxNy40MUExLjk5MzQsMS45OTM0LDAsMCwwLDI5LjQxNjIsMTQuNTkwNVpNMjEsMThIMTFWMTRIMjFaXCI+PC9wYXRoPjxwYXRoIGZpbGw9XCJub25lXCIgZD1cIk0xMSAxNEgyMVYxOEgxMXpcIiBkYXRhLWljb24tcGF0aD1cImlubmVyLXBhdGhcIj48L3BhdGg+PC9zdmc+YFxuICB9LFxuXG4gIFwiMjRcIjoge1xuICAgIG1ldGFkYXRhOiB7XCJtb2R1bGVOYW1lXCI6XCJVbmRlZmluZWRGaWxsZWQyNFwiLFwiZmlsZXBhdGhcIjpcInVuZGVmaW5lZC0tZmlsbGVkLzI0LmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MjQsXCJoZWlnaHRcIjoyNH0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTI5LjQxNjIsMTQuNTkwNSwxNy40MSwyLjU4MzhhMS45OTM3LDEuOTkzNywwLDAsMC0yLjgxOTIsMEwyLjU4MzgsMTQuNTkwNWExLjk5MzQsMS45OTM0LDAsMCwwLDAsMi44MTlMMTQuNTkwNSwyOS40MTYyYTEuOTkzNywxLjk5MzcsMCwwLDAsMi44MTkyLDBMMjkuNDE2MiwxNy40MUExLjk5MzQsMS45OTM0LDAsMCwwLDI5LjQxNjIsMTQuNTkwNVpNMjEsMThIMTFWMTRIMjFaXCJ9fSx7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImZpbGxcIjpcIm5vbmVcIixcImRcIjpcIk0xMSAxNEgyMVYxOEgxMXpcIixcImRhdGEtaWNvbi1wYXRoXCI6XCJpbm5lci1wYXRoXCJ9fV0sXCJuYW1lXCI6XCJ1bmRlZmluZWQtLWZpbGxlZFwiLFwic2l6ZVwiOjI0fSxcInNpemVcIjoyNH0sXG4gICAgc3ZnOiBgPHN2ZyBmb2N1c2FibGU9XCJmYWxzZVwiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBtZWV0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PHBhdGggZD1cIk0yOS40MTYyLDE0LjU5MDUsMTcuNDEsMi41ODM4YTEuOTkzNywxLjk5MzcsMCwwLDAtMi44MTkyLDBMMi41ODM4LDE0LjU5MDVhMS45OTM0LDEuOTkzNCwwLDAsMCwwLDIuODE5TDE0LjU5MDUsMjkuNDE2MmExLjk5MzcsMS45OTM3LDAsMCwwLDIuODE5MiwwTDI5LjQxNjIsMTcuNDFBMS45OTM0LDEuOTkzNCwwLDAsMCwyOS40MTYyLDE0LjU5MDVaTTIxLDE4SDExVjE0SDIxWlwiPjwvcGF0aD48cGF0aCBmaWxsPVwibm9uZVwiIGQ9XCJNMTEgMTRIMjFWMThIMTF6XCIgZGF0YS1pY29uLXBhdGg9XCJpbm5lci1wYXRoXCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICBcIjIwXCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiVW5kZWZpbmVkRmlsbGVkMjBcIixcImZpbGVwYXRoXCI6XCJ1bmRlZmluZWQtLWZpbGxlZC8yMC5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjIwLFwiaGVpZ2h0XCI6MjB9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk0yOS40MTYyLDE0LjU5MDUsMTcuNDEsMi41ODM4YTEuOTkzNywxLjk5MzcsMCwwLDAtMi44MTkyLDBMMi41ODM4LDE0LjU5MDVhMS45OTM0LDEuOTkzNCwwLDAsMCwwLDIuODE5TDE0LjU5MDUsMjkuNDE2MmExLjk5MzcsMS45OTM3LDAsMCwwLDIuODE5MiwwTDI5LjQxNjIsMTcuNDFBMS45OTM0LDEuOTkzNCwwLDAsMCwyOS40MTYyLDE0LjU5MDVaTTIxLDE4SDExVjE0SDIxWlwifX0se1wiZWxlbVwiOlwicGF0aFwiLFwiYXR0cnNcIjp7XCJmaWxsXCI6XCJub25lXCIsXCJkXCI6XCJNMTEgMTRIMjFWMThIMTF6XCIsXCJkYXRhLWljb24tcGF0aFwiOlwiaW5uZXItcGF0aFwifX1dLFwibmFtZVwiOlwidW5kZWZpbmVkLS1maWxsZWRcIixcInNpemVcIjoyMH0sXCJzaXplXCI6MjB9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMjkuNDE2MiwxNC41OTA1LDE3LjQxLDIuNTgzOGExLjk5MzcsMS45OTM3LDAsMCwwLTIuODE5MiwwTDIuNTgzOCwxNC41OTA1YTEuOTkzNCwxLjk5MzQsMCwwLDAsMCwyLjgxOUwxNC41OTA1LDI5LjQxNjJhMS45OTM3LDEuOTkzNywwLDAsMCwyLjgxOTIsMEwyOS40MTYyLDE3LjQxQTEuOTkzNCwxLjk5MzQsMCwwLDAsMjkuNDE2MiwxNC41OTA1Wk0yMSwxOEgxMVYxNEgyMVpcIj48L3BhdGg+PHBhdGggZmlsbD1cIm5vbmVcIiBkPVwiTTExIDE0SDIxVjE4SDExelwiIGRhdGEtaWNvbi1wYXRoPVwiaW5uZXItcGF0aFwiPjwvcGF0aD48L3N2Zz5gXG4gIH0sXG5cbiAgXCIxNlwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIlVuZGVmaW5lZEZpbGxlZDE2XCIsXCJmaWxlcGF0aFwiOlwidW5kZWZpbmVkLS1maWxsZWQvMTYuanNcIixcImRlc2NyaXB0b3JcIjp7XCJlbGVtXCI6XCJzdmdcIixcImF0dHJzXCI6e1wieG1sbnNcIjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJ2aWV3Qm94XCI6XCIwIDAgMzIgMzJcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwiLFwid2lkdGhcIjoxNixcImhlaWdodFwiOjE2fSxcImNvbnRlbnRcIjpbe1wiZWxlbVwiOlwicGF0aFwiLFwiYXR0cnNcIjp7XCJkXCI6XCJNMjkuNDE2MiwxNC41OTA1LDE3LjQxLDIuNTgzOGExLjk5MzcsMS45OTM3LDAsMCwwLTIuODE5MiwwTDIuNTgzOCwxNC41OTA1YTEuOTkzNCwxLjk5MzQsMCwwLDAsMCwyLjgxOUwxNC41OTA1LDI5LjQxNjJhMS45OTM3LDEuOTkzNywwLDAsMCwyLjgxOTIsMEwyOS40MTYyLDE3LjQxQTEuOTkzNCwxLjk5MzQsMCwwLDAsMjkuNDE2MiwxNC41OTA1Wk0yMSwxOEgxMVYxNEgyMVpcIn19LHtcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZmlsbFwiOlwibm9uZVwiLFwiZFwiOlwiTTExIDE0SDIxVjE4SDExelwiLFwiZGF0YS1pY29uLXBhdGhcIjpcImlubmVyLXBhdGhcIn19XSxcIm5hbWVcIjpcInVuZGVmaW5lZC0tZmlsbGVkXCIsXCJzaXplXCI6MTZ9LFwic2l6ZVwiOjE2fSxcbiAgICBzdmc6IGA8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48cGF0aCBkPVwiTTI5LjQxNjIsMTQuNTkwNSwxNy40MSwyLjU4MzhhMS45OTM3LDEuOTkzNywwLDAsMC0yLjgxOTIsMEwyLjU4MzgsMTQuNTkwNWExLjk5MzQsMS45OTM0LDAsMCwwLDAsMi44MTlMMTQuNTkwNSwyOS40MTYyYTEuOTkzNywxLjk5MzcsMCwwLDAsMi44MTkyLDBMMjkuNDE2MiwxNy40MUExLjk5MzQsMS45OTM0LDAsMCwwLDI5LjQxNjIsMTQuNTkwNVpNMjEsMThIMTFWMTRIMjFaXCI+PC9wYXRoPjxwYXRoIGZpbGw9XCJub25lXCIgZD1cIk0xMSAxNEgyMVYxOEgxMXpcIiBkYXRhLWljb24tcGF0aD1cImlubmVyLXBhdGhcIj48L3BhdGg+PC9zdmc+YFxuICB9LFxuXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cblx0bmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IHN2ZyA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgY29uc3QgaWNvbiA9IHRoaXMuaWNvbnNbdGhpcy5zaXplXVxuXG4gICAgY29uc3QgZG9tUGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgIGNvbnN0IHJhd1NWRyA9IGljb24uc3ZnO1xuICAgIGNvbnN0IHN2Z0VsZW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJhd1NWRywgXCJpbWFnZS9zdmcreG1sXCIpLmRvY3VtZW50RWxlbWVudDtcblxuICAgIGxldCBub2RlID0gc3ZnRWxlbWVudC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAvLyBpbXBvcnROb2RlIG1ha2VzIGEgY2xvbmUgb2YgdGhlIG5vZGVcbiAgICAgIC8vIHRoaXMgZW5zdXJlcyB3ZSBrZWVwIGxvb3Bpbmcgb3ZlciB0aGUgbm9kZXMgaW4gdGhlIHBhcnNlZCBkb2N1bWVudFxuICAgICAgc3ZnLmFwcGVuZENoaWxkKHN2Zy5vd25lckRvY3VtZW50LmltcG9ydE5vZGUobm9kZSwgdHJ1ZSkpO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGdldEF0dHJpYnV0ZXMoe1xuICAgICAgd2lkdGg6IGljb24ubWV0YWRhdGEuZGVzY3JpcHRvci5hdHRycy5oZWlnaHQsXG4gICAgICBoZWlnaHQ6IGljb24ubWV0YWRhdGEuZGVzY3JpcHRvci5hdHRycy5oZWlnaHQsXG4gICAgICB2aWV3Qm94OiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMudmlld0JveCxcbiAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMuYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogdGhpcy5hcmlhTGFiZWxsZWRieSxcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdGhpcy5hcmlhSGlkZGVuLFxuICAgICAgZm9jdXNhYmxlOiB0aGlzLmlzRm9jdXNhYmxlLnRvU3RyaW5nKClcbiAgICB9KTtcblxuICAgIGNvbnN0IGF0dHJLZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gYXR0cktleXNbaV07XG4gICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgIGlmIChrZXkgPT09IFwidGl0bGVcIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhdHRyaWJ1dGVzLnRpdGxlKSB7XG4gICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiKTtcbiAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gYXR0cmlidXRlcy50aXRsZTtcbiAgICAgIFVuZGVmaW5lZEZpbGxlZERpcmVjdGl2ZS50aXRsZUlkQ291bnRlcisrO1xuICAgICAgdGl0bGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgYHVuZGVmaW5lZC1maWxsZWQtJHtVbmRlZmluZWRGaWxsZWREaXJlY3RpdmUudGl0bGVJZENvdW50ZXJ9YCk7XG4gICAgICBzdmcuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiLCBgdW5kZWZpbmVkLWZpbGxlZC0ke1VuZGVmaW5lZEZpbGxlZERpcmVjdGl2ZS50aXRsZUlkQ291bnRlcn1gKTtcbiAgICB9XG5cdH1cbn1cblxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBcbiAgVW5kZWZpbmVkRmlsbGVkQ29tcG9uZW50LFxuICBVbmRlZmluZWRGaWxsZWREaXJlY3RpdmUsXG5cbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFxuICBVbmRlZmluZWRGaWxsZWRDb21wb25lbnQsXG4gIFVuZGVmaW5lZEZpbGxlZERpcmVjdGl2ZSxcblxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFVuZGVmaW5lZEZpbGxlZE1vZHVsZSB7fVxuIl19