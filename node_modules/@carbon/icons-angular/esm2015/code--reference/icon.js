var CodeReferenceDirective_1;
import { __decorate, __metadata } from "tslib";
import { NgModule, Component, Directive, ElementRef, Input, AfterViewInit } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
let CodeReferenceComponent = class CodeReferenceComponent {
    constructor() {
        this.focusable = false;
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceComponent.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceComponent.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CodeReferenceComponent.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CodeReferenceComponent.prototype, "focusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceComponent.prototype, "innerClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceComponent.prototype, "size", void 0);
CodeReferenceComponent = __decorate([
    Component({
        selector: "ibm-icon-code-reference",
        template: `
    <svg
      ibmIconCodeReference
      [size]="size"
      [ariaLabel]="ariaLabel"
      [ariaLabelledby]="ariaLabelledby"
      [ariaHidden]="ariaHidden"
      [title]="title"
      [isFocusable]="focusable"
      [attr.class]="innerClass">
    </svg>
  `
    })
], CodeReferenceComponent);
export { CodeReferenceComponent };
let CodeReferenceDirective = CodeReferenceDirective_1 = class CodeReferenceDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "CodeReference32", "filepath": "code--reference/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z" } }, { "elem": "path", "attrs": { "d": "M8.944 9.001H24.974000000000004V11.001H8.944z", "transform": "rotate(-74.995 16.96 10)" } }, { "elem": "path", "attrs": { "d": "M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z" } }], "name": "code--reference", "size": 32 }, "size": 32 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><path d="M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z"></path><path d="M8.944 9.001H24.974000000000004V11.001H8.944z" transform="rotate(-74.995 16.96 10)"></path><path d="M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z"></path></svg>`
            },
            "24": {
                metadata: { "moduleName": "CodeReference24", "filepath": "code--reference/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z" } }, { "elem": "path", "attrs": { "d": "M8.944 9.001H24.974000000000004V11.001H8.944z", "transform": "rotate(-74.995 16.96 10)" } }, { "elem": "path", "attrs": { "d": "M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z" } }], "name": "code--reference", "size": 24 }, "size": 24 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 32 32" aria-hidden="true"><path d="M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z"></path><path d="M8.944 9.001H24.974000000000004V11.001H8.944z" transform="rotate(-74.995 16.96 10)"></path><path d="M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z"></path></svg>`
            },
            "20": {
                metadata: { "moduleName": "CodeReference20", "filepath": "code--reference/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z" } }, { "elem": "path", "attrs": { "d": "M8.944 9.001H24.974000000000004V11.001H8.944z", "transform": "rotate(-74.995 16.96 10)" } }, { "elem": "path", "attrs": { "d": "M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z" } }], "name": "code--reference", "size": 20 }, "size": 20 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20" viewBox="0 0 32 32" aria-hidden="true"><path d="M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z"></path><path d="M8.944 9.001H24.974000000000004V11.001H8.944z" transform="rotate(-74.995 16.96 10)"></path><path d="M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z"></path></svg>`
            },
            "16": {
                metadata: { "moduleName": "CodeReference16", "filepath": "code--reference/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z" } }, { "elem": "path", "attrs": { "d": "M8.944 9.001H24.974000000000004V11.001H8.944z", "transform": "rotate(-74.995 16.96 10)" } }, { "elem": "path", "attrs": { "d": "M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z" } }], "name": "code--reference", "size": 16 }, "size": 16 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16" height="16" viewBox="0 0 32 32" aria-hidden="true"><path d="M4 20L4 22 8.586 22 2 28.586 3.414 30 10 23.414 10 28 12 28 12 20 4 20zM30 10L24 4 22.586 5.414 27.172 10 22.586 14.586 24 16 30 10z"></path><path d="M8.944 9.001H24.974000000000004V11.001H8.944z" transform="rotate(-74.995 16.96 10)"></path><path d="M4 10L10 4 11.414 5.414 6.828 10 11.414 14.586 10 16 4 10z"></path></svg>`
            },
        };
    }
    ngAfterViewInit() {
        const svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        const icon = this.icons[this.size];
        const domParser = new DOMParser();
        const rawSVG = icon.svg;
        const svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        let node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        const attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        const attrKeys = Object.keys(attributes);
        for (let i = 0; i < attrKeys.length; i++) {
            const key = attrKeys[i];
            const value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            const title = document.createElement("title");
            title.textContent = attributes.title;
            CodeReferenceDirective_1.titleIdCounter++;
            title.setAttribute("id", `code-reference-${CodeReferenceDirective_1.titleIdCounter}`);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", `code-reference-${CodeReferenceDirective_1.titleIdCounter}`);
        }
    }
};
CodeReferenceDirective.titleIdCounter = 0;
CodeReferenceDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceDirective.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceDirective.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CodeReferenceDirective.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceDirective.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], CodeReferenceDirective.prototype, "isFocusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CodeReferenceDirective.prototype, "size", void 0);
CodeReferenceDirective = CodeReferenceDirective_1 = __decorate([
    Directive({
        selector: "[ibmIconCodeReference]"
    }),
    __metadata("design:paramtypes", [ElementRef])
], CodeReferenceDirective);
export { CodeReferenceDirective };
let CodeReferenceModule = class CodeReferenceModule {
};
CodeReferenceModule = __decorate([
    NgModule({
        declarations: [
            CodeReferenceComponent,
            CodeReferenceDirective,
        ],
        exports: [
            CodeReferenceComponent,
            CodeReferenceDirective,
        ]
    })
], CodeReferenceModule);
export { CodeReferenceModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzL2NvZGUtLXJlZmVyZW5jZS9pY29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxFQUNMLFFBQVEsRUFDUixTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsYUFBYSxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWtCckQsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBc0I7SUFBbkM7UUFLVyxjQUFTLEdBQVksS0FBSyxDQUFDO0lBR3RDLENBQUM7Q0FBQSxDQUFBO0FBUFU7SUFBUixLQUFLLEVBQUU7O3lEQUFtQjtBQUNsQjtJQUFSLEtBQUssRUFBRTs7OERBQXdCO0FBQ3ZCO0lBQVIsS0FBSyxFQUFFOzswREFBcUI7QUFDcEI7SUFBUixLQUFLLEVBQUU7O3FEQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7O3lEQUE0QjtBQUMzQjtJQUFSLEtBQUssRUFBRTs7MERBQW9CO0FBQ25CO0lBQVIsS0FBSyxFQUFFOztvREFBYztBQVBYLHNCQUFzQjtJQWZsQyxTQUFTLENBQUM7UUFDVixRQUFRLEVBQUUseUJBQXlCO1FBQ2xDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7R0FXVDtLQUNGLENBQUM7R0FDVyxzQkFBc0IsQ0FRbEM7U0FSWSxzQkFBc0I7QUFlbkMsSUFBYSxzQkFBc0IsOEJBQW5DLE1BQWEsc0JBQXNCO0lBa0NqQyxZQUFzQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBM0JuQyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUc1QixVQUFLLEdBQUc7WUFFbEIsSUFBSSxFQUFFO2dCQUNKLFFBQVEsRUFBRSxFQUFDLFlBQVksRUFBQyxpQkFBaUIsRUFBQyxVQUFVLEVBQUMsdUJBQXVCLEVBQUMsWUFBWSxFQUFDLEVBQUMsTUFBTSxFQUFDLEtBQUss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QXRCLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtcbiAgTmdNb2R1bGUsXG4gIENvbXBvbmVudCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgQWZ0ZXJWaWV3SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgZ2V0QXR0cmlidXRlcyB9IGZyb20gXCJAY2FyYm9uL2ljb24taGVscGVyc1wiO1xuXG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0taWNvbi1jb2RlLXJlZmVyZW5jZVwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzdmdcbiAgICAgIGlibUljb25Db2RlUmVmZXJlbmNlXG4gICAgICBbc2l6ZV09XCJzaXplXCJcbiAgICAgIFthcmlhTGFiZWxdPVwiYXJpYUxhYmVsXCJcbiAgICAgIFthcmlhTGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiXG4gICAgICBbYXJpYUhpZGRlbl09XCJhcmlhSGlkZGVuXCJcbiAgICAgIFt0aXRsZV09XCJ0aXRsZVwiXG4gICAgICBbaXNGb2N1c2FibGVdPVwiZm9jdXNhYmxlXCJcbiAgICAgIFthdHRyLmNsYXNzXT1cImlubmVyQ2xhc3NcIj5cbiAgICA8L3N2Zz5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBDb2RlUmVmZXJlbmNlQ29tcG9uZW50IHtcbiAgQElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFIaWRkZW46IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZvY3VzYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBpbm5lckNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNpemU6IHN0cmluZztcbn1cblxuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogXCJbaWJtSWNvbkNvZGVSZWZlcmVuY2VdXCJcbn0pXG5leHBvcnQgY2xhc3MgQ29kZVJlZmVyZW5jZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBzdGF0aWMgdGl0bGVJZENvdW50ZXIgPSAwO1xuXG4gIEBJbnB1dCgpIGFyaWFMYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBhcmlhTGFiZWxsZWRieTogc3RyaW5nO1xuICBASW5wdXQoKSBhcmlhSGlkZGVuOiBib29sZWFuO1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBpc0ZvY3VzYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBzaXplOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGljb25zID0ge1xuICAgIFxuICBcIjMyXCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiQ29kZVJlZmVyZW5jZTMyXCIsXCJmaWxlcGF0aFwiOlwiY29kZS0tcmVmZXJlbmNlLzMyLmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MzIsXCJoZWlnaHRcIjozMn0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTQgMjBMNCAyMiA4LjU4NiAyMiAyIDI4LjU4NiAzLjQxNCAzMCAxMCAyMy40MTQgMTAgMjggMTIgMjggMTIgMjAgNCAyMHpNMzAgMTBMMjQgNCAyMi41ODYgNS40MTQgMjcuMTcyIDEwIDIyLjU4NiAxNC41ODYgMjQgMTYgMzAgMTB6XCJ9fSx7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk04Ljk0NCA5LjAwMUgyNC45NzQwMDAwMDAwMDAwMDRWMTEuMDAxSDguOTQ0elwiLFwidHJhbnNmb3JtXCI6XCJyb3RhdGUoLTc0Ljk5NSAxNi45NiAxMClcIn19LHtcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTQgMTBMMTAgNCAxMS40MTQgNS40MTQgNi44MjggMTAgMTEuNDE0IDE0LjU4NiAxMCAxNiA0IDEwelwifX1dLFwibmFtZVwiOlwiY29kZS0tcmVmZXJlbmNlXCIsXCJzaXplXCI6MzJ9LFwic2l6ZVwiOjMyfSxcbiAgICBzdmc6IGA8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHdpZHRoPVwiMzJcIiBoZWlnaHQ9XCIzMlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48cGF0aCBkPVwiTTQgMjBMNCAyMiA4LjU4NiAyMiAyIDI4LjU4NiAzLjQxNCAzMCAxMCAyMy40MTQgMTAgMjggMTIgMjggMTIgMjAgNCAyMHpNMzAgMTBMMjQgNCAyMi41ODYgNS40MTQgMjcuMTcyIDEwIDIyLjU4NiAxNC41ODYgMjQgMTYgMzAgMTB6XCI+PC9wYXRoPjxwYXRoIGQ9XCJNOC45NDQgOS4wMDFIMjQuOTc0MDAwMDAwMDAwMDA0VjExLjAwMUg4Ljk0NHpcIiB0cmFuc2Zvcm09XCJyb3RhdGUoLTc0Ljk5NSAxNi45NiAxMClcIj48L3BhdGg+PHBhdGggZD1cIk00IDEwTDEwIDQgMTEuNDE0IDUuNDE0IDYuODI4IDEwIDExLjQxNCAxNC41ODYgMTAgMTYgNCAxMHpcIj48L3BhdGg+PC9zdmc+YFxuICB9LFxuXG4gIFwiMjRcIjoge1xuICAgIG1ldGFkYXRhOiB7XCJtb2R1bGVOYW1lXCI6XCJDb2RlUmVmZXJlbmNlMjRcIixcImZpbGVwYXRoXCI6XCJjb2RlLS1yZWZlcmVuY2UvMjQuanNcIixcImRlc2NyaXB0b3JcIjp7XCJlbGVtXCI6XCJzdmdcIixcImF0dHJzXCI6e1wieG1sbnNcIjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJ2aWV3Qm94XCI6XCIwIDAgMzIgMzJcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwiLFwid2lkdGhcIjoyNCxcImhlaWdodFwiOjI0fSxcImNvbnRlbnRcIjpbe1wiZWxlbVwiOlwicGF0aFwiLFwiYXR0cnNcIjp7XCJkXCI6XCJNNCAyMEw0IDIyIDguNTg2IDIyIDIgMjguNTg2IDMuNDE0IDMwIDEwIDIzLjQxNCAxMCAyOCAxMiAyOCAxMiAyMCA0IDIwek0zMCAxMEwyNCA0IDIyLjU4NiA1LjQxNCAyNy4xNzIgMTAgMjIuNTg2IDE0LjU4NiAyNCAxNiAzMCAxMHpcIn19LHtcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTguOTQ0IDkuMDAxSDI0Ljk3NDAwMDAwMDAwMDAwNFYxMS4wMDFIOC45NDR6XCIsXCJ0cmFuc2Zvcm1cIjpcInJvdGF0ZSgtNzQuOTk1IDE2Ljk2IDEwKVwifX0se1wiZWxlbVwiOlwicGF0aFwiLFwiYXR0cnNcIjp7XCJkXCI6XCJNNCAxMEwxMCA0IDExLjQxNCA1LjQxNCA2LjgyOCAxMCAxMS40MTQgMTQuNTg2IDEwIDE2IDQgMTB6XCJ9fV0sXCJuYW1lXCI6XCJjb2RlLS1yZWZlcmVuY2VcIixcInNpemVcIjoyNH0sXCJzaXplXCI6MjR9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNNCAyMEw0IDIyIDguNTg2IDIyIDIgMjguNTg2IDMuNDE0IDMwIDEwIDIzLjQxNCAxMCAyOCAxMiAyOCAxMiAyMCA0IDIwek0zMCAxMEwyNCA0IDIyLjU4NiA1LjQxNCAyNy4xNzIgMTAgMjIuNTg2IDE0LjU4NiAyNCAxNiAzMCAxMHpcIj48L3BhdGg+PHBhdGggZD1cIk04Ljk0NCA5LjAwMUgyNC45NzQwMDAwMDAwMDAwMDRWMTEuMDAxSDguOTQ0elwiIHRyYW5zZm9ybT1cInJvdGF0ZSgtNzQuOTk1IDE2Ljk2IDEwKVwiPjwvcGF0aD48cGF0aCBkPVwiTTQgMTBMMTAgNCAxMS40MTQgNS40MTQgNi44MjggMTAgMTEuNDE0IDE0LjU4NiAxMCAxNiA0IDEwelwiPjwvcGF0aD48L3N2Zz5gXG4gIH0sXG5cbiAgXCIyMFwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIkNvZGVSZWZlcmVuY2UyMFwiLFwiZmlsZXBhdGhcIjpcImNvZGUtLXJlZmVyZW5jZS8yMC5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjIwLFwiaGVpZ2h0XCI6MjB9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk00IDIwTDQgMjIgOC41ODYgMjIgMiAyOC41ODYgMy40MTQgMzAgMTAgMjMuNDE0IDEwIDI4IDEyIDI4IDEyIDIwIDQgMjB6TTMwIDEwTDI0IDQgMjIuNTg2IDUuNDE0IDI3LjE3MiAxMCAyMi41ODYgMTQuNTg2IDI0IDE2IDMwIDEwelwifX0se1wiZWxlbVwiOlwicGF0aFwiLFwiYXR0cnNcIjp7XCJkXCI6XCJNOC45NDQgOS4wMDFIMjQuOTc0MDAwMDAwMDAwMDA0VjExLjAwMUg4Ljk0NHpcIixcInRyYW5zZm9ybVwiOlwicm90YXRlKC03NC45OTUgMTYuOTYgMTApXCJ9fSx7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk00IDEwTDEwIDQgMTEuNDE0IDUuNDE0IDYuODI4IDEwIDExLjQxNCAxNC41ODYgMTAgMTYgNCAxMHpcIn19XSxcIm5hbWVcIjpcImNvZGUtLXJlZmVyZW5jZVwiLFwic2l6ZVwiOjIwfSxcInNpemVcIjoyMH0sXG4gICAgc3ZnOiBgPHN2ZyBmb2N1c2FibGU9XCJmYWxzZVwiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBtZWV0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMjBcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PHBhdGggZD1cIk00IDIwTDQgMjIgOC41ODYgMjIgMiAyOC41ODYgMy40MTQgMzAgMTAgMjMuNDE0IDEwIDI4IDEyIDI4IDEyIDIwIDQgMjB6TTMwIDEwTDI0IDQgMjIuNTg2IDUuNDE0IDI3LjE3MiAxMCAyMi41ODYgMTQuNTg2IDI0IDE2IDMwIDEwelwiPjwvcGF0aD48cGF0aCBkPVwiTTguOTQ0IDkuMDAxSDI0Ljk3NDAwMDAwMDAwMDAwNFYxMS4wMDFIOC45NDR6XCIgdHJhbnNmb3JtPVwicm90YXRlKC03NC45OTUgMTYuOTYgMTApXCI+PC9wYXRoPjxwYXRoIGQ9XCJNNCAxMEwxMCA0IDExLjQxNCA1LjQxNCA2LjgyOCAxMCAxMS40MTQgMTQuNTg2IDEwIDE2IDQgMTB6XCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICBcIjE2XCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiQ29kZVJlZmVyZW5jZTE2XCIsXCJmaWxlcGF0aFwiOlwiY29kZS0tcmVmZXJlbmNlLzE2LmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MTYsXCJoZWlnaHRcIjoxNn0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTQgMjBMNCAyMiA4LjU4NiAyMiAyIDI4LjU4NiAzLjQxNCAzMCAxMCAyMy40MTQgMTAgMjggMTIgMjggMTIgMjAgNCAyMHpNMzAgMTBMMjQgNCAyMi41ODYgNS40MTQgMjcuMTcyIDEwIDIyLjU4NiAxNC41ODYgMjQgMTYgMzAgMTB6XCJ9fSx7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk04Ljk0NCA5LjAwMUgyNC45NzQwMDAwMDAwMDAwMDRWMTEuMDAxSDguOTQ0elwiLFwidHJhbnNmb3JtXCI6XCJyb3RhdGUoLTc0Ljk5NSAxNi45NiAxMClcIn19LHtcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTQgMTBMMTAgNCAxMS40MTQgNS40MTQgNi44MjggMTAgMTEuNDE0IDE0LjU4NiAxMCAxNiA0IDEwelwifX1dLFwibmFtZVwiOlwiY29kZS0tcmVmZXJlbmNlXCIsXCJzaXplXCI6MTZ9LFwic2l6ZVwiOjE2fSxcbiAgICBzdmc6IGA8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48cGF0aCBkPVwiTTQgMjBMNCAyMiA4LjU4NiAyMiAyIDI4LjU4NiAzLjQxNCAzMCAxMCAyMy40MTQgMTAgMjggMTIgMjggMTIgMjAgNCAyMHpNMzAgMTBMMjQgNCAyMi41ODYgNS40MTQgMjcuMTcyIDEwIDIyLjU4NiAxNC41ODYgMjQgMTYgMzAgMTB6XCI+PC9wYXRoPjxwYXRoIGQ9XCJNOC45NDQgOS4wMDFIMjQuOTc0MDAwMDAwMDAwMDA0VjExLjAwMUg4Ljk0NHpcIiB0cmFuc2Zvcm09XCJyb3RhdGUoLTc0Ljk5NSAxNi45NiAxMClcIj48L3BhdGg+PHBhdGggZD1cIk00IDEwTDEwIDQgMTEuNDE0IDUuNDE0IDYuODI4IDEwIDExLjQxNCAxNC41ODYgMTAgMTYgNCAxMHpcIj48L3BhdGg+PC9zdmc+YFxuICB9LFxuXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cblx0bmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IHN2ZyA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiLCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpO1xuXG4gICAgY29uc3QgaWNvbiA9IHRoaXMuaWNvbnNbdGhpcy5zaXplXVxuXG4gICAgY29uc3QgZG9tUGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgIGNvbnN0IHJhd1NWRyA9IGljb24uc3ZnO1xuICAgIGNvbnN0IHN2Z0VsZW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJhd1NWRywgXCJpbWFnZS9zdmcreG1sXCIpLmRvY3VtZW50RWxlbWVudDtcblxuICAgIGxldCBub2RlID0gc3ZnRWxlbWVudC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAvLyBpbXBvcnROb2RlIG1ha2VzIGEgY2xvbmUgb2YgdGhlIG5vZGVcbiAgICAgIC8vIHRoaXMgZW5zdXJlcyB3ZSBrZWVwIGxvb3Bpbmcgb3ZlciB0aGUgbm9kZXMgaW4gdGhlIHBhcnNlZCBkb2N1bWVudFxuICAgICAgc3ZnLmFwcGVuZENoaWxkKHN2Zy5vd25lckRvY3VtZW50LmltcG9ydE5vZGUobm9kZSwgdHJ1ZSkpO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGdldEF0dHJpYnV0ZXMoe1xuICAgICAgd2lkdGg6IGljb24ubWV0YWRhdGEuZGVzY3JpcHRvci5hdHRycy5oZWlnaHQsXG4gICAgICBoZWlnaHQ6IGljb24ubWV0YWRhdGEuZGVzY3JpcHRvci5hdHRycy5oZWlnaHQsXG4gICAgICB2aWV3Qm94OiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMudmlld0JveCxcbiAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IHRoaXMuYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogdGhpcy5hcmlhTGFiZWxsZWRieSxcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdGhpcy5hcmlhSGlkZGVuLFxuICAgICAgZm9jdXNhYmxlOiB0aGlzLmlzRm9jdXNhYmxlLnRvU3RyaW5nKClcbiAgICB9KTtcblxuICAgIGNvbnN0IGF0dHJLZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlcyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gYXR0cktleXNbaV07XG4gICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgIGlmIChrZXkgPT09IFwidGl0bGVcIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhdHRyaWJ1dGVzLnRpdGxlKSB7XG4gICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiKTtcbiAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gYXR0cmlidXRlcy50aXRsZTtcbiAgICAgIENvZGVSZWZlcmVuY2VEaXJlY3RpdmUudGl0bGVJZENvdW50ZXIrKztcbiAgICAgIHRpdGxlLnNldEF0dHJpYnV0ZShcImlkXCIsIGBjb2RlLXJlZmVyZW5jZS0ke0NvZGVSZWZlcmVuY2VEaXJlY3RpdmUudGl0bGVJZENvdW50ZXJ9YCk7XG4gICAgICBzdmcuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiLCBgY29kZS1yZWZlcmVuY2UtJHtDb2RlUmVmZXJlbmNlRGlyZWN0aXZlLnRpdGxlSWRDb3VudGVyfWApO1xuICAgIH1cblx0fVxufVxuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFxuICBDb2RlUmVmZXJlbmNlQ29tcG9uZW50LFxuICBDb2RlUmVmZXJlbmNlRGlyZWN0aXZlLFxuXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBcbiAgQ29kZVJlZmVyZW5jZUNvbXBvbmVudCxcbiAgQ29kZVJlZmVyZW5jZURpcmVjdGl2ZSxcblxuICBdXG59KVxuZXhwb3J0IGNsYXNzIENvZGVSZWZlcmVuY2VNb2R1bGUge31cbiJdfQ==