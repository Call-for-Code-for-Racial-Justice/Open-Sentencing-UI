var NumberSmall_3Directive_1;
import { __decorate, __metadata } from "tslib";
import { NgModule, Component, Directive, ElementRef, Input, AfterViewInit } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
let NumberSmall_3Component = class NumberSmall_3Component {
    constructor() {
        this.focusable = false;
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Component.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Component.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NumberSmall_3Component.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Component.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NumberSmall_3Component.prototype, "focusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Component.prototype, "innerClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Component.prototype, "size", void 0);
NumberSmall_3Component = __decorate([
    Component({
        selector: "ibm-icon-number-small-3",
        template: `
    <svg
      ibmIconNumberSmall_3
      [size]="size"
      [ariaLabel]="ariaLabel"
      [ariaLabelledby]="ariaLabelledby"
      [ariaHidden]="ariaHidden"
      [title]="title"
      [isFocusable]="focusable"
      [attr.class]="innerClass">
    </svg>
  `
    })
], NumberSmall_3Component);
export { NumberSmall_3Component };
let NumberSmall_3Directive = NumberSmall_3Directive_1 = class NumberSmall_3Directive {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "NumberSmall_332", "filepath": "number--small--3/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z" } }], "name": "number--small--3", "size": 32 }, "size": 32 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><path d="M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z"></path></svg>`
            },
            "24": {
                metadata: { "moduleName": "NumberSmall_324", "filepath": "number--small--3/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z" } }], "name": "number--small--3", "size": 24 }, "size": 24 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 32 32" aria-hidden="true"><path d="M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z"></path></svg>`
            },
            "20": {
                metadata: { "moduleName": "NumberSmall_320", "filepath": "number--small--3/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z" } }], "name": "number--small--3", "size": 20 }, "size": 20 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20" viewBox="0 0 32 32" aria-hidden="true"><path d="M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z"></path></svg>`
            },
            "16": {
                metadata: { "moduleName": "NumberSmall_316", "filepath": "number--small--3/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z" } }], "name": "number--small--3", "size": 16 }, "size": 16 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16" height="16" viewBox="0 0 32 32" aria-hidden="true"><path d="M17,11H13v2h4v2H14v2h3v2H13v2h4a2,2,0,0,0,2-2V13A2,2,0,0,0,17,11Z"></path></svg>`
            },
        };
    }
    ngAfterViewInit() {
        const svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        const icon = this.icons[this.size];
        const domParser = new DOMParser();
        const rawSVG = icon.svg;
        const svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        let node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        const attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        const attrKeys = Object.keys(attributes);
        for (let i = 0; i < attrKeys.length; i++) {
            const key = attrKeys[i];
            const value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            const title = document.createElement("title");
            title.textContent = attributes.title;
            NumberSmall_3Directive_1.titleIdCounter++;
            title.setAttribute("id", `number-small-3-${NumberSmall_3Directive_1.titleIdCounter}`);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", `number-small-3-${NumberSmall_3Directive_1.titleIdCounter}`);
        }
    }
};
NumberSmall_3Directive.titleIdCounter = 0;
NumberSmall_3Directive.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Directive.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Directive.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NumberSmall_3Directive.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Directive.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NumberSmall_3Directive.prototype, "isFocusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NumberSmall_3Directive.prototype, "size", void 0);
NumberSmall_3Directive = NumberSmall_3Directive_1 = __decorate([
    Directive({
        selector: "[ibmIconNumberSmall_3]"
    }),
    __metadata("design:paramtypes", [ElementRef])
], NumberSmall_3Directive);
export { NumberSmall_3Directive };
let NumberSmall_3Module = class NumberSmall_3Module {
};
NumberSmall_3Module = __decorate([
    NgModule({
        declarations: [
            NumberSmall_3Component,
            NumberSmall_3Directive,
        ],
        exports: [
            NumberSmall_3Component,
            NumberSmall_3Directive,
        ]
    })
], NumberSmall_3Module);
export { NumberSmall_3Module };
//# sourceMappingURL=data:application/json;base64,