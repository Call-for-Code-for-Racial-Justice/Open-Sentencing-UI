var ForkDirective_1;
import { __decorate, __metadata } from "tslib";
import { NgModule, Component, Directive, ElementRef, Input, AfterViewInit } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
let ForkComponent = class ForkComponent {
    constructor() {
        this.focusable = false;
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkComponent.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkComponent.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ForkComponent.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ForkComponent.prototype, "focusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkComponent.prototype, "innerClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkComponent.prototype, "size", void 0);
ForkComponent = __decorate([
    Component({
        selector: "ibm-icon-fork",
        template: `
    <svg
      ibmIconFork
      [size]="size"
      [ariaLabel]="ariaLabel"
      [ariaLabelledby]="ariaLabelledby"
      [ariaHidden]="ariaHidden"
      [title]="title"
      [isFocusable]="focusable"
      [attr.class]="innerClass">
    </svg>
  `
    })
], ForkComponent);
export { ForkComponent };
let ForkDirective = ForkDirective_1 = class ForkDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "Fork32", "filepath": "fork/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z" } }], "name": "fork", "size": 32 }, "size": 32 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true"><path d="M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z"></path></svg>`
            },
            "24": {
                metadata: { "moduleName": "Fork24", "filepath": "fork/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z" } }], "name": "fork", "size": 24 }, "size": 24 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="24" height="24" viewBox="0 0 32 32" aria-hidden="true"><path d="M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z"></path></svg>`
            },
            "20": {
                metadata: { "moduleName": "Fork20", "filepath": "fork/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z" } }], "name": "fork", "size": 20 }, "size": 20 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="20" height="20" viewBox="0 0 32 32" aria-hidden="true"><path d="M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z"></path></svg>`
            },
            "16": {
                metadata: { "moduleName": "Fork16", "filepath": "fork/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z" } }], "name": "fork", "size": 16 }, "size": 16 },
                svg: `<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" width="16" height="16" viewBox="0 0 32 32" aria-hidden="true"><path d="M26,18a3.9962,3.9962,0,0,0-3.8579,3H17V11h5.1421a4,4,0,1,0,0-2H17a2.002,2.002,0,0,0-2,2v4H9.8579a4,4,0,1,0,0,2H15v4a2.002,2.002,0,0,0,2,2h5.1421A3.9934,3.9934,0,1,0,26,18ZM26,8a2,2,0,1,1-2,2A2.002,2.002,0,0,1,26,8ZM6,18a2,2,0,1,1,2-2A2.002,2.002,0,0,1,6,18Zm20,6a2,2,0,1,1,2-2A2.002,2.002,0,0,1,26,24Z"></path></svg>`
            },
        };
    }
    ngAfterViewInit() {
        const svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        const icon = this.icons[this.size];
        const domParser = new DOMParser();
        const rawSVG = icon.svg;
        const svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        let node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        const attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        const attrKeys = Object.keys(attributes);
        for (let i = 0; i < attrKeys.length; i++) {
            const key = attrKeys[i];
            const value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            const title = document.createElement("title");
            title.textContent = attributes.title;
            ForkDirective_1.titleIdCounter++;
            title.setAttribute("id", `fork-${ForkDirective_1.titleIdCounter}`);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", `fork-${ForkDirective_1.titleIdCounter}`);
        }
    }
};
ForkDirective.titleIdCounter = 0;
ForkDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkDirective.prototype, "ariaLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkDirective.prototype, "ariaLabelledby", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ForkDirective.prototype, "ariaHidden", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkDirective.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], ForkDirective.prototype, "isFocusable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ForkDirective.prototype, "size", void 0);
ForkDirective = ForkDirective_1 = __decorate([
    Directive({
        selector: "[ibmIconFork]"
    }),
    __metadata("design:paramtypes", [ElementRef])
], ForkDirective);
export { ForkDirective };
let ForkModule = class ForkModule {
};
ForkModule = __decorate([
    NgModule({
        declarations: [
            ForkComponent,
            ForkDirective,
        ],
        exports: [
            ForkComponent,
            ForkDirective,
        ]
    })
], ForkModule);
export { ForkModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzL2ZvcmsvaWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE9BQU8sRUFDTCxRQUFRLEVBQ1IsU0FBUyxFQUNULFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFrQnJELElBQWEsYUFBYSxHQUExQixNQUFhLGFBQWE7SUFBMUI7UUFLVyxjQUFTLEdBQVksS0FBSyxDQUFDO0lBR3RDLENBQUM7Q0FBQSxDQUFBO0FBUFU7SUFBUixLQUFLLEVBQUU7O2dEQUFtQjtBQUNsQjtJQUFSLEtBQUssRUFBRTs7cURBQXdCO0FBQ3ZCO0lBQVIsS0FBSyxFQUFFOztpREFBcUI7QUFDcEI7SUFBUixLQUFLLEVBQUU7OzRDQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7O2dEQUE0QjtBQUMzQjtJQUFSLEtBQUssRUFBRTs7aURBQW9CO0FBQ25CO0lBQVIsS0FBSyxFQUFFOzsyQ0FBYztBQVBYLGFBQWE7SUFmekIsU0FBUyxDQUFDO1FBQ1YsUUFBUSxFQUFFLGVBQWU7UUFDeEIsUUFBUSxFQUFFOzs7Ozs7Ozs7OztHQVdUO0tBQ0YsQ0FBQztHQUNXLGFBQWEsQ0FRekI7U0FSWSxhQUFhO0FBZTFCLElBQWEsYUFBYSxxQkFBMUIsTUFBYSxhQUFhO0lBa0N4QixZQUFzQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBM0JuQyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUc1QixVQUFLLEdBQUc7WUFFbEIsSUFBSSxFQUFFO2dCQUNKLFFBQVEsRUFBRSxFQUFDLFlBQVksRUFBQyxRQUFRLEVBQUMsVUFBVSxFQUFDLFlBQVksRUFBQyxZQUFZLEVBQUMsRUFBQyxNQUFNLEVBQUMsS0FBSyxFQUFDLE9BQU8sRUFBQyxFQUFDLE9BQU8sRUFBQyw0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QUFHLENBQUE7QUFBYixVQUFVO0lBZHRCLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRTtZQUVkLGFBQWE7WUFDYixhQUFhO1NBRVo7UUFDRCxPQUFPLEVBQUU7WUFFVCxhQUFhO1lBQ2IsYUFBYTtTQUVaO0tBQ0YsQ0FBQztHQUNXLFVBQVUsQ0FBRztTQUFiLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7XG4gIE5nTW9kdWxlLFxuICBDb21wb25lbnQsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIEFmdGVyVmlld0luaXRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGdldEF0dHJpYnV0ZXMgfSBmcm9tIFwiQGNhcmJvbi9pY29uLWhlbHBlcnNcIjtcblxuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLWljb24tZm9ya1wiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzdmdcbiAgICAgIGlibUljb25Gb3JrXG4gICAgICBbc2l6ZV09XCJzaXplXCJcbiAgICAgIFthcmlhTGFiZWxdPVwiYXJpYUxhYmVsXCJcbiAgICAgIFthcmlhTGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiXG4gICAgICBbYXJpYUhpZGRlbl09XCJhcmlhSGlkZGVuXCJcbiAgICAgIFt0aXRsZV09XCJ0aXRsZVwiXG4gICAgICBbaXNGb2N1c2FibGVdPVwiZm9jdXNhYmxlXCJcbiAgICAgIFthdHRyLmNsYXNzXT1cImlubmVyQ2xhc3NcIj5cbiAgICA8L3N2Zz5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBGb3JrQ29tcG9uZW50IHtcbiAgQElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFIaWRkZW46IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZvY3VzYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBpbm5lckNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNpemU6IHN0cmluZztcbn1cblxuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogXCJbaWJtSWNvbkZvcmtdXCJcbn0pXG5leHBvcnQgY2xhc3MgRm9ya0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBzdGF0aWMgdGl0bGVJZENvdW50ZXIgPSAwO1xuXG4gIEBJbnB1dCgpIGFyaWFMYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBhcmlhTGFiZWxsZWRieTogc3RyaW5nO1xuICBASW5wdXQoKSBhcmlhSGlkZGVuOiBib29sZWFuO1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuICBASW5wdXQoKSBpc0ZvY3VzYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBzaXplOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGljb25zID0ge1xuICAgIFxuICBcIjMyXCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiRm9yazMyXCIsXCJmaWxlcGF0aFwiOlwiZm9yay8zMi5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjMyLFwiaGVpZ2h0XCI6MzJ9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk0yNiwxOGEzLjk5NjIsMy45OTYyLDAsMCwwLTMuODU3OSwzSDE3VjExaDUuMTQyMWE0LDQsMCwxLDAsMC0ySDE3YTIuMDAyLDIuMDAyLDAsMCwwLTIsMnY0SDkuODU3OWE0LDQsMCwxLDAsMCwySDE1djRhMi4wMDIsMi4wMDIsMCwwLDAsMiwyaDUuMTQyMUEzLjk5MzQsMy45OTM0LDAsMSwwLDI2LDE4Wk0yNiw4YTIsMiwwLDEsMS0yLDJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsOFpNNiwxOGEyLDIsMCwxLDEsMi0yQTIuMDAyLDIuMDAyLDAsMCwxLDYsMThabTIwLDZhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSwyNiwyNFpcIn19XSxcIm5hbWVcIjpcImZvcmtcIixcInNpemVcIjozMn0sXCJzaXplXCI6MzJ9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMjYsMThhMy45OTYyLDMuOTk2MiwwLDAsMC0zLjg1NzksM0gxN1YxMWg1LjE0MjFhNCw0LDAsMSwwLDAtMkgxN2EyLjAwMiwyLjAwMiwwLDAsMC0yLDJ2NEg5Ljg1NzlhNCw0LDAsMSwwLDAsMkgxNXY0YTIuMDAyLDIuMDAyLDAsMCwwLDIsMmg1LjE0MjFBMy45OTM0LDMuOTkzNCwwLDEsMCwyNiwxOFpNMjYsOGEyLDIsMCwxLDEtMiwyQTIuMDAyLDIuMDAyLDAsMCwxLDI2LDhaTTYsMThhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSw2LDE4Wm0yMCw2YTIsMiwwLDEsMSwyLTJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsMjRaXCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICBcIjI0XCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiRm9yazI0XCIsXCJmaWxlcGF0aFwiOlwiZm9yay8yNC5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjI0LFwiaGVpZ2h0XCI6MjR9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk0yNiwxOGEzLjk5NjIsMy45OTYyLDAsMCwwLTMuODU3OSwzSDE3VjExaDUuMTQyMWE0LDQsMCwxLDAsMC0ySDE3YTIuMDAyLDIuMDAyLDAsMCwwLTIsMnY0SDkuODU3OWE0LDQsMCwxLDAsMCwySDE1djRhMi4wMDIsMi4wMDIsMCwwLDAsMiwyaDUuMTQyMUEzLjk5MzQsMy45OTM0LDAsMSwwLDI2LDE4Wk0yNiw4YTIsMiwwLDEsMS0yLDJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsOFpNNiwxOGEyLDIsMCwxLDEsMi0yQTIuMDAyLDIuMDAyLDAsMCwxLDYsMThabTIwLDZhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSwyNiwyNFpcIn19XSxcIm5hbWVcIjpcImZvcmtcIixcInNpemVcIjoyNH0sXCJzaXplXCI6MjR9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMjYsMThhMy45OTYyLDMuOTk2MiwwLDAsMC0zLjg1NzksM0gxN1YxMWg1LjE0MjFhNCw0LDAsMSwwLDAtMkgxN2EyLjAwMiwyLjAwMiwwLDAsMC0yLDJ2NEg5Ljg1NzlhNCw0LDAsMSwwLDAsMkgxNXY0YTIuMDAyLDIuMDAyLDAsMCwwLDIsMmg1LjE0MjFBMy45OTM0LDMuOTkzNCwwLDEsMCwyNiwxOFpNMjYsOGEyLDIsMCwxLDEtMiwyQTIuMDAyLDIuMDAyLDAsMCwxLDI2LDhaTTYsMThhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSw2LDE4Wm0yMCw2YTIsMiwwLDEsMSwyLTJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsMjRaXCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICBcIjIwXCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiRm9yazIwXCIsXCJmaWxlcGF0aFwiOlwiZm9yay8yMC5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjIwLFwiaGVpZ2h0XCI6MjB9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk0yNiwxOGEzLjk5NjIsMy45OTYyLDAsMCwwLTMuODU3OSwzSDE3VjExaDUuMTQyMWE0LDQsMCwxLDAsMC0ySDE3YTIuMDAyLDIuMDAyLDAsMCwwLTIsMnY0SDkuODU3OWE0LDQsMCwxLDAsMCwySDE1djRhMi4wMDIsMi4wMDIsMCwwLDAsMiwyaDUuMTQyMUEzLjk5MzQsMy45OTM0LDAsMSwwLDI2LDE4Wk0yNiw4YTIsMiwwLDEsMS0yLDJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsOFpNNiwxOGEyLDIsMCwxLDEsMi0yQTIuMDAyLDIuMDAyLDAsMCwxLDYsMThabTIwLDZhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSwyNiwyNFpcIn19XSxcIm5hbWVcIjpcImZvcmtcIixcInNpemVcIjoyMH0sXCJzaXplXCI6MjB9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMjYsMThhMy45OTYyLDMuOTk2MiwwLDAsMC0zLjg1NzksM0gxN1YxMWg1LjE0MjFhNCw0LDAsMSwwLDAtMkgxN2EyLjAwMiwyLjAwMiwwLDAsMC0yLDJ2NEg5Ljg1NzlhNCw0LDAsMSwwLDAsMkgxNXY0YTIuMDAyLDIuMDAyLDAsMCwwLDIsMmg1LjE0MjFBMy45OTM0LDMuOTkzNCwwLDEsMCwyNiwxOFpNMjYsOGEyLDIsMCwxLDEtMiwyQTIuMDAyLDIuMDAyLDAsMCwxLDI2LDhaTTYsMThhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSw2LDE4Wm0yMCw2YTIsMiwwLDEsMSwyLTJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsMjRaXCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICBcIjE2XCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiRm9yazE2XCIsXCJmaWxlcGF0aFwiOlwiZm9yay8xNi5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjE2LFwiaGVpZ2h0XCI6MTZ9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk0yNiwxOGEzLjk5NjIsMy45OTYyLDAsMCwwLTMuODU3OSwzSDE3VjExaDUuMTQyMWE0LDQsMCwxLDAsMC0ySDE3YTIuMDAyLDIuMDAyLDAsMCwwLTIsMnY0SDkuODU3OWE0LDQsMCwxLDAsMCwySDE1djRhMi4wMDIsMi4wMDIsMCwwLDAsMiwyaDUuMTQyMUEzLjk5MzQsMy45OTM0LDAsMSwwLDI2LDE4Wk0yNiw4YTIsMiwwLDEsMS0yLDJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsOFpNNiwxOGEyLDIsMCwxLDEsMi0yQTIuMDAyLDIuMDAyLDAsMCwxLDYsMThabTIwLDZhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSwyNiwyNFpcIn19XSxcIm5hbWVcIjpcImZvcmtcIixcInNpemVcIjoxNn0sXCJzaXplXCI6MTZ9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMjYsMThhMy45OTYyLDMuOTk2MiwwLDAsMC0zLjg1NzksM0gxN1YxMWg1LjE0MjFhNCw0LDAsMSwwLDAtMkgxN2EyLjAwMiwyLjAwMiwwLDAsMC0yLDJ2NEg5Ljg1NzlhNCw0LDAsMSwwLDAsMkgxNXY0YTIuMDAyLDIuMDAyLDAsMCwwLDIsMmg1LjE0MjFBMy45OTM0LDMuOTkzNCwwLDEsMCwyNiwxOFpNMjYsOGEyLDIsMCwxLDEtMiwyQTIuMDAyLDIuMDAyLDAsMCwxLDI2LDhaTTYsMThhMiwyLDAsMSwxLDItMkEyLjAwMiwyLjAwMiwwLDAsMSw2LDE4Wm0yMCw2YTIsMiwwLDEsMSwyLTJBMi4wMDIsMi4wMDIsMCwwLDEsMjYsMjRaXCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBjb25zdCBzdmcgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBzdmcuc2V0QXR0cmlidXRlKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgIGNvbnN0IGljb24gPSB0aGlzLmljb25zW3RoaXMuc2l6ZV1cblxuICAgIGNvbnN0IGRvbVBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICBjb25zdCByYXdTVkcgPSBpY29uLnN2ZztcbiAgICBjb25zdCBzdmdFbGVtZW50ID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyYXdTVkcsIFwiaW1hZ2Uvc3ZnK3htbFwiKS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICBsZXQgbm9kZSA9IHN2Z0VsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgLy8gaW1wb3J0Tm9kZSBtYWtlcyBhIGNsb25lIG9mIHRoZSBub2RlXG4gICAgICAvLyB0aGlzIGVuc3VyZXMgd2Uga2VlcCBsb29waW5nIG92ZXIgdGhlIG5vZGVzIGluIHRoZSBwYXJzZWQgZG9jdW1lbnRcbiAgICAgIHN2Zy5hcHBlbmRDaGlsZChzdmcub3duZXJEb2N1bWVudC5pbXBvcnROb2RlKG5vZGUsIHRydWUpKTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIH1cblxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZXRBdHRyaWJ1dGVzKHtcbiAgICAgIHdpZHRoOiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgaGVpZ2h0OiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgdmlld0JveDogaWNvbi5tZXRhZGF0YS5kZXNjcmlwdG9yLmF0dHJzLnZpZXdCb3gsXG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmFyaWFMYWJlbCxcbiAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRoaXMuYXJpYUxhYmVsbGVkYnksXG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRoaXMuYXJpYUhpZGRlbixcbiAgICAgIGZvY3VzYWJsZTogdGhpcy5pc0ZvY3VzYWJsZS50b1N0cmluZygpXG4gICAgfSk7XG5cbiAgICBjb25zdCBhdHRyS2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGF0dHJLZXlzW2ldO1xuICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICBpZiAoa2V5ID09PSBcInRpdGxlXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlcy50aXRsZSkge1xuICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIik7XG4gICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGF0dHJpYnV0ZXMudGl0bGU7XG4gICAgICBGb3JrRGlyZWN0aXZlLnRpdGxlSWRDb3VudGVyKys7XG4gICAgICB0aXRsZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBgZm9yay0ke0ZvcmtEaXJlY3RpdmUudGl0bGVJZENvdW50ZXJ9YCk7XG4gICAgICBzdmcuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxsZWRieVwiLCBgZm9yay0ke0ZvcmtEaXJlY3RpdmUudGl0bGVJZENvdW50ZXJ9YCk7XG4gICAgfVxuXHR9XG59XG5cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgXG4gIEZvcmtDb21wb25lbnQsXG4gIEZvcmtEaXJlY3RpdmUsXG5cbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFxuICBGb3JrQ29tcG9uZW50LFxuICBGb3JrRGlyZWN0aXZlLFxuXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRm9ya01vZHVsZSB7fVxuIl19