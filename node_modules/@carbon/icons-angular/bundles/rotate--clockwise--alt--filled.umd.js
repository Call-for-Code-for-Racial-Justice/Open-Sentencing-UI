(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('@carbon/icon-helpers')) :
    typeof define === 'function' && define.amd ? define(['exports', 'tslib', '@angular/core', '@carbon/icon-helpers'], factory) :
    (global = global || self, factory((global.CarbonIconsAngular = global.CarbonIconsAngular || {}, global.CarbonIconsAngular.RotateClockwiseAltFilled = {}), global.tslib, global.ng.core, global.CarbonIconHelpers));
}(this, (function (exports, tslib, core, iconHelpers) { 'use strict';

    var RotateClockwiseAltFilledComponent = /** @class */ (function () {
        function RotateClockwiseAltFilledComponent() {
            this.focusable = false;
        }
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledComponent.prototype, "ariaLabel", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledComponent.prototype, "ariaLabelledby", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", Boolean)
        ], RotateClockwiseAltFilledComponent.prototype, "ariaHidden", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledComponent.prototype, "title", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", Boolean)
        ], RotateClockwiseAltFilledComponent.prototype, "focusable", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledComponent.prototype, "innerClass", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledComponent.prototype, "size", void 0);
        RotateClockwiseAltFilledComponent = tslib.__decorate([
            core.Component({
                selector: "ibm-icon-rotate-clockwise-alt-filled",
                template: "\n    <svg\n      ibmIconRotateClockwiseAltFilled\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
            })
        ], RotateClockwiseAltFilledComponent);
        return RotateClockwiseAltFilledComponent;
    }());
    var RotateClockwiseAltFilledDirective = /** @class */ (function () {
        function RotateClockwiseAltFilledDirective(elementRef) {
            this.elementRef = elementRef;
            this.isFocusable = false;
            this.icons = {
                "32": {
                    metadata: { "moduleName": "RotateClockwiseAltFilled32", "filepath": "rotate--clockwise--alt--filled/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z" } }], "name": "rotate--clockwise--alt--filled", "size": 32 }, "size": 32 },
                    svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z\"></path></svg>"
                },
                "24": {
                    metadata: { "moduleName": "RotateClockwiseAltFilled24", "filepath": "rotate--clockwise--alt--filled/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z" } }], "name": "rotate--clockwise--alt--filled", "size": 24 }, "size": 24 },
                    svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z\"></path></svg>"
                },
                "20": {
                    metadata: { "moduleName": "RotateClockwiseAltFilled20", "filepath": "rotate--clockwise--alt--filled/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z" } }], "name": "rotate--clockwise--alt--filled", "size": 20 }, "size": 20 },
                    svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z\"></path></svg>"
                },
                "16": {
                    metadata: { "moduleName": "RotateClockwiseAltFilled16", "filepath": "rotate--clockwise--alt--filled/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z" } }], "name": "rotate--clockwise--alt--filled", "size": 16 }, "size": 16 },
                    svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M16 30H4a2.0023 2.0023 0 01-2-2V16a2.0023 2.0023 0 012-2H16a2.0023 2.0023 0 012 2V28A2.0023 2.0023 0 0116 30zM30 15l-1.41-1.41L26 16.17V11a7.0078 7.0078 0 00-7-7H14V6h5a5.0057 5.0057 0 015 5v5.17l-2.59-2.58L20 15l5 5z\"></path></svg>"
                },
            };
        }
        RotateClockwiseAltFilledDirective_1 = RotateClockwiseAltFilledDirective;
        RotateClockwiseAltFilledDirective.prototype.ngAfterViewInit = function () {
            var svg = this.elementRef.nativeElement;
            svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            var icon = this.icons[this.size];
            var domParser = new DOMParser();
            var rawSVG = icon.svg;
            var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
            var node = svgElement.firstChild;
            while (node) {
                // importNode makes a clone of the node
                // this ensures we keep looping over the nodes in the parsed document
                svg.appendChild(svg.ownerDocument.importNode(node, true));
                node = node.nextSibling;
            }
            var attributes = iconHelpers.getAttributes({
                width: icon.metadata.descriptor.attrs.height,
                height: icon.metadata.descriptor.attrs.height,
                viewBox: icon.metadata.descriptor.attrs.viewBox,
                title: this.title,
                "aria-label": this.ariaLabel,
                "aria-labelledby": this.ariaLabelledby,
                "aria-hidden": this.ariaHidden,
                focusable: this.isFocusable.toString()
            });
            var attrKeys = Object.keys(attributes);
            for (var i = 0; i < attrKeys.length; i++) {
                var key = attrKeys[i];
                var value = attributes[key];
                if (key === "title") {
                    continue;
                }
                if (value) {
                    svg.setAttribute(key, value);
                }
            }
            if (attributes.title) {
                var title = document.createElement("title");
                title.textContent = attributes.title;
                RotateClockwiseAltFilledDirective_1.titleIdCounter++;
                title.setAttribute("id", "rotate-clockwise-alt-filled-" + RotateClockwiseAltFilledDirective_1.titleIdCounter);
                svg.appendChild(title);
                svg.setAttribute("aria-labelledby", "rotate-clockwise-alt-filled-" + RotateClockwiseAltFilledDirective_1.titleIdCounter);
            }
        };
        var RotateClockwiseAltFilledDirective_1;
        RotateClockwiseAltFilledDirective.titleIdCounter = 0;
        RotateClockwiseAltFilledDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledDirective.prototype, "ariaLabel", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledDirective.prototype, "ariaLabelledby", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", Boolean)
        ], RotateClockwiseAltFilledDirective.prototype, "ariaHidden", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledDirective.prototype, "title", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", Boolean)
        ], RotateClockwiseAltFilledDirective.prototype, "isFocusable", void 0);
        tslib.__decorate([
            core.Input(),
            tslib.__metadata("design:type", String)
        ], RotateClockwiseAltFilledDirective.prototype, "size", void 0);
        RotateClockwiseAltFilledDirective = RotateClockwiseAltFilledDirective_1 = tslib.__decorate([
            core.Directive({
                selector: "[ibmIconRotateClockwiseAltFilled]"
            }),
            tslib.__metadata("design:paramtypes", [core.ElementRef])
        ], RotateClockwiseAltFilledDirective);
        return RotateClockwiseAltFilledDirective;
    }());
    var RotateClockwiseAltFilledModule = /** @class */ (function () {
        function RotateClockwiseAltFilledModule() {
        }
        RotateClockwiseAltFilledModule = tslib.__decorate([
            core.NgModule({
                declarations: [
                    RotateClockwiseAltFilledComponent,
                    RotateClockwiseAltFilledDirective,
                ],
                exports: [
                    RotateClockwiseAltFilledComponent,
                    RotateClockwiseAltFilledDirective,
                ]
            })
        ], RotateClockwiseAltFilledModule);
        return RotateClockwiseAltFilledModule;
    }());

    exports.RotateClockwiseAltFilledComponent = RotateClockwiseAltFilledComponent;
    exports.RotateClockwiseAltFilledDirective = RotateClockwiseAltFilledDirective;
    exports.RotateClockwiseAltFilledModule = RotateClockwiseAltFilledModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
