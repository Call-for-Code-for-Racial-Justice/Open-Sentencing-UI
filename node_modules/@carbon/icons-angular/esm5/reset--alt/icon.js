import { __decorate, __metadata } from "tslib";
import { NgModule, Component, Directive, ElementRef, Input, AfterViewInit } from "@angular/core";
import { getAttributes } from "@carbon/icon-helpers";
var ResetAltComponent = /** @class */ (function () {
    function ResetAltComponent() {
        this.focusable = false;
    }
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltComponent.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltComponent.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ResetAltComponent.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltComponent.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ResetAltComponent.prototype, "focusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltComponent.prototype, "innerClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltComponent.prototype, "size", void 0);
    ResetAltComponent = __decorate([
        Component({
            selector: "ibm-icon-reset-alt",
            template: "\n    <svg\n      ibmIconResetAlt\n      [size]=\"size\"\n      [ariaLabel]=\"ariaLabel\"\n      [ariaLabelledby]=\"ariaLabelledby\"\n      [ariaHidden]=\"ariaHidden\"\n      [title]=\"title\"\n      [isFocusable]=\"focusable\"\n      [attr.class]=\"innerClass\">\n    </svg>\n  "
        })
    ], ResetAltComponent);
    return ResetAltComponent;
}());
export { ResetAltComponent };
var ResetAltDirective = /** @class */ (function () {
    function ResetAltDirective(elementRef) {
        this.elementRef = elementRef;
        this.isFocusable = false;
        this.icons = {
            "32": {
                metadata: { "moduleName": "ResetAlt32", "filepath": "reset--alt/32.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 32, "height": 32 }, "content": [{ "elem": "path", "attrs": { "d": "M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z" } }], "name": "reset--alt", "size": 32 }, "size": 32 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z\"></path></svg>"
            },
            "24": {
                metadata: { "moduleName": "ResetAlt24", "filepath": "reset--alt/24.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 24, "height": 24 }, "content": [{ "elem": "path", "attrs": { "d": "M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z" } }], "name": "reset--alt", "size": 24 }, "size": 24 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"24\" height=\"24\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z\"></path></svg>"
            },
            "20": {
                metadata: { "moduleName": "ResetAlt20", "filepath": "reset--alt/20.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 20, "height": 20 }, "content": [{ "elem": "path", "attrs": { "d": "M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z" } }], "name": "reset--alt", "size": 20 }, "size": 20 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"20\" height=\"20\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z\"></path></svg>"
            },
            "16": {
                metadata: { "moduleName": "ResetAlt16", "filepath": "reset--alt/16.js", "descriptor": { "elem": "svg", "attrs": { "xmlns": "http://www.w3.org/2000/svg", "viewBox": "0 0 32 32", "fill": "currentColor", "width": 16, "height": 16 }, "content": [{ "elem": "path", "attrs": { "d": "M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z" } }], "name": "reset--alt", "size": 16 }, "size": 16 },
                svg: "<svg focusable=\"false\" preserveAspectRatio=\"xMidYMid meet\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 32 32\" aria-hidden=\"true\"><path d=\"M27,8H6.83l3.58-3.59L9,3,3,9l6,6,1.41-1.41L6.83,10H27V26H7V19H5v7a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V10A2,2,0,0,0,27,8Z\"></path></svg>"
            },
        };
    }
    ResetAltDirective_1 = ResetAltDirective;
    ResetAltDirective.prototype.ngAfterViewInit = function () {
        var svg = this.elementRef.nativeElement;
        svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        var icon = this.icons[this.size];
        var domParser = new DOMParser();
        var rawSVG = icon.svg;
        var svgElement = domParser.parseFromString(rawSVG, "image/svg+xml").documentElement;
        var node = svgElement.firstChild;
        while (node) {
            // importNode makes a clone of the node
            // this ensures we keep looping over the nodes in the parsed document
            svg.appendChild(svg.ownerDocument.importNode(node, true));
            node = node.nextSibling;
        }
        var attributes = getAttributes({
            width: icon.metadata.descriptor.attrs.height,
            height: icon.metadata.descriptor.attrs.height,
            viewBox: icon.metadata.descriptor.attrs.viewBox,
            title: this.title,
            "aria-label": this.ariaLabel,
            "aria-labelledby": this.ariaLabelledby,
            "aria-hidden": this.ariaHidden,
            focusable: this.isFocusable.toString()
        });
        var attrKeys = Object.keys(attributes);
        for (var i = 0; i < attrKeys.length; i++) {
            var key = attrKeys[i];
            var value = attributes[key];
            if (key === "title") {
                continue;
            }
            if (value) {
                svg.setAttribute(key, value);
            }
        }
        if (attributes.title) {
            var title = document.createElement("title");
            title.textContent = attributes.title;
            ResetAltDirective_1.titleIdCounter++;
            title.setAttribute("id", "reset-alt-" + ResetAltDirective_1.titleIdCounter);
            svg.appendChild(title);
            svg.setAttribute("aria-labelledby", "reset-alt-" + ResetAltDirective_1.titleIdCounter);
        }
    };
    var ResetAltDirective_1;
    ResetAltDirective.titleIdCounter = 0;
    ResetAltDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltDirective.prototype, "ariaLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltDirective.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ResetAltDirective.prototype, "ariaHidden", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltDirective.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], ResetAltDirective.prototype, "isFocusable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], ResetAltDirective.prototype, "size", void 0);
    ResetAltDirective = ResetAltDirective_1 = __decorate([
        Directive({
            selector: "[ibmIconResetAlt]"
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], ResetAltDirective);
    return ResetAltDirective;
}());
export { ResetAltDirective };
var ResetAltModule = /** @class */ (function () {
    function ResetAltModule() {
    }
    ResetAltModule = __decorate([
        NgModule({
            declarations: [
                ResetAltComponent,
                ResetAltDirective,
            ],
            exports: [
                ResetAltComponent,
                ResetAltDirective,
            ]
        })
    ], ResetAltModule);
    return ResetAltModule;
}());
export { ResetAltModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzL3Jlc2V0LS1hbHQvaWNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUNMLFFBQVEsRUFDUixTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsYUFBYSxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWtCckQ7SUFBQTtRQUtXLGNBQVMsR0FBWSxLQUFLLENBQUM7SUFHdEMsQ0FBQztJQVBVO1FBQVIsS0FBSyxFQUFFOzt3REFBbUI7SUFDbEI7UUFBUixLQUFLLEVBQUU7OzZEQUF3QjtJQUN2QjtRQUFSLEtBQUssRUFBRTs7eURBQXFCO0lBQ3BCO1FBQVIsS0FBSyxFQUFFOztvREFBZTtJQUNkO1FBQVIsS0FBSyxFQUFFOzt3REFBNEI7SUFDM0I7UUFBUixLQUFLLEVBQUU7O3lEQUFvQjtJQUNuQjtRQUFSLEtBQUssRUFBRTs7bURBQWM7SUFQWCxpQkFBaUI7UUFmN0IsU0FBUyxDQUFDO1lBQ1YsUUFBUSxFQUFFLG9CQUFvQjtZQUM3QixRQUFRLEVBQUUseVJBV1Q7U0FDRixDQUFDO09BQ1csaUJBQWlCLENBUTdCO0lBQUQsd0JBQUM7Q0FBQSxBQVJELElBUUM7U0FSWSxpQkFBaUI7QUFlOUI7SUFrQ0UsMkJBQXNCLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUEzQm5DLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBRzVCLFVBQUssR0FBRztZQUVsQixJQUFJLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLEVBQUMsWUFBWSxFQUFDLFlBQVksRUFBQyxVQUFVLEVBQUMsa0JBQWtCLEVBQUMsWUFBWSxFQUFDLEVBQUMsTUFBTSxFQUFDLEtBQUssRUFBQyxPQUFPLEVBQUMsRUFBQyxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsU0FBUyxFQUFDLFdBQVcsRUFBQyxN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QixDQUFDO0lBQWpCLGNBQWM7UUFkMUIsUUFBUSxDQUFDO1lBQ1IsWUFBWSxFQUFFO2dCQUVkLGlCQUFpQjtnQkFDakIsaUJBQWlCO2FBRWhCO1lBQ0QsT0FBTyxFQUFFO2dCQUVULGlCQUFpQjtnQkFDakIsaUJBQWlCO2FBRWhCO1NBQ0YsQ0FBQztPQUNXLGNBQWMsQ0FBRztJQUFELHFCQUFDO0NBQUEsQUFBOUIsSUFBOEI7U0FBakIsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtcbiAgTmdNb2R1bGUsXG4gIENvbXBvbmVudCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgQWZ0ZXJWaWV3SW5pdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgZ2V0QXR0cmlidXRlcyB9IGZyb20gXCJAY2FyYm9uL2ljb24taGVscGVyc1wiO1xuXG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0taWNvbi1yZXNldC1hbHRcIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8c3ZnXG4gICAgICBpYm1JY29uUmVzZXRBbHRcbiAgICAgIFtzaXplXT1cInNpemVcIlxuICAgICAgW2FyaWFMYWJlbF09XCJhcmlhTGFiZWxcIlxuICAgICAgW2FyaWFMYWJlbGxlZGJ5XT1cImFyaWFMYWJlbGxlZGJ5XCJcbiAgICAgIFthcmlhSGlkZGVuXT1cImFyaWFIaWRkZW5cIlxuICAgICAgW3RpdGxlXT1cInRpdGxlXCJcbiAgICAgIFtpc0ZvY3VzYWJsZV09XCJmb2N1c2FibGVcIlxuICAgICAgW2F0dHIuY2xhc3NdPVwiaW5uZXJDbGFzc1wiPlxuICAgIDwvc3ZnPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFJlc2V0QWx0Q29tcG9uZW50IHtcbiAgQElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFIaWRkZW46IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGZvY3VzYWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBpbm5lckNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNpemU6IHN0cmluZztcbn1cblxuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogXCJbaWJtSWNvblJlc2V0QWx0XVwiXG59KVxuZXhwb3J0IGNsYXNzIFJlc2V0QWx0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIHN0YXRpYyB0aXRsZUlkQ291bnRlciA9IDA7XG5cbiAgQElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFyaWFIaWRkZW46IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGlzRm9jdXNhYmxlOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIHNpemU6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgaWNvbnMgPSB7XG4gICAgXG4gIFwiMzJcIjoge1xuICAgIG1ldGFkYXRhOiB7XCJtb2R1bGVOYW1lXCI6XCJSZXNldEFsdDMyXCIsXCJmaWxlcGF0aFwiOlwicmVzZXQtLWFsdC8zMi5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjMyLFwiaGVpZ2h0XCI6MzJ9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk0yNyw4SDYuODNsMy41OC0zLjU5TDksMywzLDlsNiw2LDEuNDEtMS40MUw2LjgzLDEwSDI3VjI2SDdWMTlINXY3YTIsMiwwLDAsMCwyLDJIMjdhMiwyLDAsMCwwLDItMlYxMEEyLDIsMCwwLDAsMjcsOFpcIn19XSxcIm5hbWVcIjpcInJlc2V0LS1hbHRcIixcInNpemVcIjozMn0sXCJzaXplXCI6MzJ9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIzMlwiIGhlaWdodD1cIjMyXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMjcsOEg2LjgzbDMuNTgtMy41OUw5LDMsMyw5bDYsNiwxLjQxLTEuNDFMNi44MywxMEgyN1YyNkg3VjE5SDV2N2EyLDIsMCwwLDAsMiwySDI3YTIsMiwwLDAsMCwyLTJWMTBBMiwyLDAsMCwwLDI3LDhaXCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICBcIjI0XCI6IHtcbiAgICBtZXRhZGF0YToge1wibW9kdWxlTmFtZVwiOlwiUmVzZXRBbHQyNFwiLFwiZmlsZXBhdGhcIjpcInJlc2V0LS1hbHQvMjQuanNcIixcImRlc2NyaXB0b3JcIjp7XCJlbGVtXCI6XCJzdmdcIixcImF0dHJzXCI6e1wieG1sbnNcIjpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJ2aWV3Qm94XCI6XCIwIDAgMzIgMzJcIixcImZpbGxcIjpcImN1cnJlbnRDb2xvclwiLFwid2lkdGhcIjoyNCxcImhlaWdodFwiOjI0fSxcImNvbnRlbnRcIjpbe1wiZWxlbVwiOlwicGF0aFwiLFwiYXR0cnNcIjp7XCJkXCI6XCJNMjcsOEg2LjgzbDMuNTgtMy41OUw5LDMsMyw5bDYsNiwxLjQxLTEuNDFMNi44MywxMEgyN1YyNkg3VjE5SDV2N2EyLDIsMCwwLDAsMiwySDI3YTIsMiwwLDAsMCwyLTJWMTBBMiwyLDAsMCwwLDI3LDhaXCJ9fV0sXCJuYW1lXCI6XCJyZXNldC0tYWx0XCIsXCJzaXplXCI6MjR9LFwic2l6ZVwiOjI0fSxcbiAgICBzdmc6IGA8c3ZnIGZvY3VzYWJsZT1cImZhbHNlXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkIG1lZXRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48cGF0aCBkPVwiTTI3LDhINi44M2wzLjU4LTMuNTlMOSwzLDMsOWw2LDYsMS40MS0xLjQxTDYuODMsMTBIMjdWMjZIN1YxOUg1djdhMiwyLDAsMCwwLDIsMkgyN2EyLDIsMCwwLDAsMi0yVjEwQTIsMiwwLDAsMCwyNyw4WlwiPjwvcGF0aD48L3N2Zz5gXG4gIH0sXG5cbiAgXCIyMFwiOiB7XG4gICAgbWV0YWRhdGE6IHtcIm1vZHVsZU5hbWVcIjpcIlJlc2V0QWx0MjBcIixcImZpbGVwYXRoXCI6XCJyZXNldC0tYWx0LzIwLmpzXCIsXCJkZXNjcmlwdG9yXCI6e1wiZWxlbVwiOlwic3ZnXCIsXCJhdHRyc1wiOntcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFwidmlld0JveFwiOlwiMCAwIDMyIDMyXCIsXCJmaWxsXCI6XCJjdXJyZW50Q29sb3JcIixcIndpZHRoXCI6MjAsXCJoZWlnaHRcIjoyMH0sXCJjb250ZW50XCI6W3tcImVsZW1cIjpcInBhdGhcIixcImF0dHJzXCI6e1wiZFwiOlwiTTI3LDhINi44M2wzLjU4LTMuNTlMOSwzLDMsOWw2LDYsMS40MS0xLjQxTDYuODMsMTBIMjdWMjZIN1YxOUg1djdhMiwyLDAsMCwwLDIsMkgyN2EyLDIsMCwwLDAsMi0yVjEwQTIsMiwwLDAsMCwyNyw4WlwifX1dLFwibmFtZVwiOlwicmVzZXQtLWFsdFwiLFwic2l6ZVwiOjIwfSxcInNpemVcIjoyMH0sXG4gICAgc3ZnOiBgPHN2ZyBmb2N1c2FibGU9XCJmYWxzZVwiIHByZXNlcnZlQXNwZWN0UmF0aW89XCJ4TWlkWU1pZCBtZWV0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMjBcIiB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PHBhdGggZD1cIk0yNyw4SDYuODNsMy41OC0zLjU5TDksMywzLDlsNiw2LDEuNDEtMS40MUw2LjgzLDEwSDI3VjI2SDdWMTlINXY3YTIsMiwwLDAsMCwyLDJIMjdhMiwyLDAsMCwwLDItMlYxMEEyLDIsMCwwLDAsMjcsOFpcIj48L3BhdGg+PC9zdmc+YFxuICB9LFxuXG4gIFwiMTZcIjoge1xuICAgIG1ldGFkYXRhOiB7XCJtb2R1bGVOYW1lXCI6XCJSZXNldEFsdDE2XCIsXCJmaWxlcGF0aFwiOlwicmVzZXQtLWFsdC8xNi5qc1wiLFwiZGVzY3JpcHRvclwiOntcImVsZW1cIjpcInN2Z1wiLFwiYXR0cnNcIjp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcInZpZXdCb3hcIjpcIjAgMCAzMiAzMlwiLFwiZmlsbFwiOlwiY3VycmVudENvbG9yXCIsXCJ3aWR0aFwiOjE2LFwiaGVpZ2h0XCI6MTZ9LFwiY29udGVudFwiOlt7XCJlbGVtXCI6XCJwYXRoXCIsXCJhdHRyc1wiOntcImRcIjpcIk0yNyw4SDYuODNsMy41OC0zLjU5TDksMywzLDlsNiw2LDEuNDEtMS40MUw2LjgzLDEwSDI3VjI2SDdWMTlINXY3YTIsMiwwLDAsMCwyLDJIMjdhMiwyLDAsMCwwLDItMlYxMEEyLDIsMCwwLDAsMjcsOFpcIn19XSxcIm5hbWVcIjpcInJlc2V0LS1hbHRcIixcInNpemVcIjoxNn0sXCJzaXplXCI6MTZ9LFxuICAgIHN2ZzogYDxzdmcgZm9jdXNhYmxlPVwiZmFsc2VcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWQgbWVldFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNMjcsOEg2LjgzbDMuNTgtMy41OUw5LDMsMyw5bDYsNiwxLjQxLTEuNDFMNi44MywxMEgyN1YyNkg3VjE5SDV2N2EyLDIsMCwwLDAsMiwySDI3YTIsMiwwLDAsMCwyLTJWMTBBMiwyLDAsMCwwLDI3LDhaXCI+PC9wYXRoPjwvc3ZnPmBcbiAgfSxcblxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBjb25zdCBzdmcgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBzdmcuc2V0QXR0cmlidXRlKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcblxuICAgIGNvbnN0IGljb24gPSB0aGlzLmljb25zW3RoaXMuc2l6ZV1cblxuICAgIGNvbnN0IGRvbVBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICBjb25zdCByYXdTVkcgPSBpY29uLnN2ZztcbiAgICBjb25zdCBzdmdFbGVtZW50ID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyYXdTVkcsIFwiaW1hZ2Uvc3ZnK3htbFwiKS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICBsZXQgbm9kZSA9IHN2Z0VsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgLy8gaW1wb3J0Tm9kZSBtYWtlcyBhIGNsb25lIG9mIHRoZSBub2RlXG4gICAgICAvLyB0aGlzIGVuc3VyZXMgd2Uga2VlcCBsb29waW5nIG92ZXIgdGhlIG5vZGVzIGluIHRoZSBwYXJzZWQgZG9jdW1lbnRcbiAgICAgIHN2Zy5hcHBlbmRDaGlsZChzdmcub3duZXJEb2N1bWVudC5pbXBvcnROb2RlKG5vZGUsIHRydWUpKTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIH1cblxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBnZXRBdHRyaWJ1dGVzKHtcbiAgICAgIHdpZHRoOiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgaGVpZ2h0OiBpY29uLm1ldGFkYXRhLmRlc2NyaXB0b3IuYXR0cnMuaGVpZ2h0LFxuICAgICAgdmlld0JveDogaWNvbi5tZXRhZGF0YS5kZXNjcmlwdG9yLmF0dHJzLnZpZXdCb3gsXG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiB0aGlzLmFyaWFMYWJlbCxcbiAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRoaXMuYXJpYUxhYmVsbGVkYnksXG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRoaXMuYXJpYUhpZGRlbixcbiAgICAgIGZvY3VzYWJsZTogdGhpcy5pc0ZvY3VzYWJsZS50b1N0cmluZygpXG4gICAgfSk7XG5cbiAgICBjb25zdCBhdHRyS2V5cyA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGF0dHJLZXlzW2ldO1xuICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICBpZiAoa2V5ID09PSBcInRpdGxlXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlcy50aXRsZSkge1xuICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIik7XG4gICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGF0dHJpYnV0ZXMudGl0bGU7XG4gICAgICBSZXNldEFsdERpcmVjdGl2ZS50aXRsZUlkQ291bnRlcisrO1xuICAgICAgdGl0bGUuc2V0QXR0cmlidXRlKFwiaWRcIiwgYHJlc2V0LWFsdC0ke1Jlc2V0QWx0RGlyZWN0aXZlLnRpdGxlSWRDb3VudGVyfWApO1xuICAgICAgc3ZnLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsbGVkYnlcIiwgYHJlc2V0LWFsdC0ke1Jlc2V0QWx0RGlyZWN0aXZlLnRpdGxlSWRDb3VudGVyfWApO1xuICAgIH1cblx0fVxufVxuXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFxuICBSZXNldEFsdENvbXBvbmVudCxcbiAgUmVzZXRBbHREaXJlY3RpdmUsXG5cbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFxuICBSZXNldEFsdENvbXBvbmVudCxcbiAgUmVzZXRBbHREaXJlY3RpdmUsXG5cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBSZXNldEFsdE1vZHVsZSB7fVxuIl19