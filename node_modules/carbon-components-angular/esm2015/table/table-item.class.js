/**
 *
 * carbon-angular v0.0.0 | table-item.class.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


export class TableItem {
    /**
     * Creates an instance of TableItem.
     */
    constructor(rawData) {
        /**
         * The number of rows to span
         */
        this.rowSpan = 1;
        /**
         * The number of columns to span
         */
        this.colSpan = 1;
        // defaults so we dont leave things empty
        const defaults = {
            data: ""
        };
        // fill our object with provided props, and fallback to defaults
        const data = Object.assign({}, defaults, rawData);
        for (const property of Object.getOwnPropertyNames(data)) {
            if (data.hasOwnProperty(property)) {
                this[property] = data[property];
            }
        }
    }
    get title() {
        if (this._title) {
            return this._title;
        }
        if (!this.data) {
            return "";
        }
        if (typeof this.data === "string") {
            return this.data;
        }
        if (this.data.toString &&
            this.data.constructor !== ({}).constructor) {
            return this.data.toString();
        }
        return JSON.stringify(this.data);
    }
    set title(title) {
        this._title = title;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaXRlbS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFibGUvIiwic291cmNlcyI6WyJ0YWJsZS1pdGVtLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sT0FBTyxTQUFTO0lBcUlyQjs7T0FFRztJQUNILFlBQVksT0FBYTtRQTFDekI7O1dBRUc7UUFDSCxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRVo7O1dBRUc7UUFDSCxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBbUNYLHlDQUF5QztRQUN6QyxNQUFNLFFBQVEsR0FBRztZQUNoQixJQUFJLEVBQUUsRUFBRTtTQUNSLENBQUM7UUFDRixnRUFBZ0U7UUFDaEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELEtBQUssTUFBTSxRQUFRLElBQUksTUFBTSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hELElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNoQztTQUNEO0lBQ0YsQ0FBQztJQTVDRCxJQUFJLEtBQUs7UUFDUixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQ25CO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZixPQUFPLEVBQUUsQ0FBQztTQUNWO1FBRUQsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztTQUNqQjtRQUVELElBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUN6QztZQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUM1QjtRQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLEtBQUs7UUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0NBb0JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0VGVtcGxhdGVSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuZXhwb3J0IGNsYXNzIFRhYmxlSXRlbSB7XG5cdC8qKlxuXHQgKiBEYXRhIGZvciB0aGUgdGFibGUgaXRlbS5cblx0ICovXG5cdGRhdGE6IGFueTtcblxuXHQvKipcblx0ICogRGF0YSBmb3IgdGhlIGV4cGFuZGVkIHBhcnQgb2YgdGhlIHJvdy5cblx0ICpcblx0ICogWW91IG9ubHkgbmVlZCB0byBzZXQgaXQgZm9yIHRoZSBmaXJzdCBpdGVtIGluIHRoZSByb3cuXG5cdCAqXG5cdCAqIFNlZSBgZXhwYW5kQXNUYWJsZWAgZG9jdW1lbnRhdGlvbiBpZiB5b3UgbmVlZCB0byB0aGUgdGFibGUgdG8gZXhwYW5kIHRvIGFkZGl0aW9uYWxcblx0ICogdGFibGUgcm93cy5cblx0ICovXG5cdGV4cGFuZGVkRGF0YTogYW55O1xuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGRpc3BsYXkgZGF0YSBpbiBhIGRlc2lyZWQgd2F5LlxuXHQgKlxuXHQgKiBJZiBub3QgcHJvdmlkZWQsIGRpc3BsYXlzIGRhdGEgYXMgYSBzaW1wbGUgc3RyaW5nLlxuXHQgKlxuXHQgKiBVc2FnZTpcblx0ICpcblx0ICogSW4gYSBjb21wb25lbnQgd2hlcmUgeW91J3JlIHVzaW5nIHRoZSB0YWJsZSBjcmVhdGUgYSB0ZW1wbGF0ZSBsaWtlOlxuXHQgKlxuXHQgKiBgYGBodG1sXG5cdCAqIDxuZy10ZW1wbGF0ZSAjY3VzdG9tSXRlbVRlbXBsYXRlIGxldC1kYXRhPVwiZGF0YVwiPlxuXHQgKiBcdDxpPjxhIFtyb3V0ZXJMaW5rXT1cImRhdGEubGlua1wiPnt7ZGF0YS5uYW1lfX08L2E+PC9pPlxuXHQgKiA8L25nLXRlbXBsYXRlPlxuXHQgKiBgYGBcblx0ICogd2hlcmUgd2UgYXNzdW1lIHlvdXIgZGF0YSBjb250YWlucyBgbGlua2AgYW5kIGBuYW1lYC4gYGxldC1kYXRhPVwiZGF0YVwiYCBpc1xuXHQgKiBuZWNlc3NhcnkgZm9yIHlvdSB0byBiZSBhYmxlIHRvIGFjY2VzcyBpdGVtJ3MgZGF0YSBpbiB0aGUgdGVtcGxhdGUuXG5cdCAqXG5cdCAqIENyZWF0ZSBgVmlld0NoaWxkYCBwcm9wZXJ0eSB3aXRoOlxuXHQgKlxuXHQgKiBgYGB0eXBlc2NyaXB0XG5cdCAqIChhdClWaWV3Q2hpbGQoXCJjdXN0b21JdGVtVGVtcGxhdGVcIilcblx0ICogcHJvdGVjdGVkIGN1c3RvbUl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pjtcblx0ICogYGBgXG5cdCAqXG5cdCAqIFNldCB0aGUgdGVtcGxhdGUgdG8gdGhlIHRhYmxlIGl0ZW0sIGZvciBleGFtcGxlOlxuXHQgKlxuXHQgKiBgYGB0eXBlc2NyaXB0XG5cdCAqIHRoaXMubW9kZWwuZGF0YSA9IFtcblx0ICogXHRbbmV3IFRhYmxlSXRlbSh7ZGF0YToge25hbWU6IFwiQ3VzdG9tIGl0ZW1cIiwgbGluazogXCIvdGFibGVcIn0sIHRlbXBsYXRlOiB0aGlzLmN1c3RvbUl0ZW1UZW1wbGF0ZX0pXVxuXHQgKiBdO1xuXHQgKiBgYGBcblx0ICovXG5cdHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cdC8qKlxuXHQgKiBUZW1wbGF0ZSBmb3IgcmVuZGVyaW5nIGBleHBhbmRlZERhdGFgXG5cdCAqXG5cdCAqIFlvdSBvbmx5IG5lZWQgdG8gc2V0IGl0IGZvciB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgcm93LlxuXHQgKlxuXHQgKi9cblx0ZXhwYW5kZWRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuXHQvKipcblx0ICogU2V0dGluZyB0aGlzIHRvIGB0cnVlYCBtYWtlcyB0YWJsZSBpbnRlcnByZXQgYGV4cGFuZGVkRGF0YWAgYXMgYWRkaXRpb25hbCByb3dzIHRvIGluc2VydCBpbiBwbGFjZVxuXHQgKiBmb3IgZXhwYW5kZWQgZGF0YS4gYGV4cGFuZGVkVGVtcGxhdGVgIGlzIHRoZW4gaWdub3JlZC5cblx0ICpcblx0ICogWW91IGNhbiBhcHBseSB0aGUgdGVtcGxhdGUgZm9yIGluZGl2aWR1YWwgY2VsbHMgYXMgdXN1YWwuXG5cdCAqXG5cdCAqIEV4YW1wbGUgbW9kZWwgZGF0YTpcblx0ICpcblx0ICogYGBgdHlwZXNjcmlwdFxuXHQgKiB0aGlzLm1vZGVsLmRhdGEgPSBbXG5cdCAqIFx0W25ldyBUYWJsZUl0ZW0oeyBkYXRhOiBcIk5hbWUgNFwiIH0pLCBuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJ0d2VyXCIgfSldLCAvLyByZWd1bGFyIHJvd1xuXHQgKiBcdFtcblx0ICogXHRcdG5ldyBUYWJsZUl0ZW0oe1xuXHQgKiBcdFx0XHRkYXRhOiBcIk5hbWUgMy4xXCIsXG5cdCAqIFx0XHRcdC8vIGBleHBhbmRlZERhdGFgIG1pbWljcyB0aGUgZm9ybWF0IG9mIHRoZSByZXN0IG9mIHRoZSB0YWJsZVxuXHQgKiBcdFx0XHRleHBhbmRlZERhdGE6IFtcblx0ICogXHRcdFx0XHRbXG5cdCAqIFx0XHRcdFx0XHRuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJNb3JlIG5hbWVzXCIsIGV4cGFuZGVkRGF0YTogXCJObyB0ZW1wbGF0ZVwiIH0pLFxuXHQgKiBcdFx0XHRcdFx0bmV3IFRhYmxlSXRlbSh7IGRhdGE6IHsgbmFtZTogXCJNb3JleVwiLCBsaW5rOiBcIiNcIiB9LCB0ZW1wbGF0ZTogdGhpcy5jdXN0b21UYWJsZUl0ZW1UZW1wbGF0ZSB9KVxuXHQgKiBcdFx0XHRcdF0sXG5cdCAqIFx0XHRcdFx0W1xuXHQgKiBcdFx0XHRcdFx0bmV3IFRhYmxlSXRlbSh7IGRhdGE6IFwiQ29yZSBuYW1lc1wiLCBleHBhbmRlZERhdGE6IFwiTm8gdGVtcGxhdGVcIiB9KSxcblx0ICogXHRcdFx0XHRcdG5ldyBUYWJsZUl0ZW0oeyBkYXRhOiB7IG5hbWU6IFwiQ29yZXlcIiwgbGluazogXCIjXCIgfSwgdGVtcGxhdGU6IHRoaXMuY3VzdG9tVGFibGVJdGVtVGVtcGxhdGUgfSlcblx0ICogXHRcdFx0XHRdXG5cdCAqIFx0XHRcdF0sXG5cdCAqIFx0XHRcdC8vIGBleHBhbmRBc1RhYmxlYCB0ZWxscyB0aGUgdGFibGUgdG8gaW50ZXJwcmV0IGBleHBhbmRlZERhdGFgIGFzIHRhYmxlIGRhdGFcblx0ICogXHRcdFx0ZXhwYW5kQXNUYWJsZTogdHJ1ZVxuXHQgKiBcdFx0fSksXG5cdCAqIFx0XHRuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJzd2VyXCIgfSlcblx0ICogXHRdLFxuXHQgKiBcdFtuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJOYW1lIDdcIiB9KSwgbmV3IFRhYmxlSXRlbSh7ZGF0YTogXCJ0d2VyXCJ9KV0gLy8gcmVndWxhciByb3dcblx0ICogXTtcblx0ICogYGBgXG5cdCAqL1xuXHRleHBhbmRBc1RhYmxlOiBmYWxzZTtcblxuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiByb3dzIHRvIHNwYW5cblx0ICovXG5cdHJvd1NwYW4gPSAxO1xuXG5cdC8qKlxuXHQgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gc3BhblxuXHQgKi9cblx0Y29sU3BhbiA9IDE7XG5cblx0Z2V0IHRpdGxlKCkge1xuXHRcdGlmICh0aGlzLl90aXRsZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3RpdGxlO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5kYXRhKSB7XG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHRoaXMuZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YTtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHR0aGlzLmRhdGEudG9TdHJpbmcgJiZcblx0XHRcdHRoaXMuZGF0YS5jb25zdHJ1Y3RvciAhPT0gKHt9KS5jb25zdHJ1Y3RvclxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpO1xuXHR9XG5cblx0c2V0IHRpdGxlKHRpdGxlKSB7XG5cdFx0dGhpcy5fdGl0bGUgPSB0aXRsZTtcblx0fVxuXG5cdHByaXZhdGUgX3RpdGxlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgVGFibGVJdGVtLlxuXHQgKi9cblx0Y29uc3RydWN0b3IocmF3RGF0YT86IGFueSkge1xuXHRcdC8vIGRlZmF1bHRzIHNvIHdlIGRvbnQgbGVhdmUgdGhpbmdzIGVtcHR5XG5cdFx0Y29uc3QgZGVmYXVsdHMgPSB7XG5cdFx0XHRkYXRhOiBcIlwiXG5cdFx0fTtcblx0XHQvLyBmaWxsIG91ciBvYmplY3Qgd2l0aCBwcm92aWRlZCBwcm9wcywgYW5kIGZhbGxiYWNrIHRvIGRlZmF1bHRzXG5cdFx0Y29uc3QgZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCByYXdEYXRhKTtcblx0XHRmb3IgKGNvbnN0IHByb3BlcnR5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRhdGEpKSB7XG5cdFx0XHRpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcblx0XHRcdFx0dGhpc1twcm9wZXJ0eV0gPSBkYXRhW3Byb3BlcnR5XTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiJdfQ==