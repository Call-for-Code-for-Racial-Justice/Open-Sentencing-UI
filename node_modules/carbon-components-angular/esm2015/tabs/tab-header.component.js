/**
 *
 * carbon-angular v0.0.0 | tab-header.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, ViewChild, ElementRef, Output } from "@angular/core";
import { Tab } from "./tab.component";
import { EventEmitter } from "@angular/core";
export class TabHeader {
    constructor() {
        /**
         * Indicates whether the `Tab` is active/selected.
         * Determines whether it's `TabPanel` is rendered.
         */
        this.active = false;
        /**
         * Indicates whether or not the `Tab` item is disabled.
         */
        this.disabled = false;
        /**
         * Value 'selected' to be emitted after a new `Tab` is selected.
         */
        this.selected = new EventEmitter();
        this._cacheActive = false;
    }
    /**
     * Set to 'true' to have pane reference cached and not reloaded on tab switching.
     */
    set cacheActive(shouldCache) {
        this._cacheActive = shouldCache;
        // Updates the pane references associated with the tab header when cache active is changed.
        if (this.paneReference) {
            this.paneReference.cacheActive = this.cacheActive;
        }
    }
    set paneTabIndex(tabIndex) {
        if (this.paneReference) {
            this.paneReference.tabIndex = tabIndex;
        }
    }
    get cacheActive() {
        return this._cacheActive;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.title = this.title ? this.title : this.tabItem.nativeElement.textContent;
        });
    }
    selectTab() {
        this.tabItem.nativeElement.focus();
        if (!this.disabled) {
            this.selected.emit();
            this.active = true;
            if (this.paneReference) {
                this.paneReference.active = true;
            }
        }
    }
}
TabHeader.decorators = [
    { type: Component, args: [{
                selector: "ibm-tab-header",
                template: `
		<li
			[ngClass]="{
				'bx--tabs__nav-item--selected': active,
				'bx--tabs__nav-item--disabled': disabled
			}"
			class="bx--tabs__nav-item"
			role="presentation"
			(click)="selectTab()">
			<a
				#tabItem
				[attr.aria-selected]="active"
				draggable="false"
				class="bx--tabs__nav-link"
				href="javascript:void(0)"
				[title]="title"
				[attr.tabindex]="(active? 0 : -1)"
				role="tab">
				<ng-content></ng-content>
			</a>
		</li>
	`
            }] }
];
TabHeader.propDecorators = {
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    paneReference: [{ type: Input }],
    title: [{ type: Input }],
    cacheActive: [{ type: Input }],
    paneTabIndex: [{ type: Input }],
    selected: [{ type: Output }],
    tabItem: [{ type: ViewChild, args: ["tabItem", { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jYXJib24tY29tcG9uZW50cy1hbmd1bGFyL3RhYnMvIiwic291cmNlcyI6WyJ0YWItaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ04sU0FBUyxFQUNULEtBQUssRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLE1BQU0sRUFFTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQTRCN0MsTUFBTSxPQUFPLFNBQVM7SUExQnRCO1FBMkJDOzs7V0FHRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDeEI7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBNEIxQjs7V0FFRztRQUVPLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBS25DLGlCQUFZLEdBQUcsS0FBSyxDQUFDO0lBa0JoQyxDQUFDO0lBakRBOztPQUVHO0lBQ0gsSUFBYSxXQUFXLENBQUMsV0FBb0I7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7UUFFaEMsMkZBQTJGO1FBQzNGLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2xEO0lBQ0YsQ0FBQztJQUVELElBQWEsWUFBWSxDQUFDLFFBQXVCO1FBQ2hELElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDdkM7SUFDRixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzFCLENBQUM7SUFhRCxlQUFlO1FBQ2QsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQy9FLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFNBQVM7UUFDUixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ25CLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ2pDO1NBQ0Q7SUFDRixDQUFDOzs7WUF6RkQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBcUJUO2FBQ0Q7OztxQkFPQyxLQUFLO3VCQUlMLEtBQUs7NEJBSUwsS0FBSztvQkFDTCxLQUFLOzBCQUlMLEtBQUs7MkJBU0wsS0FBSzt1QkFjTCxNQUFNO3NCQUdOLFNBQVMsU0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0Vmlld0NoaWxkLFxuXHRFbGVtZW50UmVmLFxuXHRPdXRwdXQsXG5cdEFmdGVyVmlld0luaXRcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS10YWItaGVhZGVyXCIsXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGxpXG5cdFx0XHRbbmdDbGFzc109XCJ7XG5cdFx0XHRcdCdieC0tdGFic19fbmF2LWl0ZW0tLXNlbGVjdGVkJzogYWN0aXZlLFxuXHRcdFx0XHQnYngtLXRhYnNfX25hdi1pdGVtLS1kaXNhYmxlZCc6IGRpc2FibGVkXG5cdFx0XHR9XCJcblx0XHRcdGNsYXNzPVwiYngtLXRhYnNfX25hdi1pdGVtXCJcblx0XHRcdHJvbGU9XCJwcmVzZW50YXRpb25cIlxuXHRcdFx0KGNsaWNrKT1cInNlbGVjdFRhYigpXCI+XG5cdFx0XHQ8YVxuXHRcdFx0XHQjdGFiSXRlbVxuXHRcdFx0XHRbYXR0ci5hcmlhLXNlbGVjdGVkXT1cImFjdGl2ZVwiXG5cdFx0XHRcdGRyYWdnYWJsZT1cImZhbHNlXCJcblx0XHRcdFx0Y2xhc3M9XCJieC0tdGFic19fbmF2LWxpbmtcIlxuXHRcdFx0XHRocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCJcblx0XHRcdFx0W3RpdGxlXT1cInRpdGxlXCJcblx0XHRcdFx0W2F0dHIudGFiaW5kZXhdPVwiKGFjdGl2ZT8gMCA6IC0xKVwiXG5cdFx0XHRcdHJvbGU9XCJ0YWJcIj5cblx0XHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdFx0PC9hPlxuXHRcdDwvbGk+XG5cdGBcbn0pXG5cbmV4cG9ydCBjbGFzcyBUYWJIZWFkZXIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblx0LyoqXG5cdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBgVGFiYCBpcyBhY3RpdmUvc2VsZWN0ZWQuXG5cdCAqIERldGVybWluZXMgd2hldGhlciBpdCdzIGBUYWJQYW5lbGAgaXMgcmVuZGVyZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBhY3RpdmUgPSBmYWxzZTtcblx0LyoqXG5cdCAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGUgYFRhYmAgaXRlbSBpcyBkaXNhYmxlZC5cblx0ICovXG5cdEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcnJlc3BvbnNpbmcgdGFiIHBhbmUuXG5cdCAqL1xuXHRASW5wdXQoKSBwYW5lUmVmZXJlbmNlOiBUYWI7XG5cdEBJbnB1dCgpIHRpdGxlO1xuXHQvKipcblx0ICogU2V0IHRvICd0cnVlJyB0byBoYXZlIHBhbmUgcmVmZXJlbmNlIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG5cdCAqL1xuXHRASW5wdXQoKSBzZXQgY2FjaGVBY3RpdmUoc2hvdWxkQ2FjaGU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLl9jYWNoZUFjdGl2ZSA9IHNob3VsZENhY2hlO1xuXG5cdFx0Ly8gVXBkYXRlcyB0aGUgcGFuZSByZWZlcmVuY2VzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdGFiIGhlYWRlciB3aGVuIGNhY2hlIGFjdGl2ZSBpcyBjaGFuZ2VkLlxuXHRcdGlmICh0aGlzLnBhbmVSZWZlcmVuY2UpIHtcblx0XHRcdHRoaXMucGFuZVJlZmVyZW5jZS5jYWNoZUFjdGl2ZSA9IHRoaXMuY2FjaGVBY3RpdmU7XG5cdFx0fVxuXHR9XG5cblx0QElucHV0KCkgc2V0IHBhbmVUYWJJbmRleCh0YWJJbmRleDogbnVtYmVyIHwgbnVsbCkge1xuXHRcdGlmICh0aGlzLnBhbmVSZWZlcmVuY2UpIHtcblx0XHRcdHRoaXMucGFuZVJlZmVyZW5jZS50YWJJbmRleCA9IHRhYkluZGV4O1xuXHRcdH1cblx0fVxuXG5cdGdldCBjYWNoZUFjdGl2ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fY2FjaGVBY3RpdmU7XG5cdH1cblxuXHQvKipcblx0ICogVmFsdWUgJ3NlbGVjdGVkJyB0byBiZSBlbWl0dGVkIGFmdGVyIGEgbmV3IGBUYWJgIGlzIHNlbGVjdGVkLlxuXHQgKi9cblxuXHRAT3V0cHV0KCkgc2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJ0YWJJdGVtXCIsIHsgc3RhdGljOiB0cnVlIH0pIHRhYkl0ZW06IEVsZW1lbnRSZWY7XG5cblx0cHJvdGVjdGVkIF9jYWNoZUFjdGl2ZSA9IGZhbHNlO1xuXG5cdG5nQWZ0ZXJWaWV3SW5pdCgpIHtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMudGl0bGUgPSB0aGlzLnRpdGxlID8gdGhpcy50aXRsZSA6IHRoaXMudGFiSXRlbS5uYXRpdmVFbGVtZW50LnRleHRDb250ZW50O1xuXHRcdH0pO1xuXHR9XG5cblx0c2VsZWN0VGFiKCkge1xuXHRcdHRoaXMudGFiSXRlbS5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG5cdFx0aWYgKCF0aGlzLmRpc2FibGVkKSB7XG5cdFx0XHR0aGlzLnNlbGVjdGVkLmVtaXQoKTtcblx0XHRcdHRoaXMuYWN0aXZlID0gdHJ1ZTtcblx0XHRcdGlmICh0aGlzLnBhbmVSZWZlcmVuY2UpIHtcblx0XHRcdFx0dGhpcy5wYW5lUmVmZXJlbmNlLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iXX0=