/**
 *
 * carbon-angular v0.0.0 | tab.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, TemplateRef, HostBinding } from "@angular/core";
let nextId = 0;
/**
* The `Tab` component is a child of the `Tabs` component.
* It represents one `Tab` item and its content within a panel of other `Tab` items.
*
*
* `Tab` takes a string or `TemplateRef` for the header, and any content for the body of the tab.
* Disabled states should be handled by the application (ie. switch to the tab, but display some
* indication as to _why_ the tab is disabled).
*
* When the tab is selected the `select` output will be triggered.
* The `select` output will also be triggered for the active tab when the tabs are loaded or updated.
*
*
* Tab with string header:
*
* ```html
* <ibm-tab heading='tab1'>
* 	tab 1 content
* </ibm-tab>
* ```
*
* Tab with custom header:
*
* ```html
* <ng-template #tabHeading>
* 	<svg ibmIcon="facebook"
* 		size="sm"
* 		style="margin-right: 7px;">
* 	</svg>
* 	Hello Tab 1
* </ng-template>
* <ibm-tabs>
* 	<ibm-tab [heading]="tabHeading">
* 		Tab 1 content <svg ibmIcon="alert" size="lg"></svg>
* 	</ibm-tab>
* 	<ibm-tab heading='Tab2'>
* 		Tab 2 content
* 	</ibm-tab>
* 	<ibm-tab heading='Tab3'>
* 		Tab 3 content
* 	</ibm-tab>
* </ibm-tabs>
* ```
*/
export class Tab {
    constructor() {
        /**
         * Boolean value reflects if the `Tab` is using a custom template for the heading.
         * Default value is false.
         */
        this.headingIsTemplate = false;
        /**
         * Indicates whether the `Tab` is active/selected.
         * Determines whether it's `TabPanel` is rendered.
         */
        this.active = false;
        /**
         * Indicates whether or not the `Tab` item is disabled.
         */
        this.disabled = false;
        this.tabIndex = 0;
        // do we need id's?
        /**
         * Sets the id of the `Tab`. Will be uniquely generated if not provided.
         */
        this.id = `n-tab-${nextId++}`;
        /**
         * Value 'selected' to be emitted after a new `Tab` is selected.
         */
        this.selected = new EventEmitter();
        /**
         * Used to set the id property on the element.
         */
        this.attrClass = this.id;
        this._cacheActive = false;
    }
    /**
     * Set to true to have Tab items cached and not reloaded on tab switching.
     */
    set cacheActive(shouldCache) {
        this._cacheActive = shouldCache;
    }
    get cacheActive() {
        return this._cacheActive;
    }
    /**
     * Checks for custom heading template on initialization and updates the value
     * of the boolean 'headingIsTemplate'.
     */
    ngOnInit() {
        if (this.heading instanceof TemplateRef) {
            this.headingIsTemplate = true;
        }
    }
    /**
     * Emit the status of the `Tab`, specifically 'select' and 'selected' properties.
     */
    doSelect() {
        this.selected.emit();
    }
    /**
    * Returns value indicating whether this `Tab` should be rendered in a `TabPanel`.
    */
    shouldRender() {
        return this.active || this.cacheActive;
    }
}
Tab.decorators = [
    { type: Component, args: [{
                selector: "ibm-tab",
                template: `
		<div
			[attr.tabindex]="tabIndex"
			role="tabpanel"
			*ngIf="shouldRender()"
			[ngStyle]="{'display': active ? null : 'none'}"
			[attr.aria-labelledby]="id + '-header'">
			<ng-content></ng-content>
		</div>
	`
            }] }
];
Tab.propDecorators = {
    heading: [{ type: Input }],
    title: [{ type: Input }],
    context: [{ type: Input }],
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    tabIndex: [{ type: Input }],
    id: [{ type: Input }],
    cacheActive: [{ type: Input }],
    selected: [{ type: Output }],
    attrClass: [{ type: HostBinding, args: ["attr.id",] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFicy8iLCJzb3VyY2VzIjpbInRhYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFFWixXQUFXLEVBQ1gsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkNFO0FBY0YsTUFBTSxPQUFPLEdBQUc7SUFiaEI7UUFjQzs7O1dBR0c7UUFDSSxzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFpQmpDOzs7V0FHRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDeEI7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDdEIsbUJBQW1CO1FBQ25COztXQUVHO1FBQ00sT0FBRSxHQUFHLFNBQVMsTUFBTSxFQUFFLEVBQUUsQ0FBQztRQU9sQzs7V0FFRztRQUNPLGFBQVEsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUVsRTs7V0FFRztRQUNxQixjQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQU1sQyxpQkFBWSxHQUFHLEtBQUssQ0FBQztJQXlCaEMsQ0FBQztJQTdDQTs7T0FFRztJQUNILElBQWEsV0FBVyxDQUFDLFdBQW9CO1FBQzVDLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7SUFXRCxJQUFJLFdBQVc7UUFDZCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDMUIsQ0FBQztJQUlEOzs7T0FHRztJQUNILFFBQVE7UUFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLFlBQVksV0FBVyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7U0FDOUI7SUFDRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7O01BRUU7SUFDRixZQUFZO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQzs7O1lBL0ZELFNBQVMsU0FBQztnQkFDVixRQUFRLEVBQUUsU0FBUztnQkFDbkIsUUFBUSxFQUFFOzs7Ozs7Ozs7RUFTVDthQUNEOzs7c0JBV0MsS0FBSztvQkFPTCxLQUFLO3NCQUlMLEtBQUs7cUJBS0wsS0FBSzt1QkFJTCxLQUFLO3VCQUVMLEtBQUs7aUJBS0wsS0FBSzswQkFJTCxLQUFLO3VCQU1MLE1BQU07d0JBS04sV0FBVyxTQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdE9uSW5pdCxcblx0SW5wdXQsXG5cdE91dHB1dCxcblx0RXZlbnRFbWl0dGVyLFxuXHRDb250ZW50Q2hpbGQsXG5cdFRlbXBsYXRlUmVmLFxuXHRIb3N0QmluZGluZ1xufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5cbmxldCBuZXh0SWQgPSAwO1xuXG4vKipcbiogVGhlIGBUYWJgIGNvbXBvbmVudCBpcyBhIGNoaWxkIG9mIHRoZSBgVGFic2AgY29tcG9uZW50LlxuKiBJdCByZXByZXNlbnRzIG9uZSBgVGFiYCBpdGVtIGFuZCBpdHMgY29udGVudCB3aXRoaW4gYSBwYW5lbCBvZiBvdGhlciBgVGFiYCBpdGVtcy5cbipcbipcbiogYFRhYmAgdGFrZXMgYSBzdHJpbmcgb3IgYFRlbXBsYXRlUmVmYCBmb3IgdGhlIGhlYWRlciwgYW5kIGFueSBjb250ZW50IGZvciB0aGUgYm9keSBvZiB0aGUgdGFiLlxuKiBEaXNhYmxlZCBzdGF0ZXMgc2hvdWxkIGJlIGhhbmRsZWQgYnkgdGhlIGFwcGxpY2F0aW9uIChpZS4gc3dpdGNoIHRvIHRoZSB0YWIsIGJ1dCBkaXNwbGF5IHNvbWVcbiogaW5kaWNhdGlvbiBhcyB0byBfd2h5XyB0aGUgdGFiIGlzIGRpc2FibGVkKS5cbipcbiogV2hlbiB0aGUgdGFiIGlzIHNlbGVjdGVkIHRoZSBgc2VsZWN0YCBvdXRwdXQgd2lsbCBiZSB0cmlnZ2VyZWQuXG4qIFRoZSBgc2VsZWN0YCBvdXRwdXQgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGFjdGl2ZSB0YWIgd2hlbiB0aGUgdGFicyBhcmUgbG9hZGVkIG9yIHVwZGF0ZWQuXG4qXG4qXG4qIFRhYiB3aXRoIHN0cmluZyBoZWFkZXI6XG4qXG4qIGBgYGh0bWxcbiogPGlibS10YWIgaGVhZGluZz0ndGFiMSc+XG4qIFx0dGFiIDEgY29udGVudFxuKiA8L2libS10YWI+XG4qIGBgYFxuKlxuKiBUYWIgd2l0aCBjdXN0b20gaGVhZGVyOlxuKlxuKiBgYGBodG1sXG4qIDxuZy10ZW1wbGF0ZSAjdGFiSGVhZGluZz5cbiogXHQ8c3ZnIGlibUljb249XCJmYWNlYm9va1wiXG4qIFx0XHRzaXplPVwic21cIlxuKiBcdFx0c3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDdweDtcIj5cbiogXHQ8L3N2Zz5cbiogXHRIZWxsbyBUYWIgMVxuKiA8L25nLXRlbXBsYXRlPlxuKiA8aWJtLXRhYnM+XG4qIFx0PGlibS10YWIgW2hlYWRpbmddPVwidGFiSGVhZGluZ1wiPlxuKiBcdFx0VGFiIDEgY29udGVudCA8c3ZnIGlibUljb249XCJhbGVydFwiIHNpemU9XCJsZ1wiPjwvc3ZnPlxuKiBcdDwvaWJtLXRhYj5cbiogXHQ8aWJtLXRhYiBoZWFkaW5nPSdUYWIyJz5cbiogXHRcdFRhYiAyIGNvbnRlbnRcbiogXHQ8L2libS10YWI+XG4qIFx0PGlibS10YWIgaGVhZGluZz0nVGFiMyc+XG4qIFx0XHRUYWIgMyBjb250ZW50XG4qIFx0PC9pYm0tdGFiPlxuKiA8L2libS10YWJzPlxuKiBgYGBcbiovXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6IFwiaWJtLXRhYlwiLFxuXHR0ZW1wbGF0ZTogYFxuXHRcdDxkaXZcblx0XHRcdFthdHRyLnRhYmluZGV4XT1cInRhYkluZGV4XCJcblx0XHRcdHJvbGU9XCJ0YWJwYW5lbFwiXG5cdFx0XHQqbmdJZj1cInNob3VsZFJlbmRlcigpXCJcblx0XHRcdFtuZ1N0eWxlXT1cInsnZGlzcGxheSc6IGFjdGl2ZSA/IG51bGwgOiAnbm9uZSd9XCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJpZCArICctaGVhZGVyJ1wiPlxuXHRcdFx0PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuXHRcdDwvZGl2PlxuXHRgXG59KVxuZXhwb3J0IGNsYXNzIFRhYiBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdC8qKlxuXHQgKiBCb29sZWFuIHZhbHVlIHJlZmxlY3RzIGlmIHRoZSBgVGFiYCBpcyB1c2luZyBhIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgdGhlIGhlYWRpbmcuXG5cdCAqIERlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG5cdCAqL1xuXHRwdWJsaWMgaGVhZGluZ0lzVGVtcGxhdGUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogVGhlIGBUYWJgJ3MgdGl0bGUgdG8gYmUgZGlzcGxheWVkIG9yIGN1c3RvbSB0ZW1hcGxhdGUgZm9yIHRoZSBgVGFiYCBoZWFkaW5nLlxuXHQgKi9cblx0QElucHV0KCkgaGVhZGluZzogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55Pjtcblx0LyoqXG5cdCAqIE9wdGlvbmFsIG92ZXJyaWRlIGZvciB0aGUgYHRhYkl0ZW0nc2AncyB0aXRsZSBhdHRyaWJ1dGUgd2hpY2ggaXMgc2V0IGluIGBUYWJIZWFkZXJzYC5cblx0ICogYHRhYkl0ZW1gJ3MgdGl0bGUgYXR0cmlidXRlIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvIGBoZWFkaW5nYC5cblx0ICpcblx0ICogWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoaXMgaWYgeW91IHNldCBgaGVhZGluZ2AgdG8gYSBgVGVtcGxhdGVSZWZgLlxuXHQgKi9cblx0QElucHV0KCkgdGl0bGU6IHN0cmluZztcblx0LyoqXG5cdCAqIEFsbG93cyB0aGUgdXNlciB0byBwYXNzIGRhdGEgdG8gdGhlIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgdGhlIGBUYWJgIGhlYWRpbmcuXG5cdCAqL1xuXHRASW5wdXQoKSBjb250ZXh0OiBhbnk7XG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYFRhYmAgaXMgYWN0aXZlL3NlbGVjdGVkLlxuXHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgaXQncyBgVGFiUGFuZWxgIGlzIHJlbmRlcmVkLlxuXHQgKi9cblx0QElucHV0KCkgYWN0aXZlID0gZmFsc2U7XG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdGhlIGBUYWJgIGl0ZW0gaXMgZGlzYWJsZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xuXG5cdEBJbnB1dCgpIHRhYkluZGV4ID0gMDtcblx0Ly8gZG8gd2UgbmVlZCBpZCdzP1xuXHQvKipcblx0ICogU2V0cyB0aGUgaWQgb2YgdGhlIGBUYWJgLiBXaWxsIGJlIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZiBub3QgcHJvdmlkZWQuXG5cdCAqL1xuXHRASW5wdXQoKSBpZCA9IGBuLXRhYi0ke25leHRJZCsrfWA7XG5cdC8qKlxuXHQgKiBTZXQgdG8gdHJ1ZSB0byBoYXZlIFRhYiBpdGVtcyBjYWNoZWQgYW5kIG5vdCByZWxvYWRlZCBvbiB0YWIgc3dpdGNoaW5nLlxuXHQgKi9cblx0QElucHV0KCkgc2V0IGNhY2hlQWN0aXZlKHNob3VsZENhY2hlOiBib29sZWFuKSB7XG5cdFx0dGhpcy5fY2FjaGVBY3RpdmUgPSBzaG91bGRDYWNoZTtcblx0fVxuXHQvKipcblx0ICogVmFsdWUgJ3NlbGVjdGVkJyB0byBiZSBlbWl0dGVkIGFmdGVyIGEgbmV3IGBUYWJgIGlzIHNlbGVjdGVkLlxuXHQgKi9cblx0QE91dHB1dCgpIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gc2V0IHRoZSBpZCBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudC5cblx0ICovXG5cdEBIb3N0QmluZGluZyhcImF0dHIuaWRcIikgYXR0ckNsYXNzID0gdGhpcy5pZDtcblxuXHRnZXQgY2FjaGVBY3RpdmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2NhY2hlQWN0aXZlO1xuXHR9XG5cblx0cHJvdGVjdGVkIF9jYWNoZUFjdGl2ZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBDaGVja3MgZm9yIGN1c3RvbSBoZWFkaW5nIHRlbXBsYXRlIG9uIGluaXRpYWxpemF0aW9uIGFuZCB1cGRhdGVzIHRoZSB2YWx1ZVxuXHQgKiBvZiB0aGUgYm9vbGVhbiAnaGVhZGluZ0lzVGVtcGxhdGUnLlxuXHQgKi9cblx0bmdPbkluaXQoKSB7XG5cdFx0aWYgKHRoaXMuaGVhZGluZyBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmKSB7XG5cdFx0XHR0aGlzLmhlYWRpbmdJc1RlbXBsYXRlID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogRW1pdCB0aGUgc3RhdHVzIG9mIHRoZSBgVGFiYCwgc3BlY2lmaWNhbGx5ICdzZWxlY3QnIGFuZCAnc2VsZWN0ZWQnIHByb3BlcnRpZXMuXG5cdCAqL1xuXHRkb1NlbGVjdCgpIHtcblx0XHR0aGlzLnNlbGVjdGVkLmVtaXQoKTtcblx0fVxuXG5cdC8qKlxuXHQqIFJldHVybnMgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMgYFRhYmAgc2hvdWxkIGJlIHJlbmRlcmVkIGluIGEgYFRhYlBhbmVsYC5cblx0Ki9cblx0c2hvdWxkUmVuZGVyKCkge1xuXHRcdHJldHVybiB0aGlzLmFjdGl2ZSB8fCB0aGlzLmNhY2hlQWN0aXZlO1xuXHR9XG59XG4iXX0=