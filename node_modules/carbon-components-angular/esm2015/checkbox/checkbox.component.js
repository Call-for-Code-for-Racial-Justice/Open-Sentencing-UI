/**
 *
 * carbon-angular v0.0.0 | checkbox.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild, HostBinding, HostListener } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
/**
 * Defines the set of states for a checkbox component.
 */
export var CheckboxState;
(function (CheckboxState) {
    CheckboxState[CheckboxState["Init"] = 0] = "Init";
    CheckboxState[CheckboxState["Indeterminate"] = 1] = "Indeterminate";
    CheckboxState[CheckboxState["Checked"] = 2] = "Checked";
    CheckboxState[CheckboxState["Unchecked"] = 3] = "Unchecked";
})(CheckboxState || (CheckboxState = {}));
/**
 * Used to emit changes performed on checkbox components.
 *
 * @deprecated since v4
 */
export class CheckboxChange {
}
/**
 * [See demo](../../?path=/story/checkbox--basic)
 *
 * <example-url>../../iframe.html?id=checkbox--basic</example-url>
 */
export class Checkbox {
    /**
     * Creates an instance of `Checkbox`.
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        /**
         * Size of the checkbox.
         *
         * @deprecated since v4
         */
        this.size = "md";
        /**
         * Set to `true` for checkbox to be rendered without any classes on the host element.
         */
        this.inline = false;
        /**
         * Set to `true` for a disabled checkbox.
         */
        this.disabled = false;
        /**
         * Set to `true` for a loading checkbox.
         */
        this.skeleton = false;
        /**
         * Set to `true` to hide the checkbox labels.
         */
        this.hideLabel = false;
        /**
         * The unique id for the checkbox component.
         */
        this.id = `checkbox-${Checkbox.checkboxCount}`;
        // TODO: drop the `_`
        // tslint:disable-next-line:no-input-rename
        this._ariaLabel = "";
        /**
         * Emits click event.
         */
        this.click = new EventEmitter();
        /**
         * Emits event notifying other classes when a change in state occurs on a checkbox after a
         * click.
         *
         * @deprecated since v4 use `checked` and `checkedChange` instead
         */
        this.change = new EventEmitter();
        /**
         * Emits an event when the value of the checkbox changes.
         *
         * Allows double biding with the `checked` Input.
         */
        this.checkedChange = new EventEmitter();
        /**
         * Emits event notifying other classes when a change in state occurs specifically
         * on an indeterminate checkbox.
         */
        this.indeterminateChange = new EventEmitter();
        /**
         * Set to `true` if the input checkbox is selected (or checked).
         */
        this._checked = false;
        /**
         * Set to `true` if the input checkbox is in state indeterminate.
         */
        this._indeterminate = false;
        /**
         * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.
         */
        this.currentCheckboxState = CheckboxState.Init;
        /**
         * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.
         */
        this.onTouched = () => { };
        /**
         * Method set in `registerOnChange` to propagate changes back to the form.
         */
        this.propagateChange = (_) => { };
        Checkbox.checkboxCount++;
    }
    /**
     * Used to set the `aria-label` attribute on the input element.
     *
     * @deprecated since v4 use the `ariaLabel` input instead
     */
    // tslint:disable-next-line:no-input-rename
    set ariaLabel(value) {
        this._ariaLabel = value;
    }
    get ariaLabel() {
        return this._ariaLabel;
    }
    /**
     * Used to set the `aria-labelledby` attribute on the input element.
     *
     * @deprecated since v4 use the `ariaLabelledby` input instead
     */
    // tslint:disable-next-line:no-input-rename
    set ariaLabelledby(value) {
        this._ariaLabelledby = value;
    }
    get ariaLabelledby() {
        return this._ariaLabelledby;
    }
    /**
     * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.
     *
     * Allows double binding with the `indeterminateChange` Output.
     */
    set indeterminate(indeterminate) {
        if (indeterminate === this._indeterminate) {
            return;
        }
        // Set indeterminate and reset checked if indeterminate is true - only one of them can be true
        this._indeterminate = indeterminate;
        if (indeterminate && this._checked) {
            this._checked = false;
        }
        if (this._indeterminate) {
            this.transitionCheckboxState(CheckboxState.Indeterminate);
        }
        else {
            this.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);
        }
        this.changeDetectorRef.markForCheck();
        this.indeterminateChange.emit(this._indeterminate);
    }
    /**
     * Reflects whether the checkbox state is indeterminate.
     */
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * Sets the `checked` state. `true` for checked, `false` for unchecked
     *
     * Allows double binding with the `checkedChange` Output.
     */
    set checked(checked) {
        // Set checked and reset indeterminate if checked is true - only one of them can be true
        this.setChecked(checked, checked);
    }
    /**
     * Returns value `true` if state is selected for the checkbox.
     */
    get checked() {
        return this._checked;
    }
    get checkboxWrapperClass() {
        return !this.inline;
    }
    get formItemClass() {
        return !this.inline;
    }
    /**
     * Toggle the selected state of the checkbox.
     */
    toggle() {
        // Flip checked and reset indeterminate
        this.setChecked(!this.checked, true);
    }
    /**
     * Writes a value from `ngModel` to the component.
     *
     * In this case the value is the `checked` property.
     *
     * @param value boolean, corresponds to the `checked` property.
     */
    writeValue(value) {
        // Set checked and reset indeterminate
        this.setChecked(!!value, true);
    }
    /**
     * Sets a method in order to propagate changes back to the form.
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * Registers a callback to be triggered when the control has been touched.
     * @param fn Callback to be triggered when the checkbox is touched.
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    focusOut() {
        this.onTouched();
    }
    /**
     * Executes on the event of a change within `Checkbox` to block propagation.
     */
    onChange(event) {
        event.stopPropagation();
    }
    /**
     * Handles click events on the `Checkbox` and emits changes to other classes.
     */
    onClick(event) {
        if (this.click.observers.length) {
            // Disable default checkbox activation behavior which flips checked and resets indeterminate.
            // This allows the parent component to control the checked/indeterminate properties.
            event.preventDefault();
            this.click.emit();
            return;
        }
        if (!this.disabled) {
            this.toggle();
            this.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);
            this.emitChangeEvent();
        }
    }
    /**
     * Handles changes between checkbox states.
     */
    transitionCheckboxState(newState) {
        this.currentCheckboxState = newState;
    }
    /**
     * Creates instance of `CheckboxChange` used to propagate the change event.
     */
    emitChangeEvent() {
        /* begin deprecation */
        let event = new CheckboxChange();
        event.source = this;
        event.checked = this.checked;
        this.change.emit(event);
        /* end deprecation */
        this.checkedChange.emit(this.checked);
        this.propagateChange(this.checked);
    }
    /**
     * Updates the checkbox if it is in the indeterminate state.
     */
    ngAfterViewInit() {
        if (this.indeterminate) {
            this.inputCheckbox.nativeElement.indeterminate = true;
            this.checked = false;
        }
    }
    /**
     * Sets checked state and optionally resets indeterminate state.
     */
    setChecked(checked, resetIndeterminate) {
        if (checked === this._checked) {
            return;
        }
        this._checked = checked;
        // Reset indeterminate if requested
        if (resetIndeterminate && this._indeterminate) {
            this._indeterminate = false;
            Promise.resolve().then(() => {
                this.indeterminateChange.emit(this._indeterminate);
            });
        }
        this.changeDetectorRef.markForCheck();
    }
}
/**
 * Variable used for creating unique ids for checkbox components.
 */
Checkbox.checkboxCount = 0;
Checkbox.decorators = [
    { type: Component, args: [{
                selector: "ibm-checkbox",
                template: `
		<div class="bx--form-item bx--checkbox-wrapper">
			<input
				#inputCheckbox
				class="bx--checkbox"
				type="checkbox"
				[id]="id + '_input'"
				[value]="value"
				[name]="name"
				[required]="required"
				[checked]="checked"
				[disabled]="disabled"
				[indeterminate]="indeterminate"
				[attr.aria-labelledby]="ariaLabelledby"
				[attr.aria-checked]="(indeterminate ? 'mixed' : checked)"
				(change)="onChange($event)"
				(click)="onClick($event)">
			<label
				[for]="id + '_input'"
				[attr.aria-label]="ariaLabel"
				class="bx--checkbox-label"
				[ngClass]="{
					'bx--skeleton' : skeleton
				}">
				<span [ngClass]="{'bx--visually-hidden' : hideLabel}" class="bx--checkbox-label-text">
					<ng-content></ng-content>
				</span>
			</label>
		</div>
	`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: Checkbox,
                        multi: true
                    }
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
Checkbox.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
Checkbox.propDecorators = {
    size: [{ type: Input }],
    nested: [{ type: Input }],
    inline: [{ type: Input }],
    disabled: [{ type: Input }],
    skeleton: [{ type: Input }],
    hideLabel: [{ type: Input }],
    name: [{ type: Input }],
    id: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    ariaLabel: [{ type: Input, args: ["aria-label",] }],
    _ariaLabel: [{ type: Input, args: ["ariaLabel",] }],
    ariaLabelledby: [{ type: Input, args: ["aria-labelledby",] }],
    _ariaLabelledby: [{ type: Input, args: ["ariaLabelledby",] }],
    indeterminate: [{ type: Input }],
    checked: [{ type: Input }],
    checkboxWrapperClass: [{ type: HostBinding, args: ["class.bx--checkbox-wrapper",] }],
    formItemClass: [{ type: HostBinding, args: ["class.bx--form-item",] }],
    click: [{ type: Output }],
    change: [{ type: Output }],
    checkedChange: [{ type: Output }],
    indeterminateChange: [{ type: Output }],
    inputCheckbox: [{ type: ViewChild, args: ["inputCheckbox", { static: false },] }],
    focusOut: [{ type: HostListener, args: ["focusout",] }]
};
//# sourceMappingURL=data:application/json;base64,