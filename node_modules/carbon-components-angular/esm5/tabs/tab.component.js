/**
 *
 * carbon-angular v0.0.0 | tab.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, Input, Output, EventEmitter, TemplateRef, HostBinding } from "@angular/core";
var nextId = 0;
/**
* The `Tab` component is a child of the `Tabs` component.
* It represents one `Tab` item and its content within a panel of other `Tab` items.
*
*
* `Tab` takes a string or `TemplateRef` for the header, and any content for the body of the tab.
* Disabled states should be handled by the application (ie. switch to the tab, but display some
* indication as to _why_ the tab is disabled).
*
* When the tab is selected the `select` output will be triggered.
* The `select` output will also be triggered for the active tab when the tabs are loaded or updated.
*
*
* Tab with string header:
*
* ```html
* <ibm-tab heading='tab1'>
* 	tab 1 content
* </ibm-tab>
* ```
*
* Tab with custom header:
*
* ```html
* <ng-template #tabHeading>
* 	<svg ibmIcon="facebook"
* 		size="sm"
* 		style="margin-right: 7px;">
* 	</svg>
* 	Hello Tab 1
* </ng-template>
* <ibm-tabs>
* 	<ibm-tab [heading]="tabHeading">
* 		Tab 1 content <svg ibmIcon="alert" size="lg"></svg>
* 	</ibm-tab>
* 	<ibm-tab heading='Tab2'>
* 		Tab 2 content
* 	</ibm-tab>
* 	<ibm-tab heading='Tab3'>
* 		Tab 3 content
* 	</ibm-tab>
* </ibm-tabs>
* ```
*/
var Tab = /** @class */ (function () {
    function Tab() {
        /**
         * Boolean value reflects if the `Tab` is using a custom template for the heading.
         * Default value is false.
         */
        this.headingIsTemplate = false;
        /**
         * Indicates whether the `Tab` is active/selected.
         * Determines whether it's `TabPanel` is rendered.
         */
        this.active = false;
        /**
         * Indicates whether or not the `Tab` item is disabled.
         */
        this.disabled = false;
        this.tabIndex = 0;
        // do we need id's?
        /**
         * Sets the id of the `Tab`. Will be uniquely generated if not provided.
         */
        this.id = "n-tab-" + nextId++;
        /**
         * Value 'selected' to be emitted after a new `Tab` is selected.
         */
        this.selected = new EventEmitter();
        /**
         * Used to set the id property on the element.
         */
        this.attrClass = this.id;
        this._cacheActive = false;
    }
    Object.defineProperty(Tab.prototype, "cacheActive", {
        get: function () {
            return this._cacheActive;
        },
        /**
         * Set to true to have Tab items cached and not reloaded on tab switching.
         */
        set: function (shouldCache) {
            this._cacheActive = shouldCache;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Checks for custom heading template on initialization and updates the value
     * of the boolean 'headingIsTemplate'.
     */
    Tab.prototype.ngOnInit = function () {
        if (this.heading instanceof TemplateRef) {
            this.headingIsTemplate = true;
        }
    };
    /**
     * Emit the status of the `Tab`, specifically 'select' and 'selected' properties.
     */
    Tab.prototype.doSelect = function () {
        this.selected.emit();
    };
    /**
    * Returns value indicating whether this `Tab` should be rendered in a `TabPanel`.
    */
    Tab.prototype.shouldRender = function () {
        return this.active || this.cacheActive;
    };
    Tab.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tab",
                    template: "\n\t\t<div\n\t\t\t[attr.tabindex]=\"tabIndex\"\n\t\t\trole=\"tabpanel\"\n\t\t\t*ngIf=\"shouldRender()\"\n\t\t\t[ngStyle]=\"{'display': active ? null : 'none'}\"\n\t\t\t[attr.aria-labelledby]=\"id + '-header'\">\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t"
                }] }
    ];
    Tab.propDecorators = {
        heading: [{ type: Input }],
        title: [{ type: Input }],
        context: [{ type: Input }],
        active: [{ type: Input }],
        disabled: [{ type: Input }],
        tabIndex: [{ type: Input }],
        id: [{ type: Input }],
        cacheActive: [{ type: Input }],
        selected: [{ type: Output }],
        attrClass: [{ type: HostBinding, args: ["attr.id",] }]
    };
    return Tab;
}());
export { Tab };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFicy8iLCJzb3VyY2VzIjpbInRhYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNOLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFFWixXQUFXLEVBQ1gsV0FBVyxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVmOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBMkNFO0FBQ0Y7SUFBQTtRQWNDOzs7V0FHRztRQUNJLHNCQUFpQixHQUFHLEtBQUssQ0FBQztRQWlCakM7OztXQUdHO1FBQ00sV0FBTSxHQUFHLEtBQUssQ0FBQztRQUN4Qjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUN0QixtQkFBbUI7UUFDbkI7O1dBRUc7UUFDTSxPQUFFLEdBQUcsV0FBUyxNQUFNLEVBQUksQ0FBQztRQU9sQzs7V0FFRztRQUNPLGFBQVEsR0FBdUIsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUVsRTs7V0FFRztRQUNxQixjQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQU1sQyxpQkFBWSxHQUFHLEtBQUssQ0FBQztJQXlCaEMsQ0FBQztJQTFDQSxzQkFBYSw0QkFBVzthQWF4QjtZQUNDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMxQixDQUFDO1FBbEJEOztXQUVHO2FBQ0gsVUFBeUIsV0FBb0I7WUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFpQkQ7OztPQUdHO0lBQ0gsc0JBQVEsR0FBUjtRQUNDLElBQUksSUFBSSxDQUFDLE9BQU8sWUFBWSxXQUFXLEVBQUU7WUFDeEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztTQUM5QjtJQUNGLENBQUM7SUFFRDs7T0FFRztJQUNILHNCQUFRLEdBQVI7UUFDQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7TUFFRTtJQUNGLDBCQUFZLEdBQVo7UUFDQyxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDOztnQkEvRkQsU0FBUyxTQUFDO29CQUNWLFFBQVEsRUFBRSxTQUFTO29CQUNuQixRQUFRLEVBQUUscVFBU1Q7aUJBQ0Q7OzswQkFXQyxLQUFLO3dCQU9MLEtBQUs7MEJBSUwsS0FBSzt5QkFLTCxLQUFLOzJCQUlMLEtBQUs7MkJBRUwsS0FBSztxQkFLTCxLQUFLOzhCQUlMLEtBQUs7MkJBTUwsTUFBTTs0QkFLTixXQUFXLFNBQUMsU0FBUzs7SUErQnZCLFVBQUM7Q0FBQSxBQWhHRCxJQWdHQztTQW5GWSxHQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRPbkluaXQsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdEV2ZW50RW1pdHRlcixcblx0Q29udGVudENoaWxkLFxuXHRUZW1wbGF0ZVJlZixcblx0SG9zdEJpbmRpbmdcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuXG5sZXQgbmV4dElkID0gMDtcblxuLyoqXG4qIFRoZSBgVGFiYCBjb21wb25lbnQgaXMgYSBjaGlsZCBvZiB0aGUgYFRhYnNgIGNvbXBvbmVudC5cbiogSXQgcmVwcmVzZW50cyBvbmUgYFRhYmAgaXRlbSBhbmQgaXRzIGNvbnRlbnQgd2l0aGluIGEgcGFuZWwgb2Ygb3RoZXIgYFRhYmAgaXRlbXMuXG4qXG4qXG4qIGBUYWJgIHRha2VzIGEgc3RyaW5nIG9yIGBUZW1wbGF0ZVJlZmAgZm9yIHRoZSBoZWFkZXIsIGFuZCBhbnkgY29udGVudCBmb3IgdGhlIGJvZHkgb2YgdGhlIHRhYi5cbiogRGlzYWJsZWQgc3RhdGVzIHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoZSBhcHBsaWNhdGlvbiAoaWUuIHN3aXRjaCB0byB0aGUgdGFiLCBidXQgZGlzcGxheSBzb21lXG4qIGluZGljYXRpb24gYXMgdG8gX3doeV8gdGhlIHRhYiBpcyBkaXNhYmxlZCkuXG4qXG4qIFdoZW4gdGhlIHRhYiBpcyBzZWxlY3RlZCB0aGUgYHNlbGVjdGAgb3V0cHV0IHdpbGwgYmUgdHJpZ2dlcmVkLlxuKiBUaGUgYHNlbGVjdGAgb3V0cHV0IHdpbGwgYWxzbyBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBhY3RpdmUgdGFiIHdoZW4gdGhlIHRhYnMgYXJlIGxvYWRlZCBvciB1cGRhdGVkLlxuKlxuKlxuKiBUYWIgd2l0aCBzdHJpbmcgaGVhZGVyOlxuKlxuKiBgYGBodG1sXG4qIDxpYm0tdGFiIGhlYWRpbmc9J3RhYjEnPlxuKiBcdHRhYiAxIGNvbnRlbnRcbiogPC9pYm0tdGFiPlxuKiBgYGBcbipcbiogVGFiIHdpdGggY3VzdG9tIGhlYWRlcjpcbipcbiogYGBgaHRtbFxuKiA8bmctdGVtcGxhdGUgI3RhYkhlYWRpbmc+XG4qIFx0PHN2ZyBpYm1JY29uPVwiZmFjZWJvb2tcIlxuKiBcdFx0c2l6ZT1cInNtXCJcbiogXHRcdHN0eWxlPVwibWFyZ2luLXJpZ2h0OiA3cHg7XCI+XG4qIFx0PC9zdmc+XG4qIFx0SGVsbG8gVGFiIDFcbiogPC9uZy10ZW1wbGF0ZT5cbiogPGlibS10YWJzPlxuKiBcdDxpYm0tdGFiIFtoZWFkaW5nXT1cInRhYkhlYWRpbmdcIj5cbiogXHRcdFRhYiAxIGNvbnRlbnQgPHN2ZyBpYm1JY29uPVwiYWxlcnRcIiBzaXplPVwibGdcIj48L3N2Zz5cbiogXHQ8L2libS10YWI+XG4qIFx0PGlibS10YWIgaGVhZGluZz0nVGFiMic+XG4qIFx0XHRUYWIgMiBjb250ZW50XG4qIFx0PC9pYm0tdGFiPlxuKiBcdDxpYm0tdGFiIGhlYWRpbmc9J1RhYjMnPlxuKiBcdFx0VGFiIDMgY29udGVudFxuKiBcdDwvaWJtLXRhYj5cbiogPC9pYm0tdGFicz5cbiogYGBgXG4qL1xuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiBcImlibS10YWJcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8ZGl2XG5cdFx0XHRbYXR0ci50YWJpbmRleF09XCJ0YWJJbmRleFwiXG5cdFx0XHRyb2xlPVwidGFicGFuZWxcIlxuXHRcdFx0Km5nSWY9XCJzaG91bGRSZW5kZXIoKVwiXG5cdFx0XHRbbmdTdHlsZV09XCJ7J2Rpc3BsYXknOiBhY3RpdmUgPyBudWxsIDogJ25vbmUnfVwiXG5cdFx0XHRbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiaWQgKyAnLWhlYWRlcidcIj5cblx0XHRcdDxuZy1jb250ZW50PjwvbmctY29udGVudD5cblx0XHQ8L2Rpdj5cblx0YFxufSlcbmV4cG9ydCBjbGFzcyBUYWIgaW1wbGVtZW50cyBPbkluaXQge1xuXHQvKipcblx0ICogQm9vbGVhbiB2YWx1ZSByZWZsZWN0cyBpZiB0aGUgYFRhYmAgaXMgdXNpbmcgYSBjdXN0b20gdGVtcGxhdGUgZm9yIHRoZSBoZWFkaW5nLlxuXHQgKiBEZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuXHQgKi9cblx0cHVibGljIGhlYWRpbmdJc1RlbXBsYXRlID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFRoZSBgVGFiYCdzIHRpdGxlIHRvIGJlIGRpc3BsYXllZCBvciBjdXN0b20gdGVtYXBsYXRlIGZvciB0aGUgYFRhYmAgaGVhZGluZy5cblx0ICovXG5cdEBJbnB1dCgpIGhlYWRpbmc6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG5cdC8qKlxuXHQgKiBPcHRpb25hbCBvdmVycmlkZSBmb3IgdGhlIGB0YWJJdGVtJ3NgJ3MgdGl0bGUgYXR0cmlidXRlIHdoaWNoIGlzIHNldCBpbiBgVGFiSGVhZGVyc2AuXG5cdCAqIGB0YWJJdGVtYCdzIHRpdGxlIGF0dHJpYnV0ZSBpcyBhdXRvbWF0aWNhbGx5IHNldCB0byBgaGVhZGluZ2AuXG5cdCAqXG5cdCAqIFlvdSBtaWdodCB3YW50IHRvIHVzZSB0aGlzIGlmIHlvdSBzZXQgYGhlYWRpbmdgIHRvIGEgYFRlbXBsYXRlUmVmYC5cblx0ICovXG5cdEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBBbGxvd3MgdGhlIHVzZXIgdG8gcGFzcyBkYXRhIHRvIHRoZSBjdXN0b20gdGVtcGxhdGUgZm9yIHRoZSBgVGFiYCBoZWFkaW5nLlxuXHQgKi9cblx0QElucHV0KCkgY29udGV4dDogYW55O1xuXHQvKipcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGBUYWJgIGlzIGFjdGl2ZS9zZWxlY3RlZC5cblx0ICogRGV0ZXJtaW5lcyB3aGV0aGVyIGl0J3MgYFRhYlBhbmVsYCBpcyByZW5kZXJlZC5cblx0ICovXG5cdEBJbnB1dCgpIGFjdGl2ZSA9IGZhbHNlO1xuXHQvKipcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBgVGFiYCBpdGVtIGlzIGRpc2FibGVkLlxuXHQgKi9cblx0QElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcblxuXHRASW5wdXQoKSB0YWJJbmRleCA9IDA7XG5cdC8vIGRvIHdlIG5lZWQgaWQncz9cblx0LyoqXG5cdCAqIFNldHMgdGhlIGlkIG9mIHRoZSBgVGFiYC4gV2lsbCBiZSB1bmlxdWVseSBnZW5lcmF0ZWQgaWYgbm90IHByb3ZpZGVkLlxuXHQgKi9cblx0QElucHV0KCkgaWQgPSBgbi10YWItJHtuZXh0SWQrK31gO1xuXHQvKipcblx0ICogU2V0IHRvIHRydWUgdG8gaGF2ZSBUYWIgaXRlbXMgY2FjaGVkIGFuZCBub3QgcmVsb2FkZWQgb24gdGFiIHN3aXRjaGluZy5cblx0ICovXG5cdEBJbnB1dCgpIHNldCBjYWNoZUFjdGl2ZShzaG91bGRDYWNoZTogYm9vbGVhbikge1xuXHRcdHRoaXMuX2NhY2hlQWN0aXZlID0gc2hvdWxkQ2FjaGU7XG5cdH1cblx0LyoqXG5cdCAqIFZhbHVlICdzZWxlY3RlZCcgdG8gYmUgZW1pdHRlZCBhZnRlciBhIG5ldyBgVGFiYCBpcyBzZWxlY3RlZC5cblx0ICovXG5cdEBPdXRwdXQoKSBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIHNldCB0aGUgaWQgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQuXG5cdCAqL1xuXHRASG9zdEJpbmRpbmcoXCJhdHRyLmlkXCIpIGF0dHJDbGFzcyA9IHRoaXMuaWQ7XG5cblx0Z2V0IGNhY2hlQWN0aXZlKCkge1xuXHRcdHJldHVybiB0aGlzLl9jYWNoZUFjdGl2ZTtcblx0fVxuXG5cdHByb3RlY3RlZCBfY2FjaGVBY3RpdmUgPSBmYWxzZTtcblxuXHQvKipcblx0ICogQ2hlY2tzIGZvciBjdXN0b20gaGVhZGluZyB0ZW1wbGF0ZSBvbiBpbml0aWFsaXphdGlvbiBhbmQgdXBkYXRlcyB0aGUgdmFsdWVcblx0ICogb2YgdGhlIGJvb2xlYW4gJ2hlYWRpbmdJc1RlbXBsYXRlJy5cblx0ICovXG5cdG5nT25Jbml0KCkge1xuXHRcdGlmICh0aGlzLmhlYWRpbmcgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xuXHRcdFx0dGhpcy5oZWFkaW5nSXNUZW1wbGF0ZSA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEVtaXQgdGhlIHN0YXR1cyBvZiB0aGUgYFRhYmAsIHNwZWNpZmljYWxseSAnc2VsZWN0JyBhbmQgJ3NlbGVjdGVkJyBwcm9wZXJ0aWVzLlxuXHQgKi9cblx0ZG9TZWxlY3QoKSB7XG5cdFx0dGhpcy5zZWxlY3RlZC5lbWl0KCk7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGlzIGBUYWJgIHNob3VsZCBiZSByZW5kZXJlZCBpbiBhIGBUYWJQYW5lbGAuXG5cdCovXG5cdHNob3VsZFJlbmRlcigpIHtcblx0XHRyZXR1cm4gdGhpcy5hY3RpdmUgfHwgdGhpcy5jYWNoZUFjdGl2ZTtcblx0fVxufVxuIl19