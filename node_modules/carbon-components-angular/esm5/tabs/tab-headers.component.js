/**
 *
 * carbon-angular v0.0.0 | tab-headers.component.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import { Component, QueryList, Input, HostListener, ViewChild, ContentChildren, ViewChildren, ElementRef, TemplateRef } from "@angular/core";
import { Tab } from "./tab.component";
/**
 * The `TabHeaders` component contains the `Tab` items and controls scroll functionality
 * if content has overflow.
 */
var TabHeaders = /** @class */ (function () {
    function TabHeaders(elementRef) {
        this.elementRef = elementRef;
        /**
         * Set to 'true' to have `Tab` items cached and not reloaded on tab switching.
         * Duplicate from `n-tabs` to support standalone headers
         */
        this.cacheActive = false;
        /**
         * Set to `true` to put tabs in a loading state.
         */
        this.skeleton = false;
        this.type = "default";
        /**
         * The index of the first visible tab.
         */
        this.firstVisibleTab = 0;
        this.tabListVisible = false;
    }
    // keyboard accessibility
    /**
     * Controls the keydown events used for tabbing through the headings.
     */
    TabHeaders.prototype.keyboardInput = function (event) {
        var tabsArray = Array.from(this.tabs);
        // "Right" is an ie11 specific value
        if (event.key === "Right" || event.key === "ArrowRight") {
            if (this.currentSelectedTab < this.allTabHeaders.length - 1) {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.currentSelectedTab + 1], this.currentSelectedTab);
                }
                this.allTabHeaders.toArray()[this.currentSelectedTab + 1].nativeElement.focus();
            }
            else {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[0], 0);
                }
                this.allTabHeaders.first.nativeElement.focus();
            }
        }
        // "Left" is an ie11 specific value
        if (event.key === "Left" || event.key === "ArrowLeft") {
            if (this.currentSelectedTab > 0) {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.currentSelectedTab - 1], this.currentSelectedTab);
                }
                this.allTabHeaders.toArray()[this.currentSelectedTab - 1].nativeElement.focus();
            }
            else {
                event.preventDefault();
                if (this.followFocus) {
                    this.selectTab(event.target, tabsArray[this.allTabHeaders.length - 1], this.allTabHeaders.length);
                }
                this.allTabHeaders.toArray()[this.allTabHeaders.length - 1].nativeElement.focus();
            }
        }
        if (event.key === "Home") {
            event.preventDefault();
            if (this.followFocus) {
                this.selectTab(event.target, tabsArray[0], 0);
            }
            this.allTabHeaders.toArray()[0].nativeElement.focus();
        }
        if (event.key === "End") {
            event.preventDefault();
            if (this.followFocus) {
                this.selectTab(event.target, tabsArray[this.allTabHeaders.length - 1], this.allTabHeaders.length);
            }
            this.allTabHeaders.toArray()[this.allTabHeaders.length - 1].nativeElement.focus();
        }
        // `"Spacebar"` is IE11 specific value
        if ((event.key === " " || event.key === "Spacebar") && !this.followFocus) {
            this.selectTab(event.target, tabsArray[this.currentSelectedTab], this.currentSelectedTab);
        }
        // dropdown list handler
        if (event.key === "Escape") {
            this.hideTabList();
        }
    };
    TabHeaders.prototype.focusOut = function (event) {
        if (this.tabListVisible && !this.elementRef.nativeElement.contains(event.relatedTarget)) {
            this.tabListVisible = false;
        }
    };
    TabHeaders.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.tabInput) {
            this.tabs = this.tabQuery;
        }
        else {
            this.tabs = this.tabInput;
        }
        this.tabs.forEach(function (tab) { return tab.cacheActive = _this.cacheActive; });
        this.tabs.changes.subscribe(function () {
            _this.setFirstTab();
        });
        this.setFirstTab();
    };
    TabHeaders.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.tabs && changes.cacheActive) {
            this.tabs.forEach(function (tab) { return tab.cacheActive = _this.cacheActive; });
        }
    };
    /**
     * Controls manually focusing tabs.
     */
    TabHeaders.prototype.onTabFocus = function (ref, index) {
        if (this.tabListVisible) {
            return;
        }
        this.currentSelectedTab = index;
        // reset scroll left because we're already handling it
        this.headerContainer.nativeElement.parentElement.scrollLeft = 0;
    };
    TabHeaders.prototype.getSelectedTab = function () {
        var selected = this.tabs.find(function (tab) { return tab.active; });
        if (selected) {
            return selected;
        }
        return { headingIsTemplate: false, heading: "" };
    };
    TabHeaders.prototype.showTabList = function () {
        this.tabListVisible = true;
        var focusTarget = this.allTabHeaders.find(function (tab) {
            var tabContainer = tab.nativeElement.parentElement;
            return !tabContainer.classList.contains("bx--tabs__nav-item--selected");
        });
        focusTarget.nativeElement.focus();
    };
    TabHeaders.prototype.hideTabList = function () {
        this.tabListVisible = false;
    };
    TabHeaders.prototype.onDropdownKeydown = function (event) {
        switch (event.key) {
            case " ":
            case "Spacebar":
            case "Enter":
                event.preventDefault();
                this.showTabList();
                break;
            default:
                break;
        }
    };
    TabHeaders.prototype.tabDropdownKeydown = function (event) {
        if (!this.tabListVisible) {
            return;
        }
        var target = event.target.closest("a");
        var headers = this.allTabHeaders.toArray().filter(function (tab) {
            return !tab.nativeElement.parentElement.classList.contains("bx--tabs__nav-item--disabled") &&
                !tab.nativeElement.parentElement.classList.contains("bx--tabs__nav-item--selected");
        });
        // unless the focus can move, it should remain on the target
        var next = target;
        var previous = target;
        for (var i = 0; i < headers.length; i++) {
            if (headers[i].nativeElement === target) {
                if (i + 1 < headers.length) {
                    next = headers[i + 1].nativeElement;
                }
                if (i - 1 >= 0) {
                    previous = headers[i - 1].nativeElement;
                }
            }
        }
        switch (event.key) {
            case "ArrowDown":
            case "Down": // IE11 specific value
                next.focus();
                break;
            case "ArrowUp":
            case "Up": // IE11 specific value
                previous.focus();
                break;
            default:
                break;
        }
    };
    /**
     * Selects `Tab` 'tab' and moves it into view on the view DOM if it is not already.
     */
    TabHeaders.prototype.selectTab = function (ref, tab, tabIndex) {
        if (tab.disabled) {
            return;
        }
        // hide the tablist on mobile
        this.tabListVisible = false;
        this.currentSelectedTab = tabIndex;
        this.tabs.forEach(function (_tab) { return _tab.active = false; });
        tab.active = true;
        tab.doSelect();
    };
    /**
     * Determines which `Tab` is initially selected.
     */
    TabHeaders.prototype.setFirstTab = function () {
        var _this = this;
        setTimeout(function () {
            var firstTab = _this.tabs.find(function (tab) { return tab.active; });
            if (!firstTab && _this.tabs.first) {
                firstTab = _this.tabs.first;
                firstTab.active = true;
            }
            if (firstTab) {
                firstTab.doSelect();
            }
        });
    };
    TabHeaders.decorators = [
        { type: Component, args: [{
                    selector: "ibm-tab-headers",
                    template: "\n\t\t<nav\n\t\t\tclass=\"bx--tabs\"\n\t\t\t[ngClass]=\"{\n\t\t\t\t'bx--skeleton': skeleton,\n\t\t\t\t'bx--tabs--container': type === 'container'\n\t\t\t}\"\n\t\t\trole=\"navigation\"\n\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\">\n\t\t\t<div\n\t\t\t\tclass=\"bx--tabs-trigger\"\n\t\t\t\ttabindex=\"0\"\n\t\t\t\t(click)=\"showTabList()\"\n\t\t\t\t(keydown)=\"onDropdownKeydown($event)\">\n\t\t\t\t<a\n\t\t\t\t\thref=\"#\"\n\t\t\t\t\t(click)=\"$event.preventDefault()\"\n\t\t\t\t\tclass=\"bx--tabs-trigger-text\"\n\t\t\t\t\ttabindex=\"-1\">\n\t\t\t\t\t<ng-container *ngIf=\"!getSelectedTab().headingIsTemplate\">\n\t\t\t\t\t\t{{ getSelectedTab().heading }}\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-template\n\t\t\t\t\t\t*ngIf=\"getSelectedTab().headingIsTemplate\"\n\t\t\t\t\t\t[ngTemplateOutlet]=\"getSelectedTab().heading\"\n\t\t\t\t\t\t[ngTemplateOutletContext]=\"{$implicit: getSelectedTab().context}\">\n\t\t\t\t\t</ng-template>\n\t\t\t\t</a>\n\t\t\t\t<svg width=\"10\" height=\"5\" viewBox=\"0 0 10 5\">\n\t\t\t\t\t<path d=\"M0 0l5 4.998L10 0z\" fill-rule=\"evenodd\"></path>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t<ul\n\t\t\t\t#tabList\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--tabs__nav--hidden': !tabListVisible\n\t\t\t\t}\"\n\t\t\t\tclass=\"bx--tabs__nav\"\n\t\t\t\trole=\"tablist\">\n\t\t\t\t<li role=\"presentation\">\n\t\t\t\t\t<ng-container *ngIf=\"contentBefore\" [ngTemplateOutlet]=\"contentBefore\"></ng-container>\n\t\t\t\t</li>\n\t\t\t\t<li\n\t\t\t\t\t*ngFor=\"let tab of tabs; let i = index;\"\n\t\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t\t'bx--tabs__nav-item--selected': tab.active,\n\t\t\t\t\t\t'bx--tabs__nav-item--disabled': tab.disabled\n\t\t\t\t\t}\"\n\t\t\t\t\tclass=\"bx--tabs__nav-item\"\n\t\t\t\t\trole=\"presentation\"\n\t\t\t\t\t(click)=\"selectTab(tabItem, tab, i)\"\n\t\t\t\t\t(keydown)=\"tabDropdownKeydown($event)\">\n\t\t\t\t\t<a\n\t\t\t\t\t\t#tabItem\n\t\t\t\t\t\t[attr.aria-selected]=\"tab.active\"\n\t\t\t\t\t\t[attr.tabindex]=\"(tab.active?0:-1)\"\n\t\t\t\t\t\t[attr.aria-controls]=\"tab.id\"\n\t\t\t\t\t\t[attr.aria-disabled]=\"tab.disabled\"\n\t\t\t\t\t\t(focus)=\"onTabFocus(tabItem, i)\"\n\t\t\t\t\t\t(click)=\"$event.preventDefault()\"\n\t\t\t\t\t\tdraggable=\"false\"\n\t\t\t\t\t\tid=\"{{tab.id}}-header\"\n\t\t\t\t\t\tclass=\"bx--tabs__nav-link\"\n\t\t\t\t\t\t[title]=\"tab.title ? tab.title : tab.heading\"\n\t\t\t\t\t\thref=\"#\"\n\t\t\t\t\t\trole=\"tab\">\n\t\t\t\t\t\t<ng-container *ngIf=\"!tab.headingIsTemplate\">\n\t\t\t\t\t\t\t{{ tab.heading }}\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t<ng-template\n\t\t\t\t\t\t\t*ngIf=\"tab.headingIsTemplate\"\n\t\t\t\t\t\t\t[ngTemplateOutlet]=\"tab.heading\"\n\t\t\t\t\t\t\t[ngTemplateOutletContext]=\"{$implicit: tab.context}\">\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li role=\"presentation\">\n\t\t\t\t\t<ng-container *ngIf=\"contentAfter\" [ngTemplateOutlet]=\"contentAfter\"></ng-container>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</nav>\n\t"
                }] }
    ];
    /** @nocollapse */
    TabHeaders.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    TabHeaders.propDecorators = {
        tabInput: [{ type: Input, args: ["tabs",] }],
        cacheActive: [{ type: Input }],
        followFocus: [{ type: Input }],
        skeleton: [{ type: Input }],
        ariaLabel: [{ type: Input }],
        ariaLabelledby: [{ type: Input }],
        contentBefore: [{ type: Input }],
        contentAfter: [{ type: Input }],
        type: [{ type: Input }],
        headerContainer: [{ type: ViewChild, args: ["tabList", { static: true },] }],
        tabQuery: [{ type: ContentChildren, args: [Tab,] }],
        allTabHeaders: [{ type: ViewChildren, args: ["tabItem",] }],
        keyboardInput: [{ type: HostListener, args: ["keydown", ["$event"],] }],
        focusOut: [{ type: HostListener, args: ["focusout", ["$event"],] }]
    };
    return TabHeaders;
}());
export { TabHeaders };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWhlYWRlcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2FyYm9uLWNvbXBvbmVudHMtYW5ndWxhci90YWJzLyIsInNvdXJjZXMiOlsidGFiLWhlYWRlcnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULEtBQUssRUFDTCxZQUFZLEVBQ1osU0FBUyxFQUNULGVBQWUsRUFFZixZQUFZLEVBQ1osVUFBVSxFQUNWLFdBQVcsRUFHWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHdEM7OztHQUdHO0FBQ0g7SUFvSkMsb0JBQXNCLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUF0RDVDOzs7V0FHRztRQUNNLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBSzdCOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQWFqQixTQUFJLEdBQTRCLFNBQVMsQ0FBQztRQWVuRDs7V0FFRztRQUNJLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBU3BCLG1CQUFjLEdBQUcsS0FBSyxDQUFDO0lBRWlCLENBQUM7SUFFaEQseUJBQXlCO0lBQ3pCOztPQUVHO0lBRUgsa0NBQWEsR0FEYixVQUNjLEtBQUs7UUFDbEIsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFM0Msb0NBQW9DO1FBQ3BDLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxZQUFZLEVBQUU7WUFDeEQsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM1RCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksSUFBSSxDQUFDLFdBQVcs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QUMsVUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDOztJQTJJckMsaUJBQUM7Q0FBQSxBQXRXRCxJQXNXQztTQS9RWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRRdWVyeUxpc3QsXG5cdElucHV0LFxuXHRIb3N0TGlzdGVuZXIsXG5cdFZpZXdDaGlsZCxcblx0Q29udGVudENoaWxkcmVuLFxuXHRBZnRlckNvbnRlbnRJbml0LFxuXHRWaWV3Q2hpbGRyZW4sXG5cdEVsZW1lbnRSZWYsXG5cdFRlbXBsYXRlUmVmLFxuXHRPbkNoYW5nZXMsXG5cdFNpbXBsZUNoYW5nZXNcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgVGFiIH0gZnJvbSBcIi4vdGFiLmNvbXBvbmVudFwiO1xuXG5cbi8qKlxuICogVGhlIGBUYWJIZWFkZXJzYCBjb21wb25lbnQgY29udGFpbnMgdGhlIGBUYWJgIGl0ZW1zIGFuZCBjb250cm9scyBzY3JvbGwgZnVuY3Rpb25hbGl0eVxuICogaWYgY29udGVudCBoYXMgb3ZlcmZsb3cuXG4gKi9cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogXCJpYm0tdGFiLWhlYWRlcnNcIixcblx0dGVtcGxhdGU6IGBcblx0XHQ8bmF2XG5cdFx0XHRjbGFzcz1cImJ4LS10YWJzXCJcblx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0J2J4LS1za2VsZXRvbic6IHNrZWxldG9uLFxuXHRcdFx0XHQnYngtLXRhYnMtLWNvbnRhaW5lcic6IHR5cGUgPT09ICdjb250YWluZXInXG5cdFx0XHR9XCJcblx0XHRcdHJvbGU9XCJuYXZpZ2F0aW9uXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcblx0XHRcdFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiPlxuXHRcdFx0PGRpdlxuXHRcdFx0XHRjbGFzcz1cImJ4LS10YWJzLXRyaWdnZXJcIlxuXHRcdFx0XHR0YWJpbmRleD1cIjBcIlxuXHRcdFx0XHQoY2xpY2spPVwic2hvd1RhYkxpc3QoKVwiXG5cdFx0XHRcdChrZXlkb3duKT1cIm9uRHJvcGRvd25LZXlkb3duKCRldmVudClcIj5cblx0XHRcdFx0PGFcblx0XHRcdFx0XHRocmVmPVwiI1wiXG5cdFx0XHRcdFx0KGNsaWNrKT1cIiRldmVudC5wcmV2ZW50RGVmYXVsdCgpXCJcblx0XHRcdFx0XHRjbGFzcz1cImJ4LS10YWJzLXRyaWdnZXItdGV4dFwiXG5cdFx0XHRcdFx0dGFiaW5kZXg9XCItMVwiPlxuXHRcdFx0XHRcdDxuZy1jb250YWluZXIgKm5nSWY9XCIhZ2V0U2VsZWN0ZWRUYWIoKS5oZWFkaW5nSXNUZW1wbGF0ZVwiPlxuXHRcdFx0XHRcdFx0e3sgZ2V0U2VsZWN0ZWRUYWIoKS5oZWFkaW5nIH19XG5cdFx0XHRcdFx0PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdFx0PG5nLXRlbXBsYXRlXG5cdFx0XHRcdFx0XHQqbmdJZj1cImdldFNlbGVjdGVkVGFiKCkuaGVhZGluZ0lzVGVtcGxhdGVcIlxuXHRcdFx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwiZ2V0U2VsZWN0ZWRUYWIoKS5oZWFkaW5nXCJcblx0XHRcdFx0XHRcdFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBnZXRTZWxlY3RlZFRhYigpLmNvbnRleHR9XCI+XG5cdFx0XHRcdFx0PC9uZy10ZW1wbGF0ZT5cblx0XHRcdFx0PC9hPlxuXHRcdFx0XHQ8c3ZnIHdpZHRoPVwiMTBcIiBoZWlnaHQ9XCI1XCIgdmlld0JveD1cIjAgMCAxMCA1XCI+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk0wIDBsNSA0Ljk5OEwxMCAwelwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIj48L3BhdGg+XG5cdFx0XHRcdDwvc3ZnPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8dWxcblx0XHRcdFx0I3RhYkxpc3Rcblx0XHRcdFx0W25nQ2xhc3NdPVwie1xuXHRcdFx0XHRcdCdieC0tdGFic19fbmF2LS1oaWRkZW4nOiAhdGFiTGlzdFZpc2libGVcblx0XHRcdFx0fVwiXG5cdFx0XHRcdGNsYXNzPVwiYngtLXRhYnNfX25hdlwiXG5cdFx0XHRcdHJvbGU9XCJ0YWJsaXN0XCI+XG5cdFx0XHRcdDxsaSByb2xlPVwicHJlc2VudGF0aW9uXCI+XG5cdFx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cImNvbnRlbnRCZWZvcmVcIiBbbmdUZW1wbGF0ZU91dGxldF09XCJjb250ZW50QmVmb3JlXCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdDwvbGk+XG5cdFx0XHRcdDxsaVxuXHRcdFx0XHRcdCpuZ0Zvcj1cImxldCB0YWIgb2YgdGFiczsgbGV0IGkgPSBpbmRleDtcIlxuXHRcdFx0XHRcdFtuZ0NsYXNzXT1cIntcblx0XHRcdFx0XHRcdCdieC0tdGFic19fbmF2LWl0ZW0tLXNlbGVjdGVkJzogdGFiLmFjdGl2ZSxcblx0XHRcdFx0XHRcdCdieC0tdGFic19fbmF2LWl0ZW0tLWRpc2FibGVkJzogdGFiLmRpc2FibGVkXG5cdFx0XHRcdFx0fVwiXG5cdFx0XHRcdFx0Y2xhc3M9XCJieC0tdGFic19fbmF2LWl0ZW1cIlxuXHRcdFx0XHRcdHJvbGU9XCJwcmVzZW50YXRpb25cIlxuXHRcdFx0XHRcdChjbGljayk9XCJzZWxlY3RUYWIodGFiSXRlbSwgdGFiLCBpKVwiXG5cdFx0XHRcdFx0KGtleWRvd24pPVwidGFiRHJvcGRvd25LZXlkb3duKCRldmVudClcIj5cblx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0I3RhYkl0ZW1cblx0XHRcdFx0XHRcdFthdHRyLmFyaWEtc2VsZWN0ZWRdPVwidGFiLmFjdGl2ZVwiXG5cdFx0XHRcdFx0XHRbYXR0ci50YWJpbmRleF09XCIodGFiLmFjdGl2ZT8wOi0xKVwiXG5cdFx0XHRcdFx0XHRbYXR0ci5hcmlhLWNvbnRyb2xzXT1cInRhYi5pZFwiXG5cdFx0XHRcdFx0XHRbYXR0ci5hcmlhLWRpc2FibGVkXT1cInRhYi5kaXNhYmxlZFwiXG5cdFx0XHRcdFx0XHQoZm9jdXMpPVwib25UYWJGb2N1cyh0YWJJdGVtLCBpKVwiXG5cdFx0XHRcdFx0XHQoY2xpY2spPVwiJGV2ZW50LnByZXZlbnREZWZhdWx0KClcIlxuXHRcdFx0XHRcdFx0ZHJhZ2dhYmxlPVwiZmFsc2VcIlxuXHRcdFx0XHRcdFx0aWQ9XCJ7e3RhYi5pZH19LWhlYWRlclwiXG5cdFx0XHRcdFx0XHRjbGFzcz1cImJ4LS10YWJzX19uYXYtbGlua1wiXG5cdFx0XHRcdFx0XHRbdGl0bGVdPVwidGFiLnRpdGxlID8gdGFiLnRpdGxlIDogdGFiLmhlYWRpbmdcIlxuXHRcdFx0XHRcdFx0aHJlZj1cIiNcIlxuXHRcdFx0XHRcdFx0cm9sZT1cInRhYlwiPlxuXHRcdFx0XHRcdFx0PG5nLWNvbnRhaW5lciAqbmdJZj1cIiF0YWIuaGVhZGluZ0lzVGVtcGxhdGVcIj5cblx0XHRcdFx0XHRcdFx0e3sgdGFiLmhlYWRpbmcgfX1cblx0XHRcdFx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdFx0XHRcdFx0PG5nLXRlbXBsYXRlXG5cdFx0XHRcdFx0XHRcdCpuZ0lmPVwidGFiLmhlYWRpbmdJc1RlbXBsYXRlXCJcblx0XHRcdFx0XHRcdFx0W25nVGVtcGxhdGVPdXRsZXRdPVwidGFiLmhlYWRpbmdcIlxuXHRcdFx0XHRcdFx0XHRbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwieyRpbXBsaWNpdDogdGFiLmNvbnRleHR9XCI+XG5cdFx0XHRcdFx0XHQ8L25nLXRlbXBsYXRlPlxuXHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0PC9saT5cblx0XHRcdFx0PGxpIHJvbGU9XCJwcmVzZW50YXRpb25cIj5cblx0XHRcdFx0XHQ8bmctY29udGFpbmVyICpuZ0lmPVwiY29udGVudEFmdGVyXCIgW25nVGVtcGxhdGVPdXRsZXRdPVwiY29udGVudEFmdGVyXCI+PC9uZy1jb250YWluZXI+XG5cdFx0XHRcdDwvbGk+XG5cdFx0XHQ8L3VsPlxuXHRcdDwvbmF2PlxuXHRgXG59KVxuXG5leHBvcnQgY2xhc3MgVGFiSGVhZGVycyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uQ2hhbmdlcyB7XG5cdC8qKlxuXHQgKiBMaXN0IG9mIGBUYWJgIGNvbXBvbmVudHMuXG5cdCAqL1xuXHQvLyBkaXNhYmxlIHRoZSBuZXh0IGxpbmUgYmVjYXVzZSB3ZSBuZWVkIHRvIHJlbmFtZSB0aGUgaW5wdXRcblx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5cdEBJbnB1dChcInRhYnNcIikgdGFiSW5wdXQ6IFF1ZXJ5TGlzdDxUYWI+O1xuXHQvKipcblx0ICogU2V0IHRvICd0cnVlJyB0byBoYXZlIGBUYWJgIGl0ZW1zIGNhY2hlZCBhbmQgbm90IHJlbG9hZGVkIG9uIHRhYiBzd2l0Y2hpbmcuXG5cdCAqIER1cGxpY2F0ZSBmcm9tIGBuLXRhYnNgIHRvIHN1cHBvcnQgc3RhbmRhbG9uZSBoZWFkZXJzXG5cdCAqL1xuXHRASW5wdXQoKSBjYWNoZUFjdGl2ZSA9IGZhbHNlO1xuXHQvKipcblx0ICogU2V0IHRvICd0cnVlJyB0byBoYXZlIHRhYnMgYXV0b21hdGljYWxseSBhY3RpdmF0ZWQgYW5kIGhhdmUgdGhlaXIgY29udGVudCBkaXNwbGF5ZWQgd2hlbiB0aGV5IHJlY2VpdmUgZm9jdXMuXG5cdCAqL1xuXHRASW5wdXQoKSBmb2xsb3dGb2N1czogYm9vbGVhbjtcblx0LyoqXG5cdCAqIFNldCB0byBgdHJ1ZWAgdG8gcHV0IHRhYnMgaW4gYSBsb2FkaW5nIHN0YXRlLlxuXHQgKi9cblx0QElucHV0KCkgc2tlbGV0b24gPSBmYWxzZTtcblx0LyoqXG5cdCAqIFNldHMgdGhlIGFyaWEgbGFiZWwgb24gdGhlIG5hdiBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBhcmlhIGxhYmVsbGVkYnkgb24gdGhlIG5hdiBlbGVtZW50LlxuXHQgKi9cblx0QElucHV0KCkgYXJpYUxhYmVsbGVkYnk6IHN0cmluZztcblxuXHRASW5wdXQoKSBjb250ZW50QmVmb3JlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXHRASW5wdXQoKSBjb250ZW50QWZ0ZXI6IFRlbXBsYXRlUmVmPGFueT47XG5cblx0QElucHV0KCkgdHlwZTogXCJkZWZhdWx0XCIgfCBcImNvbnRhaW5lclwiID0gXCJkZWZhdWx0XCI7XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIFVub3JkZXJlZCBMaXN0IGVsZW1lbnQgdGhhdCBob2xkcyB0aGUgYFRhYmAgaGVhZGluZ3MgZnJvbSB0aGUgdmlldyBET00uXG5cdCAqL1xuXHQvLyBAdHMtaWdub3JlXG5cdEBWaWV3Q2hpbGQoXCJ0YWJMaXN0XCIsIHsgc3RhdGljOiB0cnVlIH0pIGhlYWRlckNvbnRhaW5lcjtcblx0LyoqXG5cdCAqIENvbnRlbnRDaGlsZCBvZiBhbGwgdGhlIG4tdGFic1xuXHQgKi9cblx0QENvbnRlbnRDaGlsZHJlbihUYWIpIHRhYlF1ZXJ5OiBRdWVyeUxpc3Q8VGFiPjtcblx0LyoqXG5cdCAqIHNldCB0byB0YWJRdWVyeSBpZiB0YWJJbnB1dCBpcyBlbXB0eVxuXHQgKi9cblx0cHVibGljIHRhYnM6IFF1ZXJ5TGlzdDxUYWI+O1xuXHQvKipcblx0ICogVGhlIGluZGV4IG9mIHRoZSBmaXJzdCB2aXNpYmxlIHRhYi5cblx0ICovXG5cdHB1YmxpYyBmaXJzdFZpc2libGVUYWIgPSAwO1xuXHQvKipcblx0ICogVGhlIERPTSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIGBUYWJgIGhlYWRpbmdzIGRpc3BsYXllZC5cblx0ICovXG5cdEBWaWV3Q2hpbGRyZW4oXCJ0YWJJdGVtXCIpIGFsbFRhYkhlYWRlcnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcblx0LyoqXG5cdCAqIENvbnRyb2xzIHRoZSBtYW51YWwgZm9jdXNpbmcgZG9uZSBieSB0YWJiaW5nIHRocm91Z2ggaGVhZGluZ3MuXG5cdCAqL1xuXHRwdWJsaWMgY3VycmVudFNlbGVjdGVkVGFiOiBudW1iZXI7XG5cdHB1YmxpYyB0YWJMaXN0VmlzaWJsZSA9IGZhbHNlO1xuXG5cdGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG5cdC8vIGtleWJvYXJkIGFjY2Vzc2liaWxpdHlcblx0LyoqXG5cdCAqIENvbnRyb2xzIHRoZSBrZXlkb3duIGV2ZW50cyB1c2VkIGZvciB0YWJiaW5nIHRocm91Z2ggdGhlIGhlYWRpbmdzLlxuXHQgKi9cblx0QEhvc3RMaXN0ZW5lcihcImtleWRvd25cIiwgW1wiJGV2ZW50XCJdKVxuXHRrZXlib2FyZElucHV0KGV2ZW50KSB7XG5cdFx0bGV0IHRhYnNBcnJheSA9IEFycmF5LmZyb208YW55Pih0aGlzLnRhYnMpO1xuXG5cdFx0Ly8gXCJSaWdodFwiIGlzIGFuIGllMTEgc3BlY2lmaWMgdmFsdWVcblx0XHRpZiAoZXZlbnQua2V5ID09PSBcIlJpZ2h0XCIgfHwgZXZlbnQua2V5ID09PSBcIkFycm93UmlnaHRcIikge1xuXHRcdFx0aWYgKHRoaXMuY3VycmVudFNlbGVjdGVkVGFiIDwgdGhpcy5hbGxUYWJIZWFkZXJzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0aWYgKHRoaXMuZm9sbG93Rm9jdXMpIHtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYiArIDFdLCB0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYik7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5hbGxUYWJIZWFkZXJzLnRvQXJyYXkoKVt0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYiArIDFdLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdGlmICh0aGlzLmZvbGxvd0ZvY3VzKSB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RUYWIoZXZlbnQudGFyZ2V0LCB0YWJzQXJyYXlbMF0sIDApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYWxsVGFiSGVhZGVycy5maXJzdC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gXCJMZWZ0XCIgaXMgYW4gaWUxMSBzcGVjaWZpYyB2YWx1ZVxuXHRcdGlmIChldmVudC5rZXkgPT09IFwiTGVmdFwiIHx8IGV2ZW50LmtleSA9PT0gXCJBcnJvd0xlZnRcIikge1xuXHRcdFx0aWYgKHRoaXMuY3VycmVudFNlbGVjdGVkVGFiID4gMCkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRpZiAodGhpcy5mb2xsb3dGb2N1cykge1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0VGFiKGV2ZW50LnRhcmdldCwgdGFic0FycmF5W3RoaXMuY3VycmVudFNlbGVjdGVkVGFiIC0gMV0sIHRoaXMuY3VycmVudFNlbGVjdGVkVGFiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmFsbFRhYkhlYWRlcnMudG9BcnJheSgpW3RoaXMuY3VycmVudFNlbGVjdGVkVGFiIC0gMV0ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0aWYgKHRoaXMuZm9sbG93Rm9jdXMpIHtcblx0XHRcdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmFsbFRhYkhlYWRlcnMubGVuZ3RoIC0gMV0sIHRoaXMuYWxsVGFiSGVhZGVycy5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYWxsVGFiSGVhZGVycy50b0FycmF5KClbdGhpcy5hbGxUYWJIZWFkZXJzLmxlbmd0aCAtIDFdLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZXZlbnQua2V5ID09PSBcIkhvbWVcIikge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGlmICh0aGlzLmZvbGxvd0ZvY3VzKSB7XG5cdFx0XHRcdHRoaXMuc2VsZWN0VGFiKGV2ZW50LnRhcmdldCwgdGFic0FycmF5WzBdLCAwKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuYWxsVGFiSGVhZGVycy50b0FycmF5KClbMF0ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdH1cblxuXHRcdGlmIChldmVudC5rZXkgPT09IFwiRW5kXCIpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRpZiAodGhpcy5mb2xsb3dGb2N1cykge1xuXHRcdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmFsbFRhYkhlYWRlcnMubGVuZ3RoIC0gMV0sIHRoaXMuYWxsVGFiSGVhZGVycy5sZW5ndGgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5hbGxUYWJIZWFkZXJzLnRvQXJyYXkoKVt0aGlzLmFsbFRhYkhlYWRlcnMubGVuZ3RoIC0gMV0ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdH1cblxuXHRcdC8vIGBcIlNwYWNlYmFyXCJgIGlzIElFMTEgc3BlY2lmaWMgdmFsdWVcblx0XHRpZiAoKGV2ZW50LmtleSA9PT0gXCIgXCIgfHwgZXZlbnQua2V5ID09PSBcIlNwYWNlYmFyXCIpICYmICF0aGlzLmZvbGxvd0ZvY3VzKSB7XG5cdFx0XHR0aGlzLnNlbGVjdFRhYihldmVudC50YXJnZXQsIHRhYnNBcnJheVt0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYl0sIHRoaXMuY3VycmVudFNlbGVjdGVkVGFiKTtcblx0XHR9XG5cblx0XHQvLyBkcm9wZG93biBsaXN0IGhhbmRsZXJcblx0XHRpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG5cdFx0XHR0aGlzLmhpZGVUYWJMaXN0KCk7XG5cdFx0fVxuXHR9XG5cblx0QEhvc3RMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIFtcIiRldmVudFwiXSlcblx0Zm9jdXNPdXQoZXZlbnQpIHtcblx0XHRpZiAodGhpcy50YWJMaXN0VmlzaWJsZSAmJiAhdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpIHtcblx0XHRcdHRoaXMudGFiTGlzdFZpc2libGUgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0aWYgKCF0aGlzLnRhYklucHV0KSB7XG5cdFx0XHR0aGlzLnRhYnMgPSB0aGlzLnRhYlF1ZXJ5O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnRhYnMgPSB0aGlzLnRhYklucHV0O1xuXHRcdH1cblxuXHRcdHRoaXMudGFicy5mb3JFYWNoKHRhYiA9PiB0YWIuY2FjaGVBY3RpdmUgPSB0aGlzLmNhY2hlQWN0aXZlKTtcblx0XHR0aGlzLnRhYnMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4ge1xuXHRcdFx0dGhpcy5zZXRGaXJzdFRhYigpO1xuXHRcdH0pO1xuXHRcdHRoaXMuc2V0Rmlyc3RUYWIoKTtcblx0fVxuXG5cdG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcblx0XHRpZiAodGhpcy50YWJzICYmIGNoYW5nZXMuY2FjaGVBY3RpdmUpIHtcblx0XHRcdHRoaXMudGFicy5mb3JFYWNoKHRhYiA9PiB0YWIuY2FjaGVBY3RpdmUgPSB0aGlzLmNhY2hlQWN0aXZlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ29udHJvbHMgbWFudWFsbHkgZm9jdXNpbmcgdGFicy5cblx0ICovXG5cdHB1YmxpYyBvblRhYkZvY3VzKHJlZjogSFRNTEVsZW1lbnQsIGluZGV4OiBudW1iZXIpIHtcblx0XHRpZiAodGhpcy50YWJMaXN0VmlzaWJsZSkgeyByZXR1cm47IH1cblx0XHR0aGlzLmN1cnJlbnRTZWxlY3RlZFRhYiA9IGluZGV4O1xuXHRcdC8vIHJlc2V0IHNjcm9sbCBsZWZ0IGJlY2F1c2Ugd2UncmUgYWxyZWFkeSBoYW5kbGluZyBpdFxuXHRcdHRoaXMuaGVhZGVyQ29udGFpbmVyLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5zY3JvbGxMZWZ0ID0gMDtcblx0fVxuXG5cdHB1YmxpYyBnZXRTZWxlY3RlZFRhYigpOiBhbnkge1xuXHRcdGNvbnN0IHNlbGVjdGVkID0gdGhpcy50YWJzLmZpbmQodGFiID0+IHRhYi5hY3RpdmUpO1xuXHRcdGlmIChzZWxlY3RlZCkge1xuXHRcdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHRcdH1cblx0XHRyZXR1cm4ge2hlYWRpbmdJc1RlbXBsYXRlOiBmYWxzZSwgaGVhZGluZzogXCJcIn07XG5cdH1cblxuXHRwdWJsaWMgc2hvd1RhYkxpc3QoKSB7XG5cdFx0dGhpcy50YWJMaXN0VmlzaWJsZSA9IHRydWU7XG5cdFx0Y29uc3QgZm9jdXNUYXJnZXQgPSB0aGlzLmFsbFRhYkhlYWRlcnMuZmluZCh0YWIgPT4ge1xuXHRcdFx0Y29uc3QgdGFiQ29udGFpbmVyID0gdGFiLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudDtcblx0XHRcdHJldHVybiAhdGFiQ29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucyhcImJ4LS10YWJzX19uYXYtaXRlbS0tc2VsZWN0ZWRcIik7XG5cdFx0fSk7XG5cdFx0Zm9jdXNUYXJnZXQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHR9XG5cblx0cHVibGljIGhpZGVUYWJMaXN0KCkge1xuXHRcdHRoaXMudGFiTGlzdFZpc2libGUgPSBmYWxzZTtcblx0fVxuXG5cdHB1YmxpYyBvbkRyb3Bkb3duS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuXHRcdHN3aXRjaCAoZXZlbnQua2V5KSB7XG5cdFx0XHRjYXNlIFwiIFwiOlxuXHRcdFx0Y2FzZSBcIlNwYWNlYmFyXCI6XG5cdFx0XHRjYXNlIFwiRW50ZXJcIjpcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0dGhpcy5zaG93VGFiTGlzdCgpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyB0YWJEcm9wZG93bktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHRpZiAoIXRoaXMudGFiTGlzdFZpc2libGUpIHsgcmV0dXJuOyB9XG5cdFx0Y29uc3QgdGFyZ2V0ID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xvc2VzdChcImFcIik7XG5cblx0XHRjb25zdCBoZWFkZXJzID0gdGhpcy5hbGxUYWJIZWFkZXJzLnRvQXJyYXkoKS5maWx0ZXIodGFiID0+XG5cdFx0XHQhdGFiLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJieC0tdGFic19fbmF2LWl0ZW0tLWRpc2FibGVkXCIpICYmXG5cdFx0XHQhdGFiLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJieC0tdGFic19fbmF2LWl0ZW0tLXNlbGVjdGVkXCIpKTtcblxuXHRcdC8vIHVubGVzcyB0aGUgZm9jdXMgY2FuIG1vdmUsIGl0IHNob3VsZCByZW1haW4gb24gdGhlIHRhcmdldFxuXHRcdGxldCBuZXh0OiBIVE1MRWxlbWVudCA9IHRhcmdldDtcblx0XHRsZXQgcHJldmlvdXM6IEhUTUxFbGVtZW50ID0gdGFyZ2V0O1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoaGVhZGVyc1tpXS5uYXRpdmVFbGVtZW50ID09PSB0YXJnZXQpIHtcblx0XHRcdFx0aWYgKGkgKyAxIDwgaGVhZGVycy5sZW5ndGgpIHtcblx0XHRcdFx0XHRuZXh0ID0gaGVhZGVyc1tpICsgMV0ubmF0aXZlRWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaSAtIDEgPj0gMCkge1xuXHRcdFx0XHRcdHByZXZpb3VzID0gaGVhZGVyc1tpIC0gMV0ubmF0aXZlRWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHN3aXRjaCAoZXZlbnQua2V5KSB7XG5cdFx0XHRjYXNlIFwiQXJyb3dEb3duXCI6XG5cdFx0XHRjYXNlIFwiRG93blwiOiAvLyBJRTExIHNwZWNpZmljIHZhbHVlXG5cdFx0XHRcdG5leHQuZm9jdXMoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiQXJyb3dVcFwiOlxuXHRcdFx0Y2FzZSBcIlVwXCI6IC8vIElFMTEgc3BlY2lmaWMgdmFsdWVcblx0XHRcdFx0cHJldmlvdXMuZm9jdXMoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2VsZWN0cyBgVGFiYCAndGFiJyBhbmQgbW92ZXMgaXQgaW50byB2aWV3IG9uIHRoZSB2aWV3IERPTSBpZiBpdCBpcyBub3QgYWxyZWFkeS5cblx0ICovXG5cdHB1YmxpYyBzZWxlY3RUYWIocmVmOiBIVE1MRWxlbWVudCwgdGFiOiBUYWIsIHRhYkluZGV4OiBudW1iZXIpIHtcblx0XHRpZiAodGFiLmRpc2FibGVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gaGlkZSB0aGUgdGFibGlzdCBvbiBtb2JpbGVcblx0XHR0aGlzLnRhYkxpc3RWaXNpYmxlID0gZmFsc2U7XG5cdFx0dGhpcy5jdXJyZW50U2VsZWN0ZWRUYWIgPSB0YWJJbmRleDtcblx0XHR0aGlzLnRhYnMuZm9yRWFjaChfdGFiID0+IF90YWIuYWN0aXZlID0gZmFsc2UpO1xuXHRcdHRhYi5hY3RpdmUgPSB0cnVlO1xuXHRcdHRhYi5kb1NlbGVjdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERldGVybWluZXMgd2hpY2ggYFRhYmAgaXMgaW5pdGlhbGx5IHNlbGVjdGVkLlxuXHQgKi9cblx0cHJvdGVjdGVkIHNldEZpcnN0VGFiKCkge1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0bGV0IGZpcnN0VGFiID0gdGhpcy50YWJzLmZpbmQodGFiID0+IHRhYi5hY3RpdmUpO1xuXHRcdFx0aWYgKCFmaXJzdFRhYiAmJiB0aGlzLnRhYnMuZmlyc3QpIHtcblx0XHRcdFx0Zmlyc3RUYWIgPSB0aGlzLnRhYnMuZmlyc3Q7XG5cdFx0XHRcdGZpcnN0VGFiLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZmlyc3RUYWIpIHtcblx0XHRcdFx0Zmlyc3RUYWIuZG9TZWxlY3QoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuIl19