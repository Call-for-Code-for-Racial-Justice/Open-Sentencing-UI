/**
 *
 * carbon-angular v0.0.0 | table-item.class.js
 *
 * Copyright 2014, 2021 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import * as tslib_1 from "tslib";
var TableItem = /** @class */ (function () {
    /**
     * Creates an instance of TableItem.
     */
    function TableItem(rawData) {
        var e_1, _a;
        /**
         * The number of rows to span
         */
        this.rowSpan = 1;
        /**
         * The number of columns to span
         */
        this.colSpan = 1;
        // defaults so we dont leave things empty
        var defaults = {
            data: ""
        };
        // fill our object with provided props, and fallback to defaults
        var data = Object.assign({}, defaults, rawData);
        try {
            for (var _b = tslib_1.__values(Object.getOwnPropertyNames(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var property = _c.value;
                if (data.hasOwnProperty(property)) {
                    this[property] = data[property];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    Object.defineProperty(TableItem.prototype, "title", {
        get: function () {
            if (this._title) {
                return this._title;
            }
            if (!this.data) {
                return "";
            }
            if (typeof this.data === "string") {
                return this.data;
            }
            if (this.data.toString &&
                this.data.constructor !== ({}).constructor) {
                return this.data.toString();
            }
            return JSON.stringify(this.data);
        },
        set: function (title) {
            this._title = title;
        },
        enumerable: true,
        configurable: true
    });
    return TableItem;
}());
export { TableItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtaXRlbS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NhcmJvbi1jb21wb25lbnRzLWFuZ3VsYXIvdGFibGUvIiwic291cmNlcyI6WyJ0YWJsZS1pdGVtLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQTtJQXFJQzs7T0FFRztJQUNILG1CQUFZLE9BQWE7O1FBMUN6Qjs7V0FFRztRQUNILFlBQU8sR0FBRyxDQUFDLENBQUM7UUFFWjs7V0FFRztRQUNILFlBQU8sR0FBRyxDQUFDLENBQUM7UUFtQ1gseUNBQXlDO1FBQ3pDLElBQU0sUUFBUSxHQUFHO1lBQ2hCLElBQUksRUFBRSxFQUFFO1NBQ1IsQ0FBQztRQUNGLGdFQUFnRTtRQUNoRSxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7O1lBQ2xELEtBQXVCLElBQUEsS0FBQSxpQkFBQSxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQXBELElBQU0sUUFBUSxXQUFBO2dCQUNsQixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ2hDO2FBQ0Q7Ozs7Ozs7OztJQUNGLENBQUM7SUE1Q0Qsc0JBQUksNEJBQUs7YUFBVDtZQUNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ25CO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2YsT0FBTyxFQUFFLENBQUM7YUFDVjtZQUVELElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO2FBQ2pCO1lBRUQsSUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUN6QztnQkFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDNUI7WUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUM7YUFFRCxVQUFVLEtBQUs7WUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNyQixDQUFDOzs7T0FKQTtJQXdCRixnQkFBQztBQUFELENBQUMsQUFySkQsSUFxSkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRUZW1wbGF0ZVJlZlxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5leHBvcnQgY2xhc3MgVGFibGVJdGVtIHtcblx0LyoqXG5cdCAqIERhdGEgZm9yIHRoZSB0YWJsZSBpdGVtLlxuXHQgKi9cblx0ZGF0YTogYW55O1xuXG5cdC8qKlxuXHQgKiBEYXRhIGZvciB0aGUgZXhwYW5kZWQgcGFydCBvZiB0aGUgcm93LlxuXHQgKlxuXHQgKiBZb3Ugb25seSBuZWVkIHRvIHNldCBpdCBmb3IgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIHJvdy5cblx0ICpcblx0ICogU2VlIGBleHBhbmRBc1RhYmxlYCBkb2N1bWVudGF0aW9uIGlmIHlvdSBuZWVkIHRvIHRoZSB0YWJsZSB0byBleHBhbmQgdG8gYWRkaXRpb25hbFxuXHQgKiB0YWJsZSByb3dzLlxuXHQgKi9cblx0ZXhwYW5kZWREYXRhOiBhbnk7XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gZGlzcGxheSBkYXRhIGluIGEgZGVzaXJlZCB3YXkuXG5cdCAqXG5cdCAqIElmIG5vdCBwcm92aWRlZCwgZGlzcGxheXMgZGF0YSBhcyBhIHNpbXBsZSBzdHJpbmcuXG5cdCAqXG5cdCAqIFVzYWdlOlxuXHQgKlxuXHQgKiBJbiBhIGNvbXBvbmVudCB3aGVyZSB5b3UncmUgdXNpbmcgdGhlIHRhYmxlIGNyZWF0ZSBhIHRlbXBsYXRlIGxpa2U6XG5cdCAqXG5cdCAqIGBgYGh0bWxcblx0ICogPG5nLXRlbXBsYXRlICNjdXN0b21JdGVtVGVtcGxhdGUgbGV0LWRhdGE9XCJkYXRhXCI+XG5cdCAqIFx0PGk+PGEgW3JvdXRlckxpbmtdPVwiZGF0YS5saW5rXCI+e3tkYXRhLm5hbWV9fTwvYT48L2k+XG5cdCAqIDwvbmctdGVtcGxhdGU+XG5cdCAqIGBgYFxuXHQgKiB3aGVyZSB3ZSBhc3N1bWUgeW91ciBkYXRhIGNvbnRhaW5zIGBsaW5rYCBhbmQgYG5hbWVgLiBgbGV0LWRhdGE9XCJkYXRhXCJgIGlzXG5cdCAqIG5lY2Vzc2FyeSBmb3IgeW91IHRvIGJlIGFibGUgdG8gYWNjZXNzIGl0ZW0ncyBkYXRhIGluIHRoZSB0ZW1wbGF0ZS5cblx0ICpcblx0ICogQ3JlYXRlIGBWaWV3Q2hpbGRgIHByb3BlcnR5IHdpdGg6XG5cdCAqXG5cdCAqIGBgYHR5cGVzY3JpcHRcblx0ICogKGF0KVZpZXdDaGlsZChcImN1c3RvbUl0ZW1UZW1wbGF0ZVwiKVxuXHQgKiBwcm90ZWN0ZWQgY3VzdG9tSXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXHQgKiBgYGBcblx0ICpcblx0ICogU2V0IHRoZSB0ZW1wbGF0ZSB0byB0aGUgdGFibGUgaXRlbSwgZm9yIGV4YW1wbGU6XG5cdCAqXG5cdCAqIGBgYHR5cGVzY3JpcHRcblx0ICogdGhpcy5tb2RlbC5kYXRhID0gW1xuXHQgKiBcdFtuZXcgVGFibGVJdGVtKHtkYXRhOiB7bmFtZTogXCJDdXN0b20gaXRlbVwiLCBsaW5rOiBcIi90YWJsZVwifSwgdGVtcGxhdGU6IHRoaXMuY3VzdG9tSXRlbVRlbXBsYXRlfSldXG5cdCAqIF07XG5cdCAqIGBgYFxuXHQgKi9cblx0dGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cblx0LyoqXG5cdCAqIFRlbXBsYXRlIGZvciByZW5kZXJpbmcgYGV4cGFuZGVkRGF0YWBcblx0ICpcblx0ICogWW91IG9ubHkgbmVlZCB0byBzZXQgaXQgZm9yIHRoZSBmaXJzdCBpdGVtIGluIHRoZSByb3cuXG5cdCAqXG5cdCAqL1xuXHRleHBhbmRlZFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG5cdC8qKlxuXHQgKiBTZXR0aW5nIHRoaXMgdG8gYHRydWVgIG1ha2VzIHRhYmxlIGludGVycHJldCBgZXhwYW5kZWREYXRhYCBhcyBhZGRpdGlvbmFsIHJvd3MgdG8gaW5zZXJ0IGluIHBsYWNlXG5cdCAqIGZvciBleHBhbmRlZCBkYXRhLiBgZXhwYW5kZWRUZW1wbGF0ZWAgaXMgdGhlbiBpZ25vcmVkLlxuXHQgKlxuXHQgKiBZb3UgY2FuIGFwcGx5IHRoZSB0ZW1wbGF0ZSBmb3IgaW5kaXZpZHVhbCBjZWxscyBhcyB1c3VhbC5cblx0ICpcblx0ICogRXhhbXBsZSBtb2RlbCBkYXRhOlxuXHQgKlxuXHQgKiBgYGB0eXBlc2NyaXB0XG5cdCAqIHRoaXMubW9kZWwuZGF0YSA9IFtcblx0ICogXHRbbmV3IFRhYmxlSXRlbSh7IGRhdGE6IFwiTmFtZSA0XCIgfSksIG5ldyBUYWJsZUl0ZW0oeyBkYXRhOiBcInR3ZXJcIiB9KV0sIC8vIHJlZ3VsYXIgcm93XG5cdCAqIFx0W1xuXHQgKiBcdFx0bmV3IFRhYmxlSXRlbSh7XG5cdCAqIFx0XHRcdGRhdGE6IFwiTmFtZSAzLjFcIixcblx0ICogXHRcdFx0Ly8gYGV4cGFuZGVkRGF0YWAgbWltaWNzIHRoZSBmb3JtYXQgb2YgdGhlIHJlc3Qgb2YgdGhlIHRhYmxlXG5cdCAqIFx0XHRcdGV4cGFuZGVkRGF0YTogW1xuXHQgKiBcdFx0XHRcdFtcblx0ICogXHRcdFx0XHRcdG5ldyBUYWJsZUl0ZW0oeyBkYXRhOiBcIk1vcmUgbmFtZXNcIiwgZXhwYW5kZWREYXRhOiBcIk5vIHRlbXBsYXRlXCIgfSksXG5cdCAqIFx0XHRcdFx0XHRuZXcgVGFibGVJdGVtKHsgZGF0YTogeyBuYW1lOiBcIk1vcmV5XCIsIGxpbms6IFwiI1wiIH0sIHRlbXBsYXRlOiB0aGlzLmN1c3RvbVRhYmxlSXRlbVRlbXBsYXRlIH0pXG5cdCAqIFx0XHRcdFx0XSxcblx0ICogXHRcdFx0XHRbXG5cdCAqIFx0XHRcdFx0XHRuZXcgVGFibGVJdGVtKHsgZGF0YTogXCJDb3JlIG5hbWVzXCIsIGV4cGFuZGVkRGF0YTogXCJObyB0ZW1wbGF0ZVwiIH0pLFxuXHQgKiBcdFx0XHRcdFx0bmV3IFRhYmxlSXRlbSh7IGRhdGE6IHsgbmFtZTogXCJDb3JleVwiLCBsaW5rOiBcIiNcIiB9LCB0ZW1wbGF0ZTogdGhpcy5jdXN0b21UYWJsZUl0ZW1UZW1wbGF0ZSB9KVxuXHQgKiBcdFx0XHRcdF1cblx0ICogXHRcdFx0XSxcblx0ICogXHRcdFx0Ly8gYGV4cGFuZEFzVGFibGVgIHRlbGxzIHRoZSB0YWJsZSB0byBpbnRlcnByZXQgYGV4cGFuZGVkRGF0YWAgYXMgdGFibGUgZGF0YVxuXHQgKiBcdFx0XHRleHBhbmRBc1RhYmxlOiB0cnVlXG5cdCAqIFx0XHR9KSxcblx0ICogXHRcdG5ldyBUYWJsZUl0ZW0oeyBkYXRhOiBcInN3ZXJcIiB9KVxuXHQgKiBcdF0sXG5cdCAqIFx0W25ldyBUYWJsZUl0ZW0oeyBkYXRhOiBcIk5hbWUgN1wiIH0pLCBuZXcgVGFibGVJdGVtKHtkYXRhOiBcInR3ZXJcIn0pXSAvLyByZWd1bGFyIHJvd1xuXHQgKiBdO1xuXHQgKiBgYGBcblx0ICovXG5cdGV4cGFuZEFzVGFibGU6IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBUaGUgbnVtYmVyIG9mIHJvd3MgdG8gc3BhblxuXHQgKi9cblx0cm93U3BhbiA9IDE7XG5cblx0LyoqXG5cdCAqIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0byBzcGFuXG5cdCAqL1xuXHRjb2xTcGFuID0gMTtcblxuXHRnZXQgdGl0bGUoKSB7XG5cdFx0aWYgKHRoaXMuX3RpdGxlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdGl0bGU7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmRhdGEpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgdGhpcy5kYXRhID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRhO1xuXHRcdH1cblxuXHRcdGlmIChcblx0XHRcdHRoaXMuZGF0YS50b1N0cmluZyAmJlxuXHRcdFx0dGhpcy5kYXRhLmNvbnN0cnVjdG9yICE9PSAoe30pLmNvbnN0cnVjdG9yXG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRhLnRvU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSk7XG5cdH1cblxuXHRzZXQgdGl0bGUodGl0bGUpIHtcblx0XHR0aGlzLl90aXRsZSA9IHRpdGxlO1xuXHR9XG5cblx0cHJpdmF0ZSBfdGl0bGU6IHN0cmluZztcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBUYWJsZUl0ZW0uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyYXdEYXRhPzogYW55KSB7XG5cdFx0Ly8gZGVmYXVsdHMgc28gd2UgZG9udCBsZWF2ZSB0aGluZ3MgZW1wdHlcblx0XHRjb25zdCBkZWZhdWx0cyA9IHtcblx0XHRcdGRhdGE6IFwiXCJcblx0XHR9O1xuXHRcdC8vIGZpbGwgb3VyIG9iamVjdCB3aXRoIHByb3ZpZGVkIHByb3BzLCBhbmQgZmFsbGJhY2sgdG8gZGVmYXVsdHNcblx0XHRjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIHJhd0RhdGEpO1xuXHRcdGZvciAoY29uc3QgcHJvcGVydHkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YSkpIHtcblx0XHRcdGlmIChkYXRhLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuXHRcdFx0XHR0aGlzW3Byb3BlcnR5XSA9IGRhdGFbcHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl19